1
00:00:00,150 --> 00:00:05,340
Hello, and this video, we're going to talk about a complete guide to console dialogue, so this is

2
00:00:05,370 --> 00:00:10,200
the standard way to log text to the console in JavaScript.

3
00:00:10,500 --> 00:00:16,200
Now, you can log a whole bunch more things from text numbers to any variable in JavaScript.

4
00:00:16,500 --> 00:00:19,410
You could log errors warning's, you could style things.

5
00:00:19,680 --> 00:00:22,350
And basically, there's a whole bunch of other things you could do with this.

6
00:00:22,770 --> 00:00:25,170
You could profile, you could do console dot time.

7
00:00:25,170 --> 00:00:25,480
You could.

8
00:00:25,920 --> 00:00:27,470
So there's a lot of things you can do.

9
00:00:27,480 --> 00:00:32,910
We're going to focus on console to log, console out, warn and console error in this video, which

10
00:00:32,910 --> 00:00:37,380
are really the most commonly used console logs in general.

11
00:00:37,380 --> 00:00:42,690
I think putting breakpoints is better than console log because you're inspecting data rather than,

12
00:00:42,690 --> 00:00:46,860
you know, putting a log statement and typing out that text that you have to later delete.

13
00:00:47,010 --> 00:00:50,580
I think log statements are a little bit more verbose.

14
00:00:50,820 --> 00:00:57,150
But if you are in a really complicated code base and you just want to log something really quick rather

15
00:00:57,150 --> 00:01:01,870
than finding that file, then console dialog is definitely going to be the way that you should go here.

16
00:01:02,230 --> 00:01:08,460
So at first example here, this is just basic console to log in the arguments here.

17
00:01:08,460 --> 00:01:10,680
We're putting a text string here.

18
00:01:11,010 --> 00:01:15,510
And as you could see on the console, this is being logged over here, so.

19
00:01:16,330 --> 00:01:21,550
Now, if we go down to their next example, you can so you might be thinking, you know, if you if

20
00:01:21,550 --> 00:01:26,970
you want to do multiple console dialogues, you could copy and paste this throughout the next line.

21
00:01:27,220 --> 00:01:29,200
But that's a little bit tedious.

22
00:01:29,200 --> 00:01:35,320
But you could do instead is simply just add a comma here and then add another line of text or whatever

23
00:01:35,320 --> 00:01:38,530
you want to add and could add a variable in here, a JavaScript variable.

24
00:01:38,680 --> 00:01:41,680
As I show in the next example we are logging.

25
00:01:41,900 --> 00:01:46,300
You can there's no limit to the number of arguments here, so you could add in as many arguments as

26
00:01:46,300 --> 00:01:46,720
you want.

27
00:01:47,380 --> 00:01:54,490
So here I'm logging in some strings, a number and array a an object and then an undefined here.

28
00:01:54,490 --> 00:01:56,370
So all so that's what that looks like here.

29
00:01:56,740 --> 00:02:01,660
If you go if we go to the console here, you could see the array and the object are things that we can

30
00:02:01,660 --> 00:02:04,770
expand out and look at more data for those items.

31
00:02:05,080 --> 00:02:10,240
So but it's nice to give you a nice preview here for the object in the array so you can, you know,

32
00:02:10,240 --> 00:02:12,760
make some assumptions by just looking at it like that.

33
00:02:13,060 --> 00:02:14,300
And it's cool.

34
00:02:14,320 --> 00:02:20,740
So the most commonly used way to do this, if you're trying to log like an object or something, would

35
00:02:20,740 --> 00:02:21,730
be in this example.

36
00:02:21,730 --> 00:02:24,990
We have this board object here and here.

37
00:02:25,000 --> 00:02:29,170
But what we're doing is rather than do you know, let's say you want to log a bunch of different things

38
00:02:29,170 --> 00:02:30,070
in different spots.

39
00:02:30,460 --> 00:02:37,110
What you can do here is that you're logging the text string first and then after that you have the object.

40
00:02:37,330 --> 00:02:43,180
So here we have that object being logged and I can once again expand and view the data that I want.

41
00:02:43,330 --> 00:02:45,610
But the key thing here is that you're labeling it ahead.

42
00:02:45,610 --> 00:02:46,230
So it's nice.

43
00:02:46,240 --> 00:02:51,670
So you're not just, you know, logging some random object that you don't know where it is now.

44
00:02:51,670 --> 00:02:56,680
Something to know about logging objects is that this is actually it's by reference.

45
00:02:56,680 --> 00:02:59,110
So you're not logging this actual value here.

46
00:02:59,260 --> 00:03:04,690
You're logging it at the time of the you're opening it the end result value.

47
00:03:04,690 --> 00:03:04,900
Right.

48
00:03:04,930 --> 00:03:07,340
So this is a reference to this thing called initial state.

49
00:03:07,630 --> 00:03:14,860
Now, if after I log it, I do something like this where I say initial state dot foo equals.

50
00:03:15,820 --> 00:03:19,510
VA, what's going to happen is if we look at this.

51
00:03:20,680 --> 00:03:25,990
We actually have that foobar in there, so if you're trying to log a bunch of objects, one after another

52
00:03:25,990 --> 00:03:30,940
to try and see data changing what you would do instead as you would try to make a copy of that object

53
00:03:31,240 --> 00:03:36,340
or, for example, what you could do in this example, I'm just going to make a quick, shallow copy

54
00:03:36,340 --> 00:03:37,090
of this object.

55
00:03:37,330 --> 00:03:43,300
So I made a copy of this object at this time, you know, so now I have this this copy here and now

56
00:03:43,300 --> 00:03:47,980
this doesn't have that new object that I added here or that new property that I added on here.

57
00:03:48,430 --> 00:03:49,710
But this isn't a deep copy.

58
00:03:49,720 --> 00:03:55,150
So what that means is if I change the grid, then that grid will be whatever.

59
00:03:55,150 --> 00:03:55,780
I changed it.

60
00:03:55,910 --> 00:03:57,300
So it's going to be the current value.

61
00:03:57,550 --> 00:04:00,880
So you just have to keep that in mind when you're logging it, you're logging the current value of that

62
00:04:00,880 --> 00:04:03,250
object at the end of all of your code execution.

63
00:04:03,250 --> 00:04:05,020
You're not logging the current value.

64
00:04:05,170 --> 00:04:09,640
If you want to log the current value, you have to do a deep copy, which will do another tutorial on.

65
00:04:09,820 --> 00:04:14,590
So next thing we're going to do is just log string substitutions.

66
00:04:14,800 --> 00:04:16,900
So I'll be honest, this I pretty much never do.

67
00:04:17,230 --> 00:04:21,610
I don't really ever need a really nice formatted logs like this.

68
00:04:21,970 --> 00:04:25,540
But let me just comment about the other things here that I have.

69
00:04:25,540 --> 00:04:28,630
So I coming out this so.

70
00:04:30,330 --> 00:04:33,180
And you can see here it's substituting this string here.

71
00:04:35,190 --> 00:04:39,430
And then at the end, it's going to substitute in the current value, ie, into that string statement.

72
00:04:39,840 --> 00:04:45,270
Now, like I said, so and then also you have a number here, which is Pursat D, and if you go to the

73
00:04:45,270 --> 00:04:53,710
console API from Mozilla, you could see the list of the substitutions so you can accept this.

74
00:04:53,730 --> 00:04:56,340
So accept these substitution strings.

75
00:04:56,340 --> 00:05:03,270
The you could put an object in your log, you could do a percent d an integer, so D an integer and

76
00:05:03,270 --> 00:05:05,790
then you could also have a string and then an F as a floating point.

77
00:05:06,270 --> 00:05:11,250
Now I would never do this because if I was doing this, I would probably just use a JavaScript template,

78
00:05:11,640 --> 00:05:15,870
which is basically just a template in JavaScript which looks like this.

79
00:05:16,260 --> 00:05:22,260
So I would basically, for example, just get rid of all this and I would just put this in here.

80
00:05:22,410 --> 00:05:28,920
And then for whatever for whatever I wanted to log, I would just use the dollar here.

81
00:05:28,950 --> 00:05:30,030
And then I would just say.

82
00:05:31,470 --> 00:05:31,950
There you go.

83
00:05:32,280 --> 00:05:34,530
So I would do something like that instead.

84
00:05:35,610 --> 00:05:36,060
So.

85
00:05:37,160 --> 00:05:42,290
And I would just yeah, so this is what I would do if I wanted to.

86
00:05:42,320 --> 00:05:44,200
So as you could see, this is a string template.

87
00:05:44,210 --> 00:05:49,430
So this is the way that I would prefer to do this, just because then you could put anything in here

88
00:05:49,430 --> 00:05:53,330
and don't have to worry about the the formatting of that string substitution.

89
00:05:53,570 --> 00:05:57,830
That's probably a pre JavaScript template thing that's just kind of left over.

90
00:05:58,040 --> 00:06:03,260
So, again, if I put in, like, initial state, that's going to log that object object here, but

91
00:06:03,260 --> 00:06:04,190
that doesn't work out.

92
00:06:04,200 --> 00:06:09,250
So let me see what happens if we use the the percent O in here.

93
00:06:09,260 --> 00:06:11,690
So let's go back to the thing here and we see percent.

94
00:06:12,360 --> 00:06:19,970
Oh so we do this percent o and then we use the initial state here and let's just see what this would

95
00:06:20,120 --> 00:06:21,140
log here.

96
00:06:26,420 --> 00:06:32,330
OK, so if we use the string percent oh, in this example, we're logging this string statement here

97
00:06:32,630 --> 00:06:37,490
and so that we could put like some text after this, for example, hello, object.

98
00:06:38,490 --> 00:06:44,100
How are you so we do that and then you could see now if you wanted some kind of log like this where

99
00:06:44,100 --> 00:06:48,150
you had an object in the middle of a bunch of text, you would use the string substitution.

100
00:06:48,150 --> 00:06:50,460
But again, something I really would never do.

101
00:06:50,830 --> 00:06:58,470
So just showing you that in comment that out and we can move on to the next thing, which is styling.

102
00:06:58,470 --> 00:07:02,760
So, again, something that I don't do, but it's really cool and I think probably more people are going

103
00:07:02,760 --> 00:07:08,520
to start doing this for if you wanted, maybe you had some kind of extension or you're putting some

104
00:07:08,520 --> 00:07:12,000
code on someone's site and you want to style there a message for them.

105
00:07:12,660 --> 00:07:16,320
You could do it like this where you have this stylish message here.

106
00:07:16,330 --> 00:07:20,550
So basically that's just adding in a string of styles after.

107
00:07:20,940 --> 00:07:24,160
And I took this example from the website Mozilla.

108
00:07:24,180 --> 00:07:29,640
So this is just using the C to apply a CSA style to the output.

109
00:07:29,970 --> 00:07:34,490
The text before the directive will not be affected, but the text after the directive will be styled.

110
00:07:34,800 --> 00:07:38,700
So, I mean, this is really something that is pretty niche.

111
00:07:38,700 --> 00:07:44,100
And I don't think there's ever a point to doing this, especially since logs are not shown in production

112
00:07:45,150 --> 00:07:45,690
usually.

113
00:07:45,690 --> 00:07:47,610
So you would never really need to do this.

114
00:07:47,970 --> 00:07:52,950
So unless you wanted, you know, really you had a really intense log scenario and you needed a bunch

115
00:07:52,950 --> 00:07:54,780
of different styles to come out.

116
00:07:54,780 --> 00:07:56,650
You could you could do this if you wanted to.

117
00:07:56,670 --> 00:07:57,510
So that's really cool.

118
00:07:58,200 --> 00:08:00,270
I think it's cool, but again, not very useful.

119
00:08:00,540 --> 00:08:00,900
All right.

120
00:08:00,900 --> 00:08:04,620
So next thing we're going to talk about is console timeworn.

121
00:08:05,130 --> 00:08:10,050
So console, I warn, is basically you've seen libraries like Riak do this.

122
00:08:10,380 --> 00:08:13,290
They will put this warning in your app.

123
00:08:13,290 --> 00:08:18,240
If you're doing if you're saying if you're using a deprecated function, for example, or you're doing

124
00:08:18,240 --> 00:08:23,460
something that you want the user not to do, but to be aware of, but not necessarily to throw an error

125
00:08:23,460 --> 00:08:25,790
or crash or app or anything, you would do this.

126
00:08:25,800 --> 00:08:30,450
So this would show you the stack trace of that warning just so you can know where that came from.

127
00:08:30,690 --> 00:08:33,050
So you could say it came from react or wherever it came from.

128
00:08:33,360 --> 00:08:35,100
And so that's that's really cool.

129
00:08:35,130 --> 00:08:37,470
So you could do console timeworn in your own apps, right.

130
00:08:37,500 --> 00:08:43,170
So if you're writing an open source library or if you're writing some kind of even.

131
00:08:43,410 --> 00:08:43,670
Yeah.

132
00:08:43,680 --> 00:08:48,780
So if you're writing an open source library or tool or something that someone should use even an internal

133
00:08:48,780 --> 00:08:53,250
library for people that you're using some kind of component or something, you could throw a warning

134
00:08:53,250 --> 00:08:53,610
in that.

135
00:08:54,920 --> 00:09:00,220
So we're going to comment that our next thing is concealed on log on a console, all log this area.

136
00:09:00,230 --> 00:09:01,520
So this is a try catch block.

137
00:09:01,790 --> 00:09:07,520
So I'm going to just throw an error here and just going to create some breaking functionality.

138
00:09:07,520 --> 00:09:09,560
And I'm going to catch that error with the console log.

139
00:09:09,570 --> 00:09:14,560
So what happens if we just consolidate, log that error, we get the stack trace.

140
00:09:15,020 --> 00:09:20,570
So he could see here that, you know, it's pretty useful to have this stack trace in here.

141
00:09:20,870 --> 00:09:23,930
And if you want to put something in front of that, you could do that as well.

142
00:09:24,170 --> 00:09:31,730
So I think the normal the default is just going to be a console error e so if we just do that, then

143
00:09:31,730 --> 00:09:32,570
we've caught the error.

144
00:09:32,570 --> 00:09:34,070
So we're not going to break our app.

145
00:09:34,570 --> 00:09:35,860
So this is console error.

146
00:09:36,350 --> 00:09:38,750
So we do that and now you get the red text.

147
00:09:38,750 --> 00:09:44,430
So it's the same thing except it's red and that's basically, you know, the whole point of console,

148
00:09:44,430 --> 00:09:44,800
not error.

149
00:09:44,800 --> 00:09:46,070
It just makes the text read.

150
00:09:46,070 --> 00:09:48,350
It makes it it doesn't actually break your app.

151
00:09:48,350 --> 00:09:54,770
So it could see, like, my app is still still functioning over here, but I caught that JavaScript

152
00:09:54,770 --> 00:09:57,290
error, so my app is not crashed, so.

153
00:09:58,860 --> 00:10:03,840
Let's continue on, so if I want to type something else so I could make my own error message in here,

154
00:10:03,840 --> 00:10:10,080
if I want to say you did something bad and then I could log Stack Trace if I wanted to.

155
00:10:10,090 --> 00:10:11,010
So take a look at that.

156
00:10:11,910 --> 00:10:17,520
And so, you know, you could put a return statement, you could make one you could make one error that

157
00:10:17,520 --> 00:10:18,210
does this.

158
00:10:18,480 --> 00:10:24,120
So maybe you'd want to make an error like that and then you'd want to do the actual stack trace for

159
00:10:24,120 --> 00:10:24,650
the user.

160
00:10:25,020 --> 00:10:25,470
So.

161
00:10:27,080 --> 00:10:27,640
See that?

162
00:10:29,490 --> 00:10:30,520
See what that looks like?

163
00:10:30,570 --> 00:10:31,800
So there you go.

164
00:10:31,830 --> 00:10:34,890
So this is cool, this is like, hey, you want to make your own error logging.

165
00:10:35,190 --> 00:10:36,950
You could do that with this pretty easily.

166
00:10:37,230 --> 00:10:40,140
So, again, you can make it whatever.

167
00:10:40,140 --> 00:10:42,840
Say you don't have to make it output the stack trace.

168
00:10:42,840 --> 00:10:48,180
But that would be nice for you to do if you were making a library to include that stack trace there.

169
00:10:48,210 --> 00:10:49,230
So there you go.

170
00:10:49,260 --> 00:10:52,320
So this is just the console, that error and.

171
00:10:52,710 --> 00:10:54,390
OK, so that's consultant error.

172
00:10:54,420 --> 00:10:59,970
That's pretty much all I have for console, log and console Warren and console that error.

173
00:11:00,540 --> 00:11:04,860
If you have any other questions on this, just let me know and I'll make another video on it.

174
00:11:05,070 --> 00:11:05,490
Thank you.
