1
00:00:00,820 --> 00:00:06,640
All right, so in this example, challenge 17, you could see here we have an objective that says can't

2
00:00:06,640 --> 00:00:08,790
increment, please see if you can fix.

3
00:00:09,370 --> 00:00:15,370
So going over to the code sandbox, you could see here as we click on increment or decrement, we get

4
00:00:15,370 --> 00:00:15,760
an error.

5
00:00:16,510 --> 00:00:20,150
And this says actions may not have an undefined type property.

6
00:00:20,200 --> 00:00:21,470
Have you misspelled a constant?

7
00:00:21,880 --> 00:00:22,800
So this is our error.

8
00:00:23,470 --> 00:00:28,960
The intention with this obviously is to not have an error and to increment or decrement a number that

9
00:00:28,960 --> 00:00:30,400
we could just assume.

10
00:00:30,400 --> 00:00:32,140
That's what happens when we click these buttons.

11
00:00:32,140 --> 00:00:35,200
Obviously, we're new to this app, so we're not entirely sure of that.

12
00:00:35,200 --> 00:00:39,810
But we can continue looking at the app to see what the intended behavior is.

13
00:00:40,180 --> 00:00:42,590
So as we increments, we get this error right.

14
00:00:42,610 --> 00:00:47,920
And this is also evident here in the the problems section.

15
00:00:47,950 --> 00:00:53,890
Now, if we go to if we open this up in a new window to see what happens in a regular console.

16
00:00:55,110 --> 00:01:03,330
We should go out of responsive mode, OK, so we go over here and if we click, let's actually pin this

17
00:01:03,330 --> 00:01:05,010
now to the bottom.

18
00:01:06,970 --> 00:01:14,350
So as we increment get this, so here we go, code sandbox, not the best for getting actual stock traces,

19
00:01:14,350 --> 00:01:14,710
right?

20
00:01:14,740 --> 00:01:19,640
So you always want to in these challenges, you always want to open up in a new window.

21
00:01:19,900 --> 00:01:23,460
So here you could see we have the error here.

22
00:01:23,470 --> 00:01:28,200
So now in a real app or circumstance like this, you'd want to actually go into this.

23
00:01:28,210 --> 00:01:33,760
So we're going to say we could see here we have the uncaught error actions, may not have an undefined

24
00:01:33,760 --> 00:01:34,530
type property.

25
00:01:35,050 --> 00:01:37,690
It seems to have been duplicated twice.

26
00:01:38,050 --> 00:01:40,840
And as you could see here, we have a little bit of a stack trace.

27
00:01:40,840 --> 00:01:41,060
Right.

28
00:01:41,080 --> 00:01:48,220
So if we click on the either one of these so it's click on this is click the source, map one and then

29
00:01:48,220 --> 00:01:51,550
create store is the minified version.

30
00:01:51,550 --> 00:01:53,440
And here's our first clue.

31
00:01:53,890 --> 00:01:56,830
First clue is that this is occurring inside of Redox.

32
00:01:57,040 --> 00:01:59,830
So retargeted creates store.

33
00:02:00,100 --> 00:02:03,820
You are getting this error and you can see here they throw that error in the library.

34
00:02:04,030 --> 00:02:06,610
They say actions may not have an undefined type property.

35
00:02:07,150 --> 00:02:10,710
And so then now you could actually debug Redox here, right?

36
00:02:10,750 --> 00:02:16,360
You can actually look in here and say, oh, type of action is undefined.

37
00:02:16,840 --> 00:02:18,550
So that should be your first clue.

38
00:02:18,610 --> 00:02:20,140
Maybe you've never heard of Redox before.

39
00:02:20,140 --> 00:02:22,330
You don't know what's going on in Redox.

40
00:02:22,330 --> 00:02:23,530
You don't know what Redox is.

41
00:02:23,950 --> 00:02:30,280
But as an experienced developer looking at Redhawks for the first time, this error, you'd still be

42
00:02:30,280 --> 00:02:30,910
able to know.

43
00:02:30,920 --> 00:02:36,940
Well, I know that the actions undefined because I'm literally, you know, this error when it's read

44
00:02:36,940 --> 00:02:41,170
like this, that's the actual code that was run to trigger that source.

45
00:02:41,170 --> 00:02:41,320
Right.

46
00:02:41,320 --> 00:02:46,810
When you click, you get the read underlined error and you can also highlighted at the end.

47
00:02:47,170 --> 00:02:48,580
So let's try again.

48
00:02:48,580 --> 00:02:54,220
If I go here, create store, let's try again this one page that Jass Sonera in my code.

49
00:02:54,220 --> 00:02:59,770
Right, because we have the source map with page that when you see a source map usually means it's your

50
00:02:59,770 --> 00:03:05,860
code because usually other libraries aren't shiping with the source maps, so.

51
00:03:06,780 --> 00:03:13,290
As you could see, we have this code here, so we have increment action and we have decrease action

52
00:03:13,890 --> 00:03:20,160
and if we go back to the source code, we can get the exact so we have increment action on increment

53
00:03:20,160 --> 00:03:20,550
action.

54
00:03:20,550 --> 00:03:20,790
Right.

55
00:03:20,800 --> 00:03:23,530
So we saw here at increment action.

56
00:03:23,550 --> 00:03:29,530
So at this function call, this code was breaking and triggering this error.

57
00:03:29,850 --> 00:03:37,070
So if we go here at the time of this, the increment action, which is here, import from actions.

58
00:03:37,350 --> 00:03:40,340
So at this time it was causing that error.

59
00:03:40,350 --> 00:03:42,660
Why why was this happening at this hour?

60
00:03:43,020 --> 00:03:44,910
Well, this was our code.

61
00:03:44,910 --> 00:03:46,800
We triggered this call to dispatch.

62
00:03:46,800 --> 00:03:47,130
Right?

63
00:03:47,430 --> 00:03:55,200
So our code was run here, increment action, which then was passed in to dispatch, which then triggered

64
00:03:55,200 --> 00:03:55,620
the error.

65
00:03:55,620 --> 00:03:55,980
Right.

66
00:03:55,980 --> 00:03:58,620
Because if we go here, we see the error is in dispatch.

67
00:03:59,160 --> 00:04:04,980
So just so happens, redux provide some commenting in their code here.

68
00:04:05,370 --> 00:04:09,200
So dispatch is the action is the only way to trigger a state change.

69
00:04:09,630 --> 00:04:15,120
So maybe you know a little bit about Redox that it's a state management library you could see here.

70
00:04:15,120 --> 00:04:17,790
Well, this is the only way to trigger state changes by dispatch.

71
00:04:18,090 --> 00:04:21,600
You just learned a little bit about Redox by reading into the source code.

72
00:04:22,050 --> 00:04:26,640
The reducer function used to create the store will be called with the current state tree.

73
00:04:26,640 --> 00:04:33,810
And given the action, the SOS return value will be considered the next state of the tree and the change

74
00:04:33,810 --> 00:04:35,250
listeners will be notified.

75
00:04:35,760 --> 00:04:37,800
So we don't even have to go to redox documentation.

76
00:04:37,810 --> 00:04:41,220
We could just keep reading this awesome comment above this function, right?

77
00:04:41,820 --> 00:04:47,000
The base implementation only supports plain object actions if you want to dispatch a promise.

78
00:04:47,010 --> 00:04:48,780
OK, so plain object.

79
00:04:48,780 --> 00:04:49,080
Right?

80
00:04:49,470 --> 00:04:54,630
So that's giving us a clue that we need to check to make sure we're actually doing a plain object for

81
00:04:54,630 --> 00:04:55,290
our dispatch.

82
00:04:55,290 --> 00:04:55,530
Right.

83
00:04:55,830 --> 00:04:56,760
This is the action.

84
00:04:56,760 --> 00:05:00,510
So doing one argument is functions the action and here we go.

85
00:05:00,510 --> 00:05:03,240
You see a plain object representing what changed.

86
00:05:03,480 --> 00:05:08,490
It is a good idea to keep action serializable so you can record and display the actions.

87
00:05:09,840 --> 00:05:14,220
Time traveling and action must have a tight property which may not be undefined.

88
00:05:14,460 --> 00:05:18,150
It is a good idea to use string constants for action types.

89
00:05:18,660 --> 00:05:19,170
OK.

90
00:05:20,390 --> 00:05:26,630
So I think we figured out what's going on, Redox passes in in action to to dispatch, which determines

91
00:05:26,630 --> 00:05:27,290
the next date.

92
00:05:27,740 --> 00:05:29,360
The action type is undefined.

93
00:05:29,630 --> 00:05:35,180
And we we know that because we're triggering this error and we have documentation telling us we need

94
00:05:35,180 --> 00:05:36,710
to have the type property.

95
00:05:37,160 --> 00:05:41,150
So let's go back into our code and check on how things are working in our app.

96
00:05:41,450 --> 00:05:46,930
If we go here to the increment action, which is imported from the actions library, you can see here

97
00:05:46,940 --> 00:05:50,450
we have two functions, one called increment and one called decrease.

98
00:05:50,840 --> 00:05:53,060
And the increment is what we were trying to do.

99
00:05:53,450 --> 00:06:01,370
And as you can see here, this is a function that we import in the where were we again?

100
00:06:01,370 --> 00:06:05,480
Pages where we import that action and then we call that action.

101
00:06:05,480 --> 00:06:07,910
We we actually call it now.

102
00:06:08,420 --> 00:06:10,010
Why do we why do we need this?

103
00:06:10,010 --> 00:06:13,430
If we are just going to return something, why can't we just use that here?

104
00:06:13,880 --> 00:06:20,570
Well, this is best practice for redux so we can look at redux examples shortly to confirm that.

105
00:06:20,570 --> 00:06:24,800
But basically, sometimes you want to put in like let's say you want to update a person or you want

106
00:06:24,800 --> 00:06:31,010
to edit someone's name on the server or throughout your app you would pass in that name here.

107
00:06:31,010 --> 00:06:34,360
So you pass in some options in here and then generate that action that way.

108
00:06:34,550 --> 00:06:37,190
So we call this function and we return in action.

109
00:06:37,190 --> 00:06:37,430
Right.

110
00:06:37,700 --> 00:06:39,650
This value here, it must be in action.

111
00:06:39,950 --> 00:06:44,780
So if we go back to our actions so like I said, normally or sometimes, you know, if we want dynamic

112
00:06:44,780 --> 00:06:46,190
behavior, you could pass that in here.

113
00:06:46,490 --> 00:06:49,160
But here you could see we don't have a type property.

114
00:06:49,160 --> 00:06:49,460
Right.

115
00:06:50,090 --> 00:06:53,540
So we're returning just basically the key as increment.

116
00:06:54,200 --> 00:06:57,620
And that's basically an increment is from action types.

117
00:06:57,920 --> 00:06:59,320
So increment is just a string.

118
00:06:59,660 --> 00:07:05,330
So we're basically saying we're basically putting in a word that looks like this increment and then

119
00:07:05,570 --> 00:07:07,630
the action types is actually this word.

120
00:07:07,640 --> 00:07:13,610
So what we ended up doing was we ended up just saying this, increment this, and that's what Redock

121
00:07:13,610 --> 00:07:14,000
saw.

122
00:07:14,180 --> 00:07:16,480
And Redock said, hey, we don't have a type property in here.

123
00:07:17,030 --> 00:07:22,370
So what the solution to do, we would need to just say, well, so you might be asking, like, what

124
00:07:22,370 --> 00:07:23,270
is a type rate?

125
00:07:23,270 --> 00:07:25,270
Why do I why do I need a type?

126
00:07:25,280 --> 00:07:26,210
And that's your next question.

127
00:07:26,210 --> 00:07:26,390
Right.

128
00:07:26,420 --> 00:07:33,350
So if we go back into Redox now, we want to do some Googling, so say redox documentation, and we

129
00:07:33,350 --> 00:07:38,170
can even say redox action documentation and we'll get redox actions here.

130
00:07:38,480 --> 00:07:44,170
And as you can see here, the type is a constant which Redhawks recommends and then it's a string.

131
00:07:44,420 --> 00:07:51,700
So with that, you could see here, here's our are expected action schema or a type of you know what?

132
00:07:51,770 --> 00:07:53,720
This is what we would expect to see in action.

133
00:07:53,780 --> 00:07:53,970
Right.

134
00:07:54,410 --> 00:07:56,160
So really, the.

135
00:07:56,750 --> 00:07:57,440
So let's see.

136
00:07:57,440 --> 00:08:00,980
You might think, well, do I need Texte or do I need anything any other properties?

137
00:08:01,340 --> 00:08:06,890
Well, it says they must have a Thai property, and that's basically it.

138
00:08:06,890 --> 00:08:07,140
Right.

139
00:08:07,160 --> 00:08:10,240
Other than type, the structure of the action is up to you.

140
00:08:10,670 --> 00:08:14,000
So that is basically it.

141
00:08:14,030 --> 00:08:15,630
So the structure is up to you.

142
00:08:15,650 --> 00:08:21,560
So if we don't need any other thing here, which if you think about it, what do we need to increment?

143
00:08:21,570 --> 00:08:24,770
We just need an action that says increment right.

144
00:08:24,770 --> 00:08:29,020
We don't need to care about the current value or do we write?

145
00:08:29,030 --> 00:08:31,900
So this is more diving in a more redox.

146
00:08:31,910 --> 00:08:34,010
I'll just solve this for us right now.

147
00:08:34,310 --> 00:08:40,430
We need to just put the type key in here and then now you could see we can correctly increment and decrement

148
00:08:40,910 --> 00:08:42,410
or decrease, so.

149
00:08:43,540 --> 00:08:49,780
As you can see, we use this to just tell Redox like this is the next state or this is the next, does

150
00:08:49,780 --> 00:08:54,130
the action I want to do, we're not going to say this is the next state where we're just going to say

151
00:08:54,430 --> 00:08:56,260
I triggered a user input action.

152
00:08:56,470 --> 00:08:57,910
All I did was click increment.

153
00:08:58,150 --> 00:09:02,710
And then in your reducer, this is where you actually handle that action type.

154
00:09:03,160 --> 00:09:04,950
So you'd say action type.

155
00:09:04,960 --> 00:09:10,000
And this is why we need action type, because we need to switch, you know, between the different action

156
00:09:10,000 --> 00:09:12,310
types so we could do different things right here.

157
00:09:12,310 --> 00:09:17,920
We spread over the state and then we use the value to increment or decrement that value.

158
00:09:18,370 --> 00:09:20,680
We return that state to our app.

159
00:09:21,080 --> 00:09:26,230
So previously, you know, it wouldn't work until you actually had that action type because you could

160
00:09:26,230 --> 00:09:28,140
just you just be returning state, right.

161
00:09:28,390 --> 00:09:33,910
So if Redox didn't throw that error, you would have to debug this and say, well, which action type

162
00:09:33,910 --> 00:09:34,690
do I want to do?

163
00:09:34,690 --> 00:09:35,890
I want to do this action type.

164
00:09:36,130 --> 00:09:38,240
Therefore, my action type needs to be increment.

165
00:09:38,560 --> 00:09:43,480
Now, if you want to use other things, like let's say you want to increment by five or something,

166
00:09:43,480 --> 00:09:45,220
you could increment by a certain amount.

167
00:09:45,220 --> 00:09:45,460
Right.

168
00:09:45,460 --> 00:09:49,390
You could be like, you know, increment and then amount five.

169
00:09:49,390 --> 00:09:50,920
Let's say you're passing through your app.

170
00:09:50,920 --> 00:09:52,810
You could determine how much you want to increment by.

171
00:09:52,990 --> 00:09:53,290
Right.

172
00:09:53,290 --> 00:09:54,190
Be like amount.

173
00:09:54,520 --> 00:09:57,460
And then, you know, you would pass that in here.

174
00:09:57,460 --> 00:10:00,880
And then in your app, you would you would control that with like an input or something.

175
00:10:01,120 --> 00:10:06,630
And then in here you could say state that value plus action dollar amount.

176
00:10:06,880 --> 00:10:08,920
So you're just adding that onto that structure.

177
00:10:08,920 --> 00:10:10,720
And then as you could see now I'm adding by five.

178
00:10:11,080 --> 00:10:12,760
So you're adding on to that action.

179
00:10:12,760 --> 00:10:14,170
It's just a generic object.

180
00:10:14,400 --> 00:10:19,540
This is why people are confused about Redox, because it's using simple JavaScript, but it's very opinionated.

181
00:10:19,750 --> 00:10:22,950
It's like a action type is a specific thing.

182
00:10:23,470 --> 00:10:26,170
Now, you could do lowercase letters here.

183
00:10:26,380 --> 00:10:30,610
You could you could not follow their best practices and just do this.

184
00:10:30,610 --> 00:10:36,370
You could just, you know, do type increment in here to be the same thing.

185
00:10:36,880 --> 00:10:39,430
But anyway, so that's just how this works.

186
00:10:39,670 --> 00:10:44,590
This is just the example of just some basic redox, a very simple Redhawks example.

187
00:10:44,890 --> 00:10:48,610
And you troubleshoot to learn all about redox actions.

188
00:10:49,060 --> 00:10:54,310
And you learned how Redox works as a first time redux beginner.

189
00:10:54,580 --> 00:10:58,360
You learn how Redox handles state transitions with actions.

190
00:10:58,750 --> 00:11:00,790
Now, of course, you didn't learn all about Redox, right?

191
00:11:00,790 --> 00:11:06,970
You didn't learn about the store or the reducers in depth, but you were able to troubleshoot that issue

192
00:11:07,210 --> 00:11:09,220
without knowing anything about Redox.

193
00:11:09,220 --> 00:11:12,730
You were able to go in there and fix that issue.

194
00:11:12,730 --> 00:11:14,560
So that's this lecture.
