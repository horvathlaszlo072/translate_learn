1
00:00:00,880 --> 00:00:06,280
All right, challenge nine, so in this example, as you can see, we have the objective up here that

2
00:00:06,280 --> 00:00:10,780
says can't remove a child from parent and it says, please see if you can fix.

3
00:00:11,200 --> 00:00:16,350
So we're going to go ahead and just open that sandbox down here and you should see this.

4
00:00:16,930 --> 00:00:19,420
So as you could see here on the right, we look at this app.

5
00:00:19,420 --> 00:00:23,400
We have our parent and then we have some children and these look like buttons.

6
00:00:23,680 --> 00:00:28,210
So the objective here says we can't remove a child from parent.

7
00:00:28,510 --> 00:00:33,250
So first thing we're going to try and do is follow the instructions on this button that says click to

8
00:00:33,250 --> 00:00:33,760
remove.

9
00:00:34,120 --> 00:00:36,700
We're clicking on the button and nothing is happening.

10
00:00:36,860 --> 00:00:42,160
So if we head on over to our strategy guide, you will see we followed the first thing here.

11
00:00:42,160 --> 00:00:43,360
We confirmed the bug.

12
00:00:43,360 --> 00:00:47,650
And now we are just gathering some clues to see if there are errors in the console.

13
00:00:47,660 --> 00:00:49,750
So if we go down here, we'll see.

14
00:00:50,020 --> 00:00:53,520
OK, we have a warning that says each child should have a unique Kiprop.

15
00:00:53,530 --> 00:00:55,570
So that's something we should definitely look into.

16
00:00:55,990 --> 00:00:59,890
But that doesn't seem related or, you know, to our issue.

17
00:00:59,890 --> 00:01:00,130
Right.

18
00:01:00,130 --> 00:01:01,930
So we don't have an error in here.

19
00:01:01,930 --> 00:01:02,790
This is just a warning.

20
00:01:03,130 --> 00:01:07,780
So as far as errors go, if we click, we see no error.

21
00:01:07,780 --> 00:01:11,220
So we can just kind of cross that out so we don't have errors.

22
00:01:11,350 --> 00:01:16,960
So since we have no error over here, we're going to go and try and inspect some dumb elements and search

23
00:01:16,960 --> 00:01:18,510
for suspected components.

24
00:01:18,940 --> 00:01:22,090
So luckily, this is a very simple component.

25
00:01:22,090 --> 00:01:27,250
As you could see here, we are not importing any other external components into this app.

26
00:01:27,250 --> 00:01:30,010
And so that means that all of our codes are going to be right here.

27
00:01:30,400 --> 00:01:33,910
And if we just browse this, we could see we have a child here.

28
00:01:35,200 --> 00:01:41,740
And as you could see, we have a clip handler, so that's the next thing to do usually is when you're

29
00:01:42,250 --> 00:01:46,360
trying to troubleshoot an issue that isn't really defined that well.

30
00:01:46,360 --> 00:01:46,550
Right.

31
00:01:46,580 --> 00:01:49,840
Like we don't have an arrow pointing us to a specific stack trace.

32
00:01:50,200 --> 00:01:55,030
You're going to want to find the code that actually is related to that issue.

33
00:01:55,030 --> 00:01:55,240
Right.

34
00:01:55,240 --> 00:01:59,010
So we're clicking and that's an issue related to clicking.

35
00:01:59,230 --> 00:02:00,700
So we're going to look for that component.

36
00:02:00,700 --> 00:02:01,690
We've already found it.

37
00:02:01,700 --> 00:02:06,850
You could also inspect with the react dev tools and try and find the component that way if it's more

38
00:02:06,850 --> 00:02:07,390
difficult.

39
00:02:07,930 --> 00:02:13,600
And so, OK, so what we're going to do now is we're just going to copy this link over here just so

40
00:02:13,600 --> 00:02:17,860
we have a more direct way of interacting with this app as if it were a real app.

41
00:02:18,130 --> 00:02:21,760
And if we were going to we were to go down here and open up the dev tools.

42
00:02:21,760 --> 00:02:24,330
You could see here we have that warning, that same warning.

43
00:02:24,340 --> 00:02:31,540
So this is the code sandbox console, not the same exact thing as the real Chrome Developer Tools console.

44
00:02:31,540 --> 00:02:33,450
So we're just going to keep moving along now.

45
00:02:33,460 --> 00:02:36,490
So first thing, as I said before, we're going to try and find that code.

46
00:02:36,490 --> 00:02:43,620
So probably quickest way to do that is to just look at the react components tab here to find that child.

47
00:02:43,870 --> 00:02:49,170
So just finding any child and looking for here the view source for that element.

48
00:02:49,210 --> 00:02:51,070
So right here you could see this.

49
00:02:51,370 --> 00:02:54,910
So it's going to click on that and that's going to show us where the child is.

50
00:02:55,330 --> 00:02:57,570
Now, as you could see here, we have that click handler.

51
00:02:57,580 --> 00:03:01,210
And so what we're going to do here is check the click function.

52
00:03:01,210 --> 00:03:02,690
So this is removed, right?

53
00:03:02,710 --> 00:03:09,340
So if we go and we find where a remove is and so we could just search for remove.

54
00:03:12,490 --> 00:03:21,850
And as you could see, there is no remove here, so as you could see, the remove is a function passed

55
00:03:21,850 --> 00:03:22,660
into the child.

56
00:03:22,660 --> 00:03:25,020
So a prop here, right.

57
00:03:25,030 --> 00:03:29,100
So the child is rendered up here and it's passed in a prop that is removed child.

58
00:03:29,470 --> 00:03:31,830
And so this is the actual function that gets called.

59
00:03:31,960 --> 00:03:34,410
So we're going to go ahead and put a break point there.

60
00:03:34,420 --> 00:03:40,260
So this if this doesn't work, you can refresh breakpoints, aren't working for me right now.

61
00:03:40,270 --> 00:03:42,520
So if I refresh now, it's working.

62
00:03:42,730 --> 00:03:49,590
I can put the breakpoint here and now when I click, I can actually get into the scope of this function.

63
00:03:49,840 --> 00:03:56,950
So as you can see here, we have just a function argument here that's removed I.D. So as you can see

64
00:03:56,950 --> 00:03:57,760
here, this code.

65
00:03:57,760 --> 00:03:59,830
So I'm not trying to analyze what's going on here.

66
00:03:59,830 --> 00:04:05,620
First, as you could see, we have react hooks up here initializing with an array which looks right.

67
00:04:05,620 --> 00:04:09,000
And then we have children, which is the array, and then we have set children.

68
00:04:09,310 --> 00:04:12,790
So the code here is looping over the children.

69
00:04:12,790 --> 00:04:13,210
Right.

70
00:04:13,210 --> 00:04:20,860
And it's looping over the children here with this map function, rendering a child and the set children

71
00:04:20,860 --> 00:04:21,340
function.

72
00:04:21,340 --> 00:04:24,130
Here is what is supposed to set the new array.

73
00:04:24,130 --> 00:04:24,460
Right.

74
00:04:24,460 --> 00:04:27,160
And what we want to do is want to remove that child.

75
00:04:27,160 --> 00:04:27,360
Right.

76
00:04:27,460 --> 00:04:28,650
Trying to get rid of one of these.

77
00:04:29,050 --> 00:04:33,840
So you would expect the array that's being passed in here to have one less element.

78
00:04:34,150 --> 00:04:38,770
So this new array here is being created by this filter function.

79
00:04:39,070 --> 00:04:43,630
And you could determine that is if, you know, function by Googling this filter function, which is

80
00:04:43,630 --> 00:04:45,520
a regular array function.

81
00:04:45,910 --> 00:04:50,790
So we won't do that, just a basic JavaScript array function on the array.

82
00:04:50,800 --> 00:04:58,930
And so what that does is it passes in a callback and this callback is filtering based on this comparison,

83
00:04:58,930 --> 00:05:05,050
which is returned from the callback, which is if true, the component remains in the array.

84
00:05:05,050 --> 00:05:07,460
If false, it is removed from the array.

85
00:05:07,750 --> 00:05:10,900
So this expression here must be false.

86
00:05:10,900 --> 00:05:11,230
Right.

87
00:05:11,410 --> 00:05:15,820
And what this is referring to is this ID and the removed ID.

88
00:05:15,820 --> 00:05:19,060
The ID is the local ID in this callback.

89
00:05:19,060 --> 00:05:20,590
So it it loops over the children.

90
00:05:20,950 --> 00:05:24,160
As you could see here, the IDs of the children are the values.

91
00:05:24,160 --> 00:05:24,370
Right.

92
00:05:24,380 --> 00:05:30,610
So just matching up the variables now the ID is then compared to the removed ID.

93
00:05:30,850 --> 00:05:37,090
So I would have to figure all of that out by myself before I even understand this bug.

94
00:05:37,090 --> 00:05:37,360
Right.

95
00:05:37,360 --> 00:05:39,900
Because I just did that investigation here for you.

96
00:05:40,210 --> 00:05:45,820
And now we understand how the filtering is supposed to work, how the children are actually supposed

97
00:05:45,820 --> 00:05:46,410
to be removed.

98
00:05:46,810 --> 00:05:49,240
Now let's actually debug what's going wrong.

99
00:05:49,240 --> 00:05:54,130
So if I hover over this, I see this is a class removed ID now.

100
00:05:54,130 --> 00:05:55,300
I'm not expecting a class here.

101
00:05:55,300 --> 00:05:56,320
I'm expecting a number.

102
00:05:56,320 --> 00:05:56,640
Right.

103
00:05:56,950 --> 00:05:58,700
So why is this a class?

104
00:05:58,750 --> 00:06:04,720
Well, in the removed method here, you could see I just pass on this function, I just pass on the

105
00:06:04,720 --> 00:06:05,410
function again.

106
00:06:05,650 --> 00:06:08,650
So this is it looks like the native kallick handler.

107
00:06:08,680 --> 00:06:11,560
This is the, you know, the standard click and learn, react.

108
00:06:12,100 --> 00:06:15,550
We're not passing in any ID or we're not recreating any methods.

109
00:06:15,550 --> 00:06:17,650
We're just passing in that same method.

110
00:06:17,650 --> 00:06:22,420
So what does the unclick signature on Kallick method in react?

111
00:06:22,420 --> 00:06:23,860
You would just kind of Google that.

112
00:06:24,220 --> 00:06:25,090
This is probably simple.

113
00:06:25,090 --> 00:06:30,250
You probably already are aware of this, but just sometimes it's good to refresh on pretty simple things.

114
00:06:30,250 --> 00:06:30,490
Right?

115
00:06:30,490 --> 00:06:37,570
So we so we just found this react class here, this react here for handling events.

116
00:06:37,810 --> 00:06:40,120
So you can see here this is an event.

117
00:06:40,120 --> 00:06:40,420
Right?

118
00:06:40,420 --> 00:06:42,790
So it's it's an event that's being passed in.

119
00:06:42,790 --> 00:06:46,090
So this class here, you could see it's a synthetic event.

120
00:06:46,780 --> 00:06:48,670
So how did I figure that out?

121
00:06:48,670 --> 00:06:53,760
Because this is the same callback I'm just passing in this function, a matching with the the you know,

122
00:06:53,900 --> 00:06:56,770
the same the standard click handler for this.

123
00:06:57,010 --> 00:07:00,670
It's always going to be this is you define this variable if you don't know.

124
00:07:00,670 --> 00:07:04,870
So you define this prop here and it's a synthetic event.

125
00:07:05,200 --> 00:07:07,780
So at the end of the day, what are we trying to do?

126
00:07:07,780 --> 00:07:09,340
We're trying to get the ID of the child.

127
00:07:09,340 --> 00:07:09,610
Right.

128
00:07:09,850 --> 00:07:13,240
So how do you get the idea of a child from a synthetic event?

129
00:07:13,630 --> 00:07:18,310
So if you go down here, we see our child is actually passing in that ID.

130
00:07:18,670 --> 00:07:21,310
And so here is the idea of the child.

131
00:07:21,310 --> 00:07:30,850
So if I want to do another complex Google search for how to get ID from synthetic events.

132
00:07:32,160 --> 00:07:32,670
So.

133
00:07:34,240 --> 00:07:40,660
This is the first kind of thing that comes up from that I'm looking here and so as you could see here.

134
00:07:42,570 --> 00:07:49,050
This person is trying to do this, and you can see here, this person tries this event target get attribute

135
00:07:49,050 --> 00:07:53,370
ID and so there's another person there.

136
00:07:53,370 --> 00:07:56,400
So, you know, you can see people are just responding to this.

137
00:07:57,010 --> 00:07:57,980
Let's keep going.

138
00:07:57,990 --> 00:08:04,020
And as you can see here, so this is the type of thing where you're going to try to investigate this,

139
00:08:04,370 --> 00:08:06,240
the the signature of that.

140
00:08:06,240 --> 00:08:06,510
Right.

141
00:08:06,780 --> 00:08:09,810
So so there's a couple solutions to this.

142
00:08:09,810 --> 00:08:11,730
Like I said, you could just do that.

143
00:08:11,760 --> 00:08:19,320
Let's so as we're in here, we're in this thing, this removed I.D. is actually the event handler.

144
00:08:19,320 --> 00:08:21,030
So that would be so.

145
00:08:21,030 --> 00:08:25,280
But we're just going to so we could do first is actually change this to be.

146
00:08:26,710 --> 00:08:28,910
And then we'll just put this here now as E!

147
00:08:29,140 --> 00:08:34,420
All right, so just renaming that variable to be easy and I put my break point back there and I just

148
00:08:34,420 --> 00:08:36,870
refresh or I just click on one of these children again.

149
00:08:36,880 --> 00:08:43,990
Now I have the E, so if I go into my console, I can now just test certain very I could just test certain

150
00:08:43,990 --> 00:08:44,710
variables.

151
00:08:44,710 --> 00:08:44,950
Right.

152
00:08:44,950 --> 00:08:49,090
So I could say idot value or I could say idot target.

153
00:08:49,690 --> 00:08:52,990
And I think that one person said idot target get attribute.

154
00:08:53,000 --> 00:08:53,220
Right.

155
00:08:53,260 --> 00:08:57,580
Supposedly if I'd say this and then I find the ID I get no.

156
00:08:57,580 --> 00:08:59,080
So Iida target.

157
00:08:59,080 --> 00:08:59,890
Let's look at that.

158
00:08:59,890 --> 00:09:00,840
So that's a button.

159
00:09:01,240 --> 00:09:03,460
So, so the Iida target.

160
00:09:03,460 --> 00:09:04,990
This is the button that I clicked on.

161
00:09:04,990 --> 00:09:05,230
Right.

162
00:09:05,230 --> 00:09:07,390
But this is not the react child.

163
00:09:07,390 --> 00:09:11,080
This is not the actual child ID.

164
00:09:11,080 --> 00:09:11,380
Right.

165
00:09:11,380 --> 00:09:14,500
So the button down here is where the ideas.

166
00:09:14,500 --> 00:09:20,710
So it doesn't look like based on the target of the event that was clicked on, that I would be able

167
00:09:20,710 --> 00:09:22,320
to actually even get the ID.

168
00:09:22,720 --> 00:09:29,470
So that's your first clue that I can't resolve this without changing this callback, because with this

169
00:09:29,470 --> 00:09:32,320
callback, I don't have access to this child.

170
00:09:32,320 --> 00:09:32,620
Right.

171
00:09:32,740 --> 00:09:34,570
I don't have access to this ID.

172
00:09:34,870 --> 00:09:36,040
So what do I need to do?

173
00:09:36,040 --> 00:09:37,780
I need to create a new callback.

174
00:09:38,110 --> 00:09:39,590
And so I'm going to show you how to do that.

175
00:09:39,590 --> 00:09:46,000
So what you would do here is so first thing is we're going to actually pass in the ID here.

176
00:09:46,240 --> 00:09:48,370
We're going to leave this as it was.

177
00:09:48,640 --> 00:09:56,820
And so how it was before or if I just undo my changes, the what this was here is the removed ID, right.

178
00:09:57,160 --> 00:09:59,290
So we need to figure out how to pass a function in here.

179
00:09:59,290 --> 00:10:05,560
So this is actually simple enough as going in here, creating a new arrow function and then just saying

180
00:10:05,560 --> 00:10:08,430
remove child ID like this.

181
00:10:08,830 --> 00:10:15,550
So what this is doing is I'm creating a new function in here to call the remove child function here

182
00:10:15,790 --> 00:10:20,590
with the idea of the child or the idea of the children.

183
00:10:20,980 --> 00:10:26,200
So I am overriding the buttons standard event here, which is E right.

184
00:10:26,200 --> 00:10:29,740
So this is now the the new function passing in the event handler.

185
00:10:29,950 --> 00:10:31,900
But instead I'm just saying I don't care about this.

186
00:10:31,900 --> 00:10:32,860
I'm ignoring this.

187
00:10:33,130 --> 00:10:34,570
I don't care about the synthetic event.

188
00:10:34,570 --> 00:10:41,380
All I want to do is when you click on it, I want to remove this ID and this idea scoped to this map

189
00:10:41,380 --> 00:10:42,010
callback.

190
00:10:42,190 --> 00:10:45,700
And so this ID will always refer to that current child.

191
00:10:45,970 --> 00:10:48,400
So now if I save this.

192
00:10:49,960 --> 00:10:54,670
And I go back to my app or I just go over here, you could see I'm clicking and now they're being removed.

193
00:10:55,120 --> 00:11:01,060
So I could go back to my app once again and refresh and just confirm that the ID is actually being selected

194
00:11:01,060 --> 00:11:01,410
there.

195
00:11:03,280 --> 00:11:08,770
And as you could see, the removed I.D. is nine, it's correctly passed in from the child that I clicked

196
00:11:08,770 --> 00:11:08,980
on.

197
00:11:09,280 --> 00:11:10,990
So that's this challenge.
