1
00:00:00,960 --> 00:00:06,870
All right, and this one, we're going to talk about console time, so let's see here, I have wrapped

2
00:00:06,880 --> 00:00:09,600
this for loop here with console dot time.

3
00:00:09,960 --> 00:00:18,930
And this is used if you want to basically profile or get a timed increment value in milliseconds of

4
00:00:18,930 --> 00:00:20,900
how long that code took to execute.

5
00:00:21,270 --> 00:00:25,470
So to do that and this is pretty rough, as in you're doing this in your browser.

6
00:00:25,470 --> 00:00:32,280
So it's it's taking snapshots of the code at that certain time and then it's going to calculate the

7
00:00:32,280 --> 00:00:33,450
total amount of time.

8
00:00:33,460 --> 00:00:39,750
So that's not going to be the real time of execution because you're using this time the console.

9
00:00:39,750 --> 00:00:42,690
That time, it's just going to be a rough approximation.

10
00:00:42,690 --> 00:00:48,720
So and this will be different every time, which makes it not really a reliable thing to rely on.

11
00:00:48,990 --> 00:00:54,050
But if you if you assess, you know, a different part of your code.

12
00:00:54,060 --> 00:00:58,740
So if we add another one down here, you'll be able to get some relative complexity.

13
00:00:58,740 --> 00:01:02,850
So you could say, you know, it may not be able to say that this will always be 100 milliseconds.

14
00:01:03,180 --> 00:01:09,120
But what you will be able to do is if something else is consistently, consistently 10 times less than

15
00:01:09,120 --> 00:01:13,230
that, then you could say, well, this is ten times faster than this or this is, you know, so you

16
00:01:13,230 --> 00:01:14,760
can make those kind of assumptions.

17
00:01:14,760 --> 00:01:19,680
But you shouldn't really think too hard about this number that ends up coming out, because there's

18
00:01:19,680 --> 00:01:20,790
just so many factors.

19
00:01:21,060 --> 00:01:26,700
Your browser, your CPU and all that kind of stuff is going to really make this number not totally accurate.

20
00:01:27,060 --> 00:01:32,170
So anyway, how do you use it while you say console dot time and then you enter in a label?

21
00:01:32,190 --> 00:01:33,270
So this is my label.

22
00:01:33,270 --> 00:01:34,590
I'm calling it long runner.

23
00:01:34,890 --> 00:01:43,380
And then at the end I just say console dot time end with long runner as the name of that label of the

24
00:01:43,380 --> 00:01:47,790
profile that I want to time now, you could also, you know, add multiple ones.

25
00:01:47,790 --> 00:01:55,530
So if I want to just do something like this where I just say console time test and then I can, you

26
00:01:55,530 --> 00:01:59,130
know, go below that and just, you know, do a single variable or something.

27
00:01:59,130 --> 00:02:08,460
Konsta X equals four and then say console dot time and test that will do a second profile after that.

28
00:02:08,490 --> 00:02:12,830
So this is just to show you multiple times in the same thing.

29
00:02:12,840 --> 00:02:18,510
So if you want to you know, if you have a really complicated function or process in your app, you

30
00:02:18,510 --> 00:02:23,490
could sprinkle these cancelled time, you know, with numbers in front of them, be good.

31
00:02:23,790 --> 00:02:28,700
And by doing that, you'll get a sense of which parts of this app are taking the longest.

32
00:02:28,950 --> 00:02:30,780
So, you know, in this example.

33
00:02:30,780 --> 00:02:33,000
So you could just see here at the bottom, right.

34
00:02:33,480 --> 00:02:40,410
The long runner is one hundred and thirty six milliseconds and my little test is only two milliseconds.

35
00:02:40,770 --> 00:02:45,210
So if you were if this was like really complicated bunch of functions, you know, you could have some

36
00:02:45,210 --> 00:02:46,620
nested function calls in here.

37
00:02:47,190 --> 00:02:51,510
You have nested function calls in here and you're wrapping the code.

38
00:02:51,510 --> 00:02:55,520
So, you know, the code is going to get timed everything in between those two statements.

39
00:02:55,830 --> 00:03:01,920
So by doing this, we just assumed, OK, well, this is going to be two milliseconds over here and

40
00:03:01,920 --> 00:03:04,140
then this one is going to be one hundred and thirty milliseconds.

41
00:03:04,440 --> 00:03:08,180
So we're we're making that assumption, OK, this one is two milliseconds.

42
00:03:08,190 --> 00:03:12,630
That's really not a whole lot, but one hundred and thirty milliseconds, that's something we should

43
00:03:12,630 --> 00:03:13,150
look into.

44
00:03:13,530 --> 00:03:16,530
So that's just profiling in general with consultor time.
