1
00:00:00,940 --> 00:00:05,950
All right, so four, challenge 10, you could see that we have this issue here that says cannot fetch

2
00:00:05,950 --> 00:00:07,690
Cat, please see if you could fix.

3
00:00:08,110 --> 00:00:12,670
So for we continue this, we're going to open this up in the code sandbox up here.

4
00:00:13,090 --> 00:00:13,390
All right.

5
00:00:13,390 --> 00:00:18,430
So inside of the code sandbox here, I'm just going to just review the code here.

6
00:00:18,730 --> 00:00:23,580
So and as you could see here, we already have a syntax error on load of this.

7
00:00:23,590 --> 00:00:25,780
So we've already reproduced the issue.

8
00:00:25,780 --> 00:00:29,530
And as you can see, the the error is occurring in the console.

9
00:00:29,530 --> 00:00:31,120
And you could see it's a syntax error.

10
00:00:31,450 --> 00:00:35,500
So syntax error means there's sort of an issue with the code structure itself.

11
00:00:35,830 --> 00:00:38,070
And we'll review that now.

12
00:00:38,080 --> 00:00:43,210
So as you can see here, this is the error that's happening and it's happening on this line, which

13
00:00:43,210 --> 00:00:46,000
is line 19 inside of this function.

14
00:00:46,000 --> 00:00:49,740
And it says, can I use keyword a wait outside in async function?

15
00:00:50,230 --> 00:00:54,850
So there's two approaches that you could take here if you're not familiar with this error.

16
00:00:54,850 --> 00:01:00,490
First would be to just Google the error itself, and second would be to actually research the terminology

17
00:01:00,490 --> 00:01:01,860
inside of that error.

18
00:01:02,080 --> 00:01:09,220
So the first thing that we did, let's say we researched this, I found this GitHub issue when I searched

19
00:01:09,220 --> 00:01:13,570
for this error, which says cannot use keyword a wait outside and async function.

20
00:01:14,230 --> 00:01:19,960
And as you can see here, the there are just people talking about this issue.

21
00:01:19,960 --> 00:01:26,530
And as you can see here, someone at the end of the day, it's usually the end of the issue, somebody

22
00:01:26,530 --> 00:01:29,380
you're looking for a resolution or a summary of the issue.

23
00:01:29,380 --> 00:01:32,470
And this person says it's not about this library.

24
00:01:32,470 --> 00:01:34,870
So this is a library that this issue occurred in.

25
00:01:34,870 --> 00:01:40,510
And it says, I recommend you take a look on ESX async, await spec and promises.

26
00:01:41,290 --> 00:01:48,160
So as you could see here, this person is not familiar with this, you know, await async function terminology.

27
00:01:48,170 --> 00:01:50,880
And so that's how you could research this.

28
00:01:50,890 --> 00:01:58,240
And then if you research async functions, you'll get this doc from Mozilla, which would tell you all

29
00:01:58,240 --> 00:02:04,110
about async functions, which is basically just shorthand for promise based behavior.

30
00:02:04,120 --> 00:02:13,270
So instead of this functionality here for promises, you would or rather instead of resolving for promises

31
00:02:13,510 --> 00:02:21,130
or, you know, passing in callbacks for promises, you would instead call use the await an async function

32
00:02:21,250 --> 00:02:21,900
terminology.

33
00:02:22,210 --> 00:02:22,630
So.

34
00:02:23,570 --> 00:02:27,550
What this does is it pauses the code execution and waits for this promise to resolve.

35
00:02:27,920 --> 00:02:32,170
And so in our code base, we are doing that here.

36
00:02:32,600 --> 00:02:35,720
But as you can see here, we're not using the async function.

37
00:02:35,720 --> 00:02:39,170
So it requires an instance of an async function.

38
00:02:39,410 --> 00:02:45,840
So you need so the async, so you need the async keyword around the function.

39
00:02:45,860 --> 00:02:50,270
So basically you need to define async with the function like this.

40
00:02:50,930 --> 00:02:56,000
And as you can see here, there's this is the syntax, so does the actual spec for the syntax here.

41
00:02:56,180 --> 00:02:58,250
And as you can see, we have the async.

42
00:02:59,100 --> 00:03:04,820
Parameter before the function name, and then you have the name of an argument.

43
00:03:04,860 --> 00:03:06,410
So these are just regular function.

44
00:03:06,430 --> 00:03:12,390
So it's a regular function except that the return value must be resolved.

45
00:03:12,400 --> 00:03:18,390
So a promise which will be resolved with the value returned by the async function or rejected with an

46
00:03:18,390 --> 00:03:21,810
exception, thrown or uncaught within the async function.

47
00:03:22,680 --> 00:03:24,240
Let's keep reading the description.

48
00:03:24,240 --> 00:03:27,780
Async functions contain zero or more await expressions.

49
00:03:28,260 --> 00:03:33,930
So and like I was saying before, a great expression suspend progress through an async function.

50
00:03:34,860 --> 00:03:39,900
The resolved value of the promise is treated as a return value of the expression.

51
00:03:41,660 --> 00:03:47,150
So basically, we have an asynchronous callback, the code is going to wait for that actual promise

52
00:03:47,150 --> 00:03:49,420
to resolve and then it'll pass it in through here.

53
00:03:49,850 --> 00:03:54,020
So that's the general idea of asynchronous functions.

54
00:03:54,020 --> 00:03:55,690
The async await terminology.

55
00:03:55,940 --> 00:04:03,320
Now that we know that we we could see plenty of examples here where we are using the async keyword in

56
00:04:03,320 --> 00:04:04,280
front of the function.

57
00:04:04,580 --> 00:04:11,330
And you could read all about this year regarding, you know, more details about what exactly is going

58
00:04:11,330 --> 00:04:11,560
on.

59
00:04:11,810 --> 00:04:16,340
So as you could see here, this is returning the.

60
00:04:17,400 --> 00:04:25,110
The regular terminology of what you would do before async wait, so before async away, you would wait

61
00:04:25,110 --> 00:04:30,150
for it to resolve and then you would essentially then do your callback here.

62
00:04:30,420 --> 00:04:33,500
So instead of async went away, you would do this.

63
00:04:33,960 --> 00:04:39,210
And now we we can shorthand that to just wait within that function.

64
00:04:39,390 --> 00:04:45,720
So now that we know about async await functions, we can go ahead and type in the word async here in

65
00:04:45,720 --> 00:04:49,080
front of the arrow function to fix the the issue.

66
00:04:49,500 --> 00:04:54,960
So as you can see now, we are not getting that error anymore and we are getting a nice cat rendered

67
00:04:54,960 --> 00:04:56,250
here, so.

68
00:04:57,100 --> 00:05:01,640
As you could see, though, all is not well, we do have a problem.

69
00:05:02,140 --> 00:05:03,280
So what is a problem?

70
00:05:04,500 --> 00:05:11,670
This is a lente, so we actually are running Esslin in here and yes, it's sort of a helper that will

71
00:05:11,670 --> 00:05:13,970
help you write better code, writes Lintz.

72
00:05:13,980 --> 00:05:18,190
Your code points out problems that are in your code that won't necessarily cause issues, right?

73
00:05:18,220 --> 00:05:19,550
So it's absol functioning.

74
00:05:19,890 --> 00:05:21,700
This is not going to be a syntax error.

75
00:05:21,720 --> 00:05:25,850
This is just going to be a limiting problem that's going to sort of like you have prettier.

76
00:05:25,860 --> 00:05:27,000
It's like a file formatter.

77
00:05:27,540 --> 00:05:33,720
Lintang is sort of pointing out things that sort of a preprocessing tool that you'd use to write better

78
00:05:33,720 --> 00:05:34,070
code.

79
00:05:34,200 --> 00:05:40,320
So Esslin is telling us about this, which is if we read this and we can also read it by hovering over

80
00:05:40,320 --> 00:05:46,530
the error itself, affect callbacks are synchronous to prevent race conditions, put the async function

81
00:05:46,530 --> 00:05:49,420
inside the use effect handler like this.

82
00:05:50,040 --> 00:05:56,990
So if you got this far and you noticed this and you were able to fix this, that's extra bonus points.

83
00:05:57,240 --> 00:06:01,590
So this is basically saying that you can't pass in a async function in here.

84
00:06:01,590 --> 00:06:02,550
You're not supposed to do that.

85
00:06:02,850 --> 00:06:08,610
React can tell you that you're not supposed to do that, but they can't force you to stop doing that.

86
00:06:08,760 --> 00:06:14,820
So they can't you know, this is where reactance gets kind of hairy, where you actually need the react

87
00:06:14,820 --> 00:06:20,850
hooks glinting in here to actually help you write better code and to not encounter bugs with reactance.

88
00:06:21,360 --> 00:06:29,280
Other react hooks like, you know, other react lintang errors would be, you know, actually conditionally

89
00:06:29,280 --> 00:06:31,020
calling you state Hoke's.

90
00:06:31,260 --> 00:06:39,720
So like if you said, you know, if true and then you said const F set F equals use state.

91
00:06:40,710 --> 00:06:47,850
This would also throw an excellent error here because this is called conditionally.

92
00:06:48,060 --> 00:06:50,250
So you're not allowed to call you state conditionally.

93
00:06:50,460 --> 00:06:53,430
So to learn more about this, you really should.

94
00:06:53,760 --> 00:06:56,700
I'll point you to a resource shortly after this.

95
00:06:56,700 --> 00:07:00,170
But you should know that you know the rules of Hucks, right?

96
00:07:00,420 --> 00:07:02,640
It's just called Rules of road, rules of Hooke's.

97
00:07:03,390 --> 00:07:10,110
So if we search for rules of Hooke's comes up right here, here, all the list of hooks and excellent

98
00:07:10,110 --> 00:07:16,350
plug in that you should add to make sure that you're calling these hooks appropriately so they don't

99
00:07:16,350 --> 00:07:18,270
even have that async issue right here.

100
00:07:18,270 --> 00:07:22,830
But, you know, that's one of those things that you just are going to have to Google if you want to

101
00:07:22,830 --> 00:07:23,550
read more about it.

102
00:07:23,820 --> 00:07:24,270
So.

103
00:07:24,710 --> 00:07:25,830
So what was the fix?

104
00:07:25,830 --> 00:07:28,770
The fix was actually to just call that function here.

105
00:07:29,010 --> 00:07:35,850
So instead of actually putting that as the use effect took, you're just going to call that function

106
00:07:35,850 --> 00:07:36,440
inside of it.

107
00:07:36,660 --> 00:07:42,990
So if we do this so we just pass in a regular function like this and then we use our async function

108
00:07:42,990 --> 00:07:50,340
inside of this, but we call it something like async function, fetch cat, fetch cat async.

109
00:07:51,340 --> 00:07:55,930
Then we do this and then we call it like this.

110
00:07:59,220 --> 00:08:03,600
We are getting another syntax error, which is because we need to do this.

111
00:08:08,120 --> 00:08:10,160
We're going to get rid of this code as well.

112
00:08:12,690 --> 00:08:20,430
And then we make sure that we we refresh the page right here and we get that cat again and we have no

113
00:08:20,430 --> 00:08:23,070
issues, so great.

114
00:08:24,110 --> 00:08:29,210
If you are debugging this, you might try and debug or look more up information about this, the actual

115
00:08:29,540 --> 00:08:34,760
call, we didn't really talk about this at all, but this is just this thing that I found that returns

116
00:08:34,760 --> 00:08:36,980
a random cat and.

117
00:08:37,190 --> 00:08:38,060
Yeah, so that's it.

118
00:08:38,090 --> 00:08:39,290
So then what did we learn?

119
00:08:39,300 --> 00:08:44,720
We learned all about rules of react hooks and we learned about async and await functions.

120
00:08:44,720 --> 00:08:46,370
So cool.
