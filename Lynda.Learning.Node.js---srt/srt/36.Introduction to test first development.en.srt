1
00:00:01.01 --> 00:00:02.09
- [Narrator] In this video,
we'll add a new feature

2
00:00:02.09 --> 00:00:04.05
using test-driven development.

3
00:00:04.05 --> 00:00:07.06
So we'll add a test
first, we'll make it fail

4
00:00:07.06 --> 00:00:09.02
and then we'll implement the feature

5
00:00:09.02 --> 00:00:11.00
to make the test pass.

6
00:00:11.00 --> 00:00:14.05
The new feature we'll add
is a new messages get call,

7
00:00:14.05 --> 00:00:17.02
or endpoint that will allow
us to get the messages

8
00:00:17.02 --> 00:00:20.04
from a specific owner,
by checking the name.

9
00:00:20.04 --> 00:00:23.02
And we'll get that name
through a URL parameter.

10
00:00:23.02 --> 00:00:25.04
So let's begin by creating a test.

11
00:00:25.04 --> 00:00:38.04
We'll start running new describe.

12
00:00:38.04 --> 00:00:40.03
And these tests will revolve around

13
00:00:40.03 --> 00:00:45.03
getting messages from a specific user.

14
00:00:45.03 --> 00:00:47.01
The first test will be the standard,

15
00:00:47.01 --> 00:00:48.08
it should return a 200 okay,

16
00:00:48.08 --> 00:00:50.07
so I'll just copy this from above

17
00:00:50.07 --> 00:00:53.08
from line 10 through line 15

18
00:00:53.08 --> 00:00:55.07
and paste it in our new describe.

19
00:00:55.07 --> 00:00:57.03
Next, I'll need to supply a user name

20
00:00:57.03 --> 00:00:59.07
at the end of the Url

21
00:00:59.07 --> 00:01:01.04
and I'll just use Tim.

22
00:01:01.04 --> 00:01:04.00
Let's save that and give it a try.

23
00:01:04.00 --> 00:01:05.06
We'll use npm test.

24
00:01:05.06 --> 00:01:08.04
We can see there were
four specs that were run

25
00:01:08.04 --> 00:01:11.00
and one that failed.

26
00:01:11.00 --> 00:01:13.07
Our get messages from user
should return 200 okay

27
00:01:13.07 --> 00:01:16.03
and we got a 404, not found

28
00:01:16.03 --> 00:01:19.04
that we expected, to equal 200.

29
00:01:19.04 --> 00:01:21.06
And so that's good.

30
00:01:21.06 --> 00:01:22.08
The route doesn't exist yet

31
00:01:22.08 --> 00:01:24.04
and we should get 404's.

32
00:01:24.04 --> 00:01:27.02
So it is failing just like we expect.

33
00:01:27.02 --> 00:01:30.00
Now let's go ahead and make that pass.

34
00:01:30.00 --> 00:01:31.09
So let's go to our server js

35
00:01:31.09 --> 00:01:36.00
and copy our app.get messages function

36
00:01:36.00 --> 00:01:39.07
and paste it below.

37
00:01:39.07 --> 00:01:41.05
Then let's add a user parameter.

38
00:01:41.05 --> 00:01:43.08
Now that I've added the user parameter,

39
00:01:43.08 --> 00:01:45.03
that should be it.

40
00:01:45.03 --> 00:01:47.09
Let's try and see if our test passed.

41
00:01:47.09 --> 00:01:50.07
Now that we ran our test,
we can see it's passed.

42
00:01:50.07 --> 00:01:52.04
It did find the route

43
00:01:52.04 --> 00:01:54.06
and regardless of what
was sent to us back,

44
00:01:54.06 --> 00:01:56.08
our test passed.

45
00:01:56.08 --> 00:01:59.09
But we don't know if it
actually functions as expected

46
00:01:59.09 --> 00:02:02.02
because our full
requirement is that it only

47
00:02:02.02 --> 00:02:05.00
gives us messages of a specified user.

48
00:02:05.00 --> 00:02:10.02
So let's create another
specification for that.

49
00:02:10.02 --> 00:02:19.08
We'll check that the name should be Tim.

50
00:02:19.08 --> 00:02:21.05
And we'll copy the request call

51
00:02:21.05 --> 00:02:25.08
between line 26 and 29
and paste it inside.

52
00:02:25.08 --> 00:02:28.07
Then let's check the response.body.

53
00:02:28.07 --> 00:02:37.01
And as before, we'll need
to convert it to JSON.

54
00:02:37.01 --> 00:02:39.08
Then we'll get the first
element in our array

55
00:02:39.08 --> 00:02:43.01
and check the name,
and make sure that it's

56
00:02:43.01 --> 00:02:47.02
equal to Tim.

57
00:02:47.02 --> 00:02:49.00
We'll save that.

58
00:02:49.00 --> 00:02:52.03
And before we run it, think
of whether it will work

59
00:02:52.03 --> 00:02:56.01
or will fail, let's give it a try.

60
00:02:56.01 --> 00:02:57.08
And it's failed.

61
00:02:57.08 --> 00:02:59.06
That's because the
messages we currently have

62
00:02:59.06 --> 00:03:03.07
in our database aren't
guaranteed to be posted by Tim.

63
00:03:03.07 --> 00:03:05.08
Second of all, we don't
have the functionality yet

64
00:03:05.08 --> 00:03:08.09
in our server, to support
that specification.

65
00:03:08.09 --> 00:03:11.02
We're just returning all of the messages.

66
00:03:11.02 --> 00:03:13.03
Let's go ahead and
implement the functionality

67
00:03:13.03 --> 00:03:14.05
to make this pass.

68
00:03:14.05 --> 00:03:16.02
First thing we'll need to do

69
00:03:16.02 --> 00:03:20.07
is get access to that user parameter.

70
00:03:20.07 --> 00:03:22.00
So we'll create a variable, called User,

71
00:03:22.00 --> 00:03:28.07
set it to request.params.user.

72
00:03:28.07 --> 00:03:31.02
And then we'll select all of our messages

73
00:03:31.02 --> 00:03:37.01
if the name matches the user.

74
00:03:37.01 --> 00:03:38.07
Now once again, if we run this,

75
00:03:38.07 --> 00:03:45.06
think whether it will fail or pass.

76
00:03:45.06 --> 00:03:47.02
And it failed.

77
00:03:47.02 --> 00:03:50.06
And it cannot read
property name of undefined.

78
00:03:50.06 --> 00:03:52.01
Why is that?

79
00:03:52.01 --> 00:03:54.06
Since we're only getting back messages

80
00:03:54.06 --> 00:03:57.05
that the user Tim owns,

81
00:03:57.05 --> 00:04:00.05
we currently don't have
any messages by Tim

82
00:04:00.05 --> 00:04:03.04
and so we're getting
back nothing in our array

83
00:04:03.04 --> 00:04:04.08
and it's failing as a result.

84
00:04:04.08 --> 00:04:06.06
So at this point, let's go back to our app

85
00:04:06.06 --> 00:04:12.08
and post a new message by Tim.

86
00:04:12.08 --> 00:04:16.06
And now let's try running our test again.

87
00:04:16.06 --> 00:04:17.09
And it's passed.

88
00:04:17.09 --> 00:04:21.03
It's not ideal that we have
to actually set the state

89
00:04:21.03 --> 00:04:23.08
of our database in our server

90
00:04:23.08 --> 00:04:26.06
in order for our test to pass.

91
00:04:26.06 --> 00:04:28.06
The ideal thing would
be that our test suite

92
00:04:28.06 --> 00:04:31.05
sets up the server and the database

93
00:04:31.05 --> 00:04:34.06
just the way it should be
before the tests are run.

94
00:04:34.06 --> 00:04:36.06
And in more advanced testing,

95
00:04:36.06 --> 00:04:38.05
that's exactly what we would do.

96
00:04:38.05 --> 00:04:41.00
We'd have a before function that executes

97
00:04:41.00 --> 00:04:44.04
at the start of our test

98
00:04:44.04 --> 00:04:47.08
or test suites, that sets up the database

99
00:04:47.08 --> 00:04:51.06
with say, a message from Tim.

100
00:04:51.06 --> 00:04:54.08
The test then executes
and then an after function

101
00:04:54.08 --> 00:04:57.00
would execute and remove that message,

102
00:04:57.00 --> 00:05:00.05
therefore returning the
database back to a normal state.

103
00:05:00.05 --> 00:05:03.01
And those are some of the
important concepts of testing

104
00:05:03.01 --> 00:05:04.07
and test-driven development.

105
00:05:04.07 --> 00:05:07.03
At this point, we've developed a feature

106
00:05:07.03 --> 00:05:10.01
in our application by
writing tests for it first.

107
00:05:10.01 --> 00:05:19.01
Let's go to our browser and
try it out for ourselves.

108
00:05:19.01 --> 00:05:20.08
And we can see, it's working.

109
00:05:20.08 --> 00:05:24.01
And that's the basic process
of test-driven development.

110
00:05:24.01 --> 00:05:25.05
Next, let's take a look
at some of the things

111
00:05:25.05 --> 00:05:26.09
we've covered in this course

112
00:05:26.09 --> 00:05:28.07
and where you can go from here.

