1
00:00:00.00 --> 00:00:00.08
(Male Narrator)

2
00:00:00.08 --> 00:00:04.07
- There are two areas where
heavy input/output takes place.

3
00:00:04.07 --> 00:00:07.02
Network and disc access.

4
00:00:07.02 --> 00:00:09.04
So let's take a look at
disk access to begin with

5
00:00:09.04 --> 00:00:11.01
by working with some files.

6
00:00:11.01 --> 00:00:13.00
We'll start with reading files and then

7
00:00:13.00 --> 00:00:15.06
move onto writing our own files.

8
00:00:15.06 --> 00:00:17.06
In order to do that we're going to require

9
00:00:17.06 --> 00:00:21.00
access to the file system
that's built with the node.

10
00:00:21.00 --> 00:00:23.03
But first let's start
by creating a new file.

11
00:00:23.03 --> 00:00:27.07
I'll call this demo.js.

12
00:00:27.07 --> 00:00:30.00
Now let's require in the file system

13
00:00:30.00 --> 00:00:36.05
and I'll call it fs for short.

14
00:00:36.05 --> 00:00:38.03
And as you can see, the library itself

15
00:00:38.03 --> 00:00:40.05
is also called fs.

16
00:00:40.05 --> 00:00:42.04
The next command we'll perform will be

17
00:00:42.04 --> 00:00:43.08
to read from the file

18
00:00:43.08 --> 00:00:45.05
but we don't have a file to read yet

19
00:00:45.05 --> 00:00:48.01
so let's create a temporary JSON file

20
00:00:48.01 --> 00:00:49.09
and put some data into it.

21
00:00:49.09 --> 00:00:53.06
I'll call it data.json

22
00:00:53.06 --> 00:00:55.02
and in here we'll simply create

23
00:00:55.02 --> 00:00:59.04
an object that has a property name.

24
00:00:59.04 --> 00:01:03.00
And we need to wrap the
property in double quotes.

25
00:01:03.00 --> 00:01:05.05
Then I'll use a colon and I'll use the

26
00:01:05.05 --> 00:01:08.03
name Tim as a place holder.

27
00:01:08.03 --> 00:01:09.08
Let's close that out.

28
00:01:09.08 --> 00:01:13.02
The first thing we'll do
is access the file system

29
00:01:13.02 --> 00:01:16.01
with a function called, read file.

30
00:01:16.01 --> 00:01:20.02
(typing)

31
00:01:20.02 --> 00:01:22.03
And now let's pass in the location of our

32
00:01:22.03 --> 00:01:24.02
data JSON file.

33
00:01:24.02 --> 00:01:26.05
The second parameter since this is

34
00:01:26.05 --> 00:01:30.02
an asynchronous function
will be our call back.

35
00:01:30.02 --> 00:01:32.03
So I could define a separate function

36
00:01:32.03 --> 00:01:34.06
like we did in our asynchronous video

37
00:01:34.06 --> 00:01:37.08
or I could provide an anonymous function

38
00:01:37.08 --> 00:01:40.09
and place it in the
second parameter directly.

39
00:01:40.09 --> 00:01:43.09
The callback will pass an error

40
00:01:43.09 --> 00:01:47.02
and then the data that's read in.

41
00:01:47.02 --> 00:01:50.00
And so that's another way
we can handle the call back.

42
00:01:50.00 --> 00:01:56.00
Another way yet would be
to use an arrow function.

43
00:01:56.00 --> 00:01:57.07
And it's slightly more compact

44
00:01:57.07 --> 00:01:59.05
than the previous syntax.

45
00:01:59.05 --> 00:02:01.01
So we'll use that going forward.

46
00:02:01.01 --> 00:02:03.05
For now, let's go ahead
and console log the data

47
00:02:03.05 --> 00:02:05.06
we get and see what happens.

48
00:02:05.06 --> 00:02:11.08
(typing)

49
00:02:11.08 --> 00:02:15.02
And then I'll use nodemon
to execute our demo.

50
00:02:15.02 --> 00:02:17.09
As you can see we got some sort of output

51
00:02:17.09 --> 00:02:19.06
with a buffer at the start.

52
00:02:19.06 --> 00:02:22.03
That's not what we have inside our JSON.

53
00:02:22.03 --> 00:02:23.05
So what's going on?

54
00:02:23.05 --> 00:02:27.01
What's happening is we didn't
specify the file format.

55
00:02:27.01 --> 00:02:29.08
And in order to read the JSON file and

56
00:02:29.08 --> 00:02:34.03
other documents we need to
specify the UTF 8 format.

57
00:02:34.03 --> 00:02:37.08
So instead of the callback
being the second parameter

58
00:02:37.08 --> 00:02:41.05
we'll push it over to the third parameter.

59
00:02:41.05 --> 00:02:44.01
And then we'll specify, as a string,

60
00:02:44.01 --> 00:02:49.05
UTF-8 as a second parameter.

61
00:02:49.05 --> 00:02:51.08
Let's save that and as you can see

62
00:02:51.08 --> 00:02:54.03
we're able to read in the JSON just fine.

63
00:02:54.03 --> 00:02:56.05
Another good to know
is that we can actually

64
00:02:56.05 --> 00:03:00.02
access our JSON file
with a require directly

65
00:03:00.02 --> 00:03:03.01
instead of using read file.

66
00:03:03.01 --> 00:03:05.06
Let's try that out now.

67
00:03:05.06 --> 00:03:09.07
So I'll go to line two
and create a data variable

68
00:03:09.07 --> 00:03:16.06
set it to require and specify
the path to data.json.

69
00:03:16.06 --> 00:03:18.03
Then let's console log data.

70
00:03:18.03 --> 00:03:22.05
(typing)

71
00:03:22.05 --> 00:03:24.00
I'll save that.

72
00:03:24.00 --> 00:03:25.00
And now you can see we're getting

73
00:03:25.00 --> 00:03:27.02
two objects in our console.

74
00:03:27.02 --> 00:03:29.09
One from the require and
one from our read file.

75
00:03:29.09 --> 00:03:31.06
They look a bit different so let's see

76
00:03:31.06 --> 00:03:33.05
what those differences are.

77
00:03:33.05 --> 00:03:34.08
The first thing I'm going to do is

78
00:03:34.08 --> 00:03:37.05
try to access the property
name from our require

79
00:03:37.05 --> 00:03:40.07
to see if it's a true
object or just a string.

80
00:03:40.07 --> 00:03:46.06
So I'll go over to line
four and type in dot name.

81
00:03:46.06 --> 00:03:50.05
If I save that we can see
it's outputting just the name.

82
00:03:50.05 --> 00:03:52.07
And so we're able to
access the property and

83
00:03:52.07 --> 00:03:54.07
therefore it is an object.

84
00:03:54.07 --> 00:03:59.02
Let's try to do the
same for our read file.

85
00:03:59.02 --> 00:04:01.06
As you can see, it's undefined.

86
00:04:01.06 --> 00:04:03.08
Therefore it is just a string.

87
00:04:03.08 --> 00:04:07.03
So let's create a new
variable inside our read file

88
00:04:07.03 --> 00:04:13.01
callback called data and
set it to json.parse.

89
00:04:13.01 --> 00:04:15.01
And then I'll pass in data.

90
00:04:15.01 --> 00:04:18.08
So, essentially it's
taking our data parameter

91
00:04:18.08 --> 00:04:23.00
converting it to JSON
and then overriding it.

92
00:04:23.00 --> 00:04:26.08
And then we're able to access data.name.

93
00:04:26.08 --> 00:04:28.04
And if we look in our console we can see

94
00:04:28.04 --> 00:04:31.01
there are two names being displayed.

