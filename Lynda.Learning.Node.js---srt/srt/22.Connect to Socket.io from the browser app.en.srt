1
00:00:00.05 --> 00:00:01.09
- [Instructor] We are
able to send requests

2
00:00:01.09 --> 00:00:04.08
from the client or browser to Node,

3
00:00:04.08 --> 00:00:07.02
but there is no way to do it in reverse.

4
00:00:07.02 --> 00:00:10.03
There's no way for Node to
tell one or more clients,

5
00:00:10.03 --> 00:00:12.01
hey, there's a new message,

6
00:00:12.01 --> 00:00:14.05
so the only way to achieve this behavior

7
00:00:14.05 --> 00:00:18.06
with HTTP requests is to do
something called polling.

8
00:00:18.06 --> 00:00:21.00
With polling, every few seconds we send

9
00:00:21.00 --> 00:00:23.06
an HTTP request asking the server,

10
00:00:23.06 --> 00:00:25.06
hey, are there any updates?

11
00:00:25.06 --> 00:00:28.01
Are there new messages I should display?

12
00:00:28.01 --> 00:00:30.02
And we check over and over.

13
00:00:30.02 --> 00:00:31.06
It would be much better

14
00:00:31.06 --> 00:00:33.07
if the server could just tell the client

15
00:00:33.07 --> 00:00:35.03
when a new message comes in

16
00:00:35.03 --> 00:00:38.03
without the clients having
to constantly check.

17
00:00:38.03 --> 00:00:39.06
You can think of it as a bunch

18
00:00:39.06 --> 00:00:42.09
of kids in a van asking
the parents every minute,

19
00:00:42.09 --> 00:00:44.04
hey, are we there yet?

20
00:00:44.04 --> 00:00:46.01
The parents might plead with the kids

21
00:00:46.01 --> 00:00:48.07
to stop asking at one point,

22
00:00:48.07 --> 00:00:50.04
and that they will tell the kids

23
00:00:50.04 --> 00:00:53.00
when they arrive instead of them asking.

24
00:00:53.00 --> 00:00:55.03
This is how WebSockets work

25
00:00:55.03 --> 00:00:58.08
and we will be using a WebSocket
library called Socket.IO

26
00:00:58.08 --> 00:01:02.02
that works for both the
browser and for Node.

27
00:01:02.02 --> 00:01:05.05
With Socket.IO, we will
be able to notify clients

28
00:01:05.05 --> 00:01:07.08
or the app running in the browser

29
00:01:07.08 --> 00:01:10.08
when another user has sent a chat message,

30
00:01:10.08 --> 00:01:14.07
that way the app will update
their message list instantly.

31
00:01:14.07 --> 00:01:17.02
You might have heard
of push notifications,

32
00:01:17.02 --> 00:01:18.09
where a server pushes an update

33
00:01:18.09 --> 00:01:22.04
or a message to a client
or multiple clients,

34
00:01:22.04 --> 00:01:24.02
this works the same way.

35
00:01:24.02 --> 00:01:27.01
The nice thing about
the Socket.IO library is

36
00:01:27.01 --> 00:01:29.03
that if a browser is older

37
00:01:29.03 --> 00:01:31.06
and does not support WebSockets,

38
00:01:31.06 --> 00:01:33.09
it will default back to polling

39
00:01:33.09 --> 00:01:36.06
and it has that functionality built in

40
00:01:36.06 --> 00:01:38.02
so it will always work,

41
00:01:38.02 --> 00:01:41.08
even if it's not as efficient
with older browsers.

42
00:01:41.08 --> 00:01:46.03
So, let's begin by installing
Socket.IO with npm.

43
00:01:46.03 --> 00:01:48.07
So, I've opened up a new Terminal,

44
00:01:48.07 --> 00:01:52.04
and I'll use npm install -s

45
00:01:52.04 --> 00:01:57.08
socket.io.

46
00:01:57.08 --> 00:02:00.02
Setting up Socket.IO is
a bit tricker than most

47
00:02:00.02 --> 00:02:01.08
of the other packages,

48
00:02:01.08 --> 00:02:05.04
that's because it needs
to tie in with Express,

49
00:02:05.04 --> 00:02:09.05
and the game plan is that we'll
create a regular HTTP server

50
00:02:09.05 --> 00:02:11.06
with Node that will then share

51
00:02:11.06 --> 00:02:14.03
with Express and Socket.IO.

52
00:02:14.03 --> 00:02:17.09
So, let's open up our server.js,

53
00:02:17.09 --> 00:02:21.07
and first let's set up that HTTP server.

54
00:02:21.07 --> 00:02:27.08
So, below line three,
let's add var http require

55
00:02:27.08 --> 00:02:30.07
then we'll use the HTTP library from Node

56
00:02:30.07 --> 00:02:35.01
and we'll call .Server
on the require itself

57
00:02:35.01 --> 00:02:39.01
and pass in our Express app,

58
00:02:39.01 --> 00:02:45.04
then let's create io and set it to require

59
00:02:45.04 --> 00:02:48.01
socket.io

60
00:02:48.01 --> 00:02:50.07
and we'll pass in reference to http.

61
00:02:50.07 --> 00:02:53.02
Now that Socket.IO is
set up on the backend,

62
00:02:53.02 --> 00:02:54.07
let's set it up for the front end,

63
00:02:54.07 --> 00:02:57.02
so let's open up our index.html

64
00:02:57.02 --> 00:02:59.02
and at the bottom of the <script> tags,

65
00:02:59.02 --> 00:03:04.08
after line five, we'll
add a new <script> tag,

66
00:03:04.08 --> 00:03:07.03
and set src to

67
00:03:07.03 --> 00:03:16.04
/socket.io/socket.io.js,

68
00:03:16.04 --> 00:03:19.02
and now let's check out
webpage for any errors.

69
00:03:19.02 --> 00:03:23.00
So, I'll refresh and we can see
that we are getting an error

70
00:03:23.00 --> 00:03:26.03
and we're unable to find
the Socket.IO JavaScript

71
00:03:26.03 --> 00:03:27.06
file we included.

72
00:03:27.06 --> 00:03:31.03
The problem is that we can't
directly serve our backend

73
00:03:31.03 --> 00:03:33.04
with just Express any longer.

74
00:03:33.04 --> 00:03:36.01
We will use the Node HTTP server

75
00:03:36.01 --> 00:03:40.02
so that way both Express and
Socket.IO will be running.

76
00:03:40.02 --> 00:03:42.02
So, inside our server.js,

77
00:03:42.02 --> 00:03:46.02
we can do that by replacing
our existing listen code

78
00:03:46.02 --> 00:03:51.06
on line 25 with http.listen instead.

79
00:03:51.06 --> 00:03:55.00
Let's save that and give it
another try in our browser,

80
00:03:55.00 --> 00:03:59.01
so I'll refresh, we're no
longer getting an error,

81
00:03:59.01 --> 00:04:01.06
and if we look at the Network tab,

82
00:04:01.06 --> 00:04:05.02
we can see we're getting the
Socket.IO JavaScript file.

83
00:04:05.02 --> 00:04:09.00
Next let's go down to the
script element in our HTTP file

84
00:04:09.00 --> 00:04:13.08
and initialize Socket.IO.

85
00:04:13.08 --> 00:04:15.07
So, at the top of our <script> tag,

86
00:04:15.07 --> 00:04:17.07
we'll create a variable called socket

87
00:04:17.07 --> 00:04:20.04
and we'll set it to io.

88
00:04:20.04 --> 00:04:23.05
This initialization will
also try to make a connection

89
00:04:23.05 --> 00:04:26.00
to the Socket.IO server at the same URL

90
00:04:26.00 --> 00:04:28.06
that the current page is being hosted on.

91
00:04:28.06 --> 00:04:32.01
Let's set up a callback for
the socket connection event

92
00:04:32.01 --> 00:04:35.02
that will let us know
whenever a new user connects,

93
00:04:35.02 --> 00:04:38.09
so let's save this and then
go into our server.js file,

94
00:04:38.09 --> 00:04:44.04
and below our post
messages, we'll add io.on

95
00:04:44.04 --> 00:04:47.09
and we'll check for the connection event,

96
00:04:47.09 --> 00:04:55.00
and we'll supply a function
that takes in a socket.

97
00:04:55.00 --> 00:04:58.06
And for now, let's console.log

98
00:04:58.06 --> 00:05:01.08
a user connected,

99
00:05:01.08 --> 00:05:03.06
let's save that.

100
00:05:03.06 --> 00:05:06.09
Let's open up our Terminal

101
00:05:06.09 --> 00:05:09.09
and go to our nodemon,

102
00:05:09.09 --> 00:05:14.03
then let's refresh our page.

103
00:05:14.03 --> 00:05:15.04
And now, back in nodemon,

104
00:05:15.04 --> 00:05:18.01
we can see that a Socket.IO connection

105
00:05:18.01 --> 00:05:20.07
has successfully been
made from the browser

106
00:05:20.07 --> 00:05:24.00
since we're getting a message
in the connection event

107
00:05:24.00 --> 00:05:26.06
and we can see a user
connected in our Console.

108
00:05:26.06 --> 00:05:29.00
Next let's look at how to
create the message event

109
00:05:29.00 --> 00:05:31.07
to update all of the clients at once.

