1
00:00:00,510 --> 00:00:01,500
Welcome back, everyone.

2
00:00:02,220 --> 00:00:08,250
In this video, we are going to start modifying our create action types so that we can set up the remainder

3
00:00:08,250 --> 00:00:12,000
of our redux with the appropriate typescript bindings.

4
00:00:12,990 --> 00:00:19,860
Now the first step we need to do is we need to turn this reducer utils from a J.S. file to a Tesla.

5
00:00:20,700 --> 00:00:24,450
And what we need to do is actually quite a large amount of work.

6
00:00:24,960 --> 00:00:30,480
But as we're typing this out and figuring this out, I'm going to touch upon why we need it.

7
00:00:30,990 --> 00:00:33,600
So it's going to be quite extensive.

8
00:00:34,850 --> 00:00:41,000
You just need to follow along with me as we go, and it will make more sense as we add in and type out

9
00:00:41,000 --> 00:00:42,290
some of what we're going to do.

10
00:00:43,270 --> 00:00:49,750
So the first step is we need to import in this any action type from Redux.

11
00:00:50,720 --> 00:00:58,070
The any action type is essentially an interface that extends upon this action type.

12
00:00:58,760 --> 00:01:06,530
The action type is just a action interface that has this generic t, this t can be anything.

13
00:01:07,070 --> 00:01:11,840
But the idea here is that this T is going to go to some type value.

14
00:01:13,160 --> 00:01:16,040
Now when we go back to that, any action.

15
00:01:19,090 --> 00:01:22,990
Any action also extends upon extra props.

16
00:01:23,560 --> 00:01:25,720
So any additional properties that you want.

17
00:01:26,080 --> 00:01:31,830
Some people use actions inside of their project or they actually add their own values.

18
00:01:31,840 --> 00:01:34,690
So it's not just tied to type and payload.

19
00:01:35,440 --> 00:01:42,130
Sometimes there are some additional ones, but the reason why they use this action as the base is because

20
00:01:42,370 --> 00:01:43,930
not all actions have payloads.

21
00:01:44,230 --> 00:01:46,480
We run actions that have no payloads as well.

22
00:01:47,860 --> 00:01:53,080
So what we need to do is we need to take this any action and we have to figure out a way so that we

23
00:01:53,080 --> 00:01:59,360
can extend it into our system, so that we can utilize all of our surrounding libraries.

24
00:01:59,380 --> 00:02:01,510
And this is a very important thing to know.

25
00:02:01,900 --> 00:02:06,010
There are many, many ways that you can approach typing redux.

26
00:02:06,520 --> 00:02:08,560
Many different projects do it differently.

27
00:02:09,310 --> 00:02:11,110
There are tradeoffs in this process.

28
00:02:11,110 --> 00:02:17,380
And as people say, TypeScript is an art, not necessarily a science.

29
00:02:17,980 --> 00:02:23,530
There is some degree of it where there's definitely best practices and patterns, but in this process

30
00:02:23,530 --> 00:02:31,300
there is also a very high degree of what is correct and what is kind of correct but relevant in the

31
00:02:31,300 --> 00:02:31,870
use case.

32
00:02:32,290 --> 00:02:37,510
Honestly, all I'm trying to say is that this process is not going to be the most straightforward,

33
00:02:38,050 --> 00:02:41,260
but this one that we're going to do, we're going to justify every step that we go.

34
00:02:42,360 --> 00:02:46,380
So what we're going to do is I'm going to create two types.

35
00:02:46,920 --> 00:02:52,260
I'm going to create a action type that defines our action with payload.

36
00:02:53,010 --> 00:02:55,380
So here I'm going to say action with payload.

37
00:02:56,490 --> 00:03:03,060
This is going to be r-type that takes some generic tea and some generic pee.

38
00:03:03,840 --> 00:03:06,990
Now, tea, of course, is going to be our type value.

39
00:03:08,490 --> 00:03:10,980
And then our payload is going to be P.

40
00:03:12,110 --> 00:03:17,630
So what I'm doing here is I'm saying whenever we call this action with payload, this T value is going

41
00:03:17,630 --> 00:03:21,350
to be one of those enum values that we're going to pass in.

42
00:03:21,710 --> 00:03:29,450
Because as I mentioned, when we did our category types right here, we know that the type is a very

43
00:03:29,450 --> 00:03:30,380
specific string.

44
00:03:30,980 --> 00:03:34,880
It's not just going to be string, but as very specific string.

45
00:03:35,660 --> 00:03:41,450
So I want to be able to pass that enumerable member value and then set that as the type.

46
00:03:42,630 --> 00:03:46,410
And then for the payload while we can pass in any payload that we want.

47
00:03:46,950 --> 00:03:47,850
So that's the first thing.

48
00:03:48,540 --> 00:03:51,930
The next thing that I need is the type of action.

49
00:03:52,260 --> 00:03:58,500
And action is also going to receive a generic T, and this T, of course, goes to the type.

50
00:03:58,920 --> 00:04:04,410
But because we have no payload here, we are just going to remove the need for the payload.

51
00:04:05,340 --> 00:04:11,010
Now, you might be wondering, well, why is it that with this action we've created two types?

52
00:04:11,430 --> 00:04:14,250
Could we not just make this payload optional?

53
00:04:14,340 --> 00:04:18,090
And then now we have just one type instead of two.

54
00:04:19,460 --> 00:04:26,120
So the reason why this would be incorrect is because if you hover over this payload, you see that this

55
00:04:26,120 --> 00:04:30,020
property of payload points either to P or undefined.

56
00:04:31,250 --> 00:04:36,950
The problem with doing this is that it essentially says that you have a chance of getting an action

57
00:04:37,280 --> 00:04:38,980
where payload is always present.

58
00:04:38,990 --> 00:04:40,910
It's just going to point to undefined.

59
00:04:42,020 --> 00:04:45,710
While that's true in JavaScript, we actually don't want that to be true in TypeScript.

60
00:04:45,710 --> 00:04:48,890
We don't even want there to be a payload in the first place.

61
00:04:49,100 --> 00:04:55,100
Essentially, if you get this action where it's just the type, no payload, if you try to call payload,

62
00:04:55,610 --> 00:04:58,730
we want to throw actually that there is nothing there.

63
00:04:58,730 --> 00:04:59,300
It's an error.

64
00:04:59,570 --> 00:05:04,130
You can't even access payload because payload isn't even a property on this action type.

65
00:05:04,550 --> 00:05:10,880
By doing this, we narrow the scope because if we generate a action where it just has type no payload,

66
00:05:11,060 --> 00:05:17,180
then in no way, shape or form should the code that's using that action ever even try to reference the

67
00:05:17,180 --> 00:05:17,540
payload?

68
00:05:18,110 --> 00:05:19,250
Because if you do, it's going to be on the.

69
00:05:19,460 --> 00:05:20,770
There's no point of that.

70
00:05:21,470 --> 00:05:27,200
And there might be some functionality in the JavaScript world where you use that undefined payload to

71
00:05:27,200 --> 00:05:31,850
determine if you should move forward or not because it's indicative of something.

72
00:05:32,210 --> 00:05:34,700
But with TypeScript, it actually is the opposite.

73
00:05:34,700 --> 00:05:39,770
You don't want that because you get now that type safety and this is where you kind of have to change

74
00:05:39,770 --> 00:05:40,670
your thinking a little bit.

75
00:05:41,210 --> 00:05:46,850
The patterns that you're used to before where it's okay to have something as undefined does not really

76
00:05:46,850 --> 00:05:48,740
run inside of TypeScript.

77
00:05:48,980 --> 00:05:50,600
You want to be very explicit.

78
00:05:50,930 --> 00:05:56,450
If you have some action that has a payload and another action that doesn't have a payload, those should

79
00:05:56,690 --> 00:05:58,640
actually be two different types.

80
00:06:00,740 --> 00:06:04,280
So we'll discuss more of this and the reason why we have to set it up this way.

81
00:06:04,400 --> 00:06:05,960
Once we move on to our producers.

82
00:06:06,350 --> 00:06:08,570
But for now, we have to actually do all of this setup.

83
00:06:09,290 --> 00:06:12,790
So the thing that we know now is that we have two different action types.

84
00:06:12,800 --> 00:06:15,500
We have an action with a payload and we have an action without a payload.

85
00:06:16,040 --> 00:06:23,840
Based on this, create action depending on if we receive a payload or not, we want to return the appropriate

86
00:06:23,840 --> 00:06:24,410
action.

87
00:06:25,500 --> 00:06:31,740
We want to either return an action with payload type if there is a payload, but if there is no payload,

88
00:06:31,740 --> 00:06:36,570
then the type that we get back from calling Korean action should just be a regular action.

89
00:06:37,500 --> 00:06:42,300
So in order for us to achieve this, we need to do something known as function overloading.

90
00:06:43,050 --> 00:06:47,280
So function overloading actually comes from TypeScript, not JavaScript.

91
00:06:47,940 --> 00:06:55,200
Function overload provides us this ability to make multiple function type definitions of the same name,

92
00:06:55,530 --> 00:06:58,890
so we can have multiple type definitions for create action.

93
00:06:59,190 --> 00:07:05,250
And what it allows us to do is allow this function to receive different parameter types.

94
00:07:05,490 --> 00:07:11,100
It should be the same number, meaning that we should receive to if our create action always receives

95
00:07:11,100 --> 00:07:11,400
two.

96
00:07:12,180 --> 00:07:20,220
But what it does is that it can now return different types depending on the parameter types that we

97
00:07:20,220 --> 00:07:20,610
receive.

98
00:07:21,510 --> 00:07:23,850
So let's write it out and it will make more sense.

99
00:07:24,330 --> 00:07:31,050
In order for us to do it, we actually need to use the classic function declaration style rather than

100
00:07:31,290 --> 00:07:32,370
the arrow functions.

101
00:07:33,060 --> 00:07:34,260
So we're going to convert it over.

102
00:07:34,740 --> 00:07:38,940
So to do that, we're going to say first function, create action.

103
00:07:39,780 --> 00:07:43,440
This create action, as we know, is going to get a type in a payload.

104
00:07:44,100 --> 00:07:49,980
So depending on the action that we're creating, again, we're passing those constant values, if you

105
00:07:49,980 --> 00:07:52,320
remember, from our action type.

106
00:07:53,220 --> 00:07:53,760
Right here.

107
00:07:55,140 --> 00:08:00,990
These are these fixed values in our enum, so we need to pass that as the T value.

108
00:08:01,380 --> 00:08:06,180
But we know this is a string, so we're going to say that this create action extends string.

109
00:08:07,880 --> 00:08:10,310
We're also going to get the type for the payload.

110
00:08:10,970 --> 00:08:13,580
It might be anything we want to pass as the payload.

111
00:08:14,850 --> 00:08:16,800
And then what we're going to say is that okay?

112
00:08:17,740 --> 00:08:23,350
Once this happens, we're going to get some type value, which is T and we're going to get some payload

113
00:08:23,350 --> 00:08:24,940
parameter, which is P.

114
00:08:26,150 --> 00:08:29,210
And then all we're doing is we are returning back.

115
00:08:30,260 --> 00:08:32,390
An object with type payload.

116
00:08:34,470 --> 00:08:40,200
So if you think about it, really, this is just the type version of this using the function declaration

117
00:08:40,200 --> 00:08:42,750
style rather than the arrow function, declaration style.

118
00:08:43,260 --> 00:08:47,430
If you were to do this, not in TypeScript, you would just get rid of this and get rid of the types.

119
00:08:48,420 --> 00:08:50,160
These two are now equivalent.

120
00:08:51,340 --> 00:08:52,840
This function and this function.

121
00:08:53,350 --> 00:08:54,370
But what the types?

122
00:08:54,370 --> 00:08:55,060
It looks like this.

123
00:08:56,470 --> 00:09:03,820
So now we have a regular function definition that is typed, but now we need to type define this so

124
00:09:03,820 --> 00:09:09,070
that it returns the appropriate type from this because right now our function is not actually returning.

125
00:09:09,070 --> 00:09:13,060
I think this is more so what the actual code implementation of this function will do.

126
00:09:13,180 --> 00:09:14,530
So now we need to do the overloading.

127
00:09:15,130 --> 00:09:19,840
So to overload, if you're going to export, you always want to export all of your overload definitions.

128
00:09:20,110 --> 00:09:25,690
So again, we're going to take the same function, function, create action, and here we're going to

129
00:09:25,690 --> 00:09:31,120
receive some T that extends string and we're also going to receive P.

130
00:09:31,720 --> 00:09:36,700
So now what we're doing is we're just typing the function the same way, except we're going to make

131
00:09:36,700 --> 00:09:38,350
sure we return action with payload.

132
00:09:38,950 --> 00:09:42,850
Now we've already defined the implementation part in this last function.

133
00:09:43,060 --> 00:09:44,980
We don't need to define the implementation again.

134
00:09:45,190 --> 00:09:46,540
We're just going to define the type.

135
00:09:47,200 --> 00:09:54,040
So here we know that we extend these values, but we also need to now pass these types into the parameters.

136
00:09:55,420 --> 00:10:00,430
So here we're saying, okay, this create action function, we'll get some type of type string and then

137
00:10:00,430 --> 00:10:01,480
some payload.

138
00:10:02,280 --> 00:10:02,460
Of.

139
00:10:04,380 --> 00:10:10,260
And then what it'll do is that it just returns back action with payload.

140
00:10:11,400 --> 00:10:12,420
T and P.

141
00:10:13,260 --> 00:10:19,110
So here we're just saying, okay, if create action gets called with a type and a payload, the return

142
00:10:19,110 --> 00:10:23,520
type from this function will be action with payload tap being passed in like so.

143
00:10:23,820 --> 00:10:30,120
So that's the action type you can expect to get back from this action when it's called with type and

144
00:10:30,120 --> 00:10:31,080
payload as parameters.

145
00:10:31,950 --> 00:10:40,140
Now, what we want to do is we want to type the function if it gets called with just a type, because

146
00:10:40,140 --> 00:10:44,580
when it just gets called the type, we want to pass back an action, not with payload.

147
00:10:45,300 --> 00:10:48,090
So here we're going to say T extends string.

148
00:10:49,380 --> 00:10:56,220
But what we need to know is that, okay, when this create action gets called with just type T, there's

149
00:10:56,220 --> 00:10:57,330
no P value here.

150
00:10:58,610 --> 00:11:08,420
So here we know that we are getting type tea, but the thing is that Crate Action is technically expecting

151
00:11:08,420 --> 00:11:11,420
a payload value because it's not optional.

152
00:11:12,080 --> 00:11:17,720
So this means that we want to make this essentially equal to void, which means that you are not expecting

153
00:11:17,720 --> 00:11:18,080
anything.

154
00:11:18,650 --> 00:11:21,080
And then we can just say Action type tea.

155
00:11:22,220 --> 00:11:28,430
Now, if you did not include this, let's say you just did this, you will see that action throws you

156
00:11:28,940 --> 00:11:35,360
a error because again, it says the overload signature is not compatible because as I mentioned earlier,

157
00:11:35,600 --> 00:11:40,340
in order for you to overload functions, you must have the same number of parameters.

158
00:11:40,850 --> 00:11:44,930
So the way that you avoid this is you just say, okay, the payload then gets nothing.

159
00:11:45,110 --> 00:11:46,370
Void, no value.

160
00:11:47,580 --> 00:11:55,620
And with this now, you'll be able to create this additional create action typing on our function.

161
00:11:56,250 --> 00:11:59,310
Now, if you hover over create action, we can receive a payload.

162
00:11:59,310 --> 00:12:00,420
We might not receive a payload.

163
00:12:00,870 --> 00:12:04,740
But essentially what this create action will now do, it's hidden behind the plus one overload.

164
00:12:05,190 --> 00:12:11,550
It can now spit out either an action with payload if payload is provided, or an action if just the

165
00:12:11,550 --> 00:12:12,330
type is provided.

166
00:12:13,200 --> 00:12:20,280
This is essentially how you type these functions so that they can return you back different types depending

167
00:12:20,280 --> 00:12:23,220
on the parameters and the types that get passed as the parameter.

168
00:12:23,880 --> 00:12:29,850
If the payload matches void so undefined, meaning you did not pass it, then you get back an action.

169
00:12:30,830 --> 00:12:38,000
If Create Action gets both type T and payload of whatever the P generic gets passed, then we get back

170
00:12:38,000 --> 00:12:39,260
action with payload instead.

171
00:12:40,130 --> 00:12:43,130
This is now our new create action type.

172
00:12:44,260 --> 00:12:45,790
So we didn't use the any action yet.

173
00:12:46,360 --> 00:12:49,090
Again, this will become more important a little later.

174
00:12:49,540 --> 00:12:52,930
But for now, this is what we've done for our create action.

175
00:12:53,620 --> 00:12:59,770
So with this now, let's move on to our next video where we will try and use this create action inside

176
00:12:59,770 --> 00:13:01,240
of our application.

177
00:13:01,810 --> 00:13:02,710
I'll see you in the next video.
