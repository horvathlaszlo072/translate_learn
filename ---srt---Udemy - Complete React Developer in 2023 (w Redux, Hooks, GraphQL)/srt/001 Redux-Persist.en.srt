1
00:00:00,390 --> 00:00:01,310
Welcome back, everyone.

2
00:00:02,280 --> 00:00:02,880
In this video.

3
00:00:02,880 --> 00:00:07,470
What we're going to do is we are going to introduce in Redux Persist.

4
00:00:08,130 --> 00:00:14,910
Now, Redux Persist is a tool that allows us to persist our reducer values inside of local storage.

5
00:00:16,180 --> 00:00:21,070
So to start all we need to do is we need to add in redux persist as a library.

6
00:00:22,530 --> 00:00:28,450
So once it's inside, there's a lot of nuance, setup and configuration we have to do.

7
00:00:28,800 --> 00:00:34,110
Not a lot, but at least there's some that won't make a lot of sense up right until we actually see

8
00:00:34,110 --> 00:00:34,710
it in action.

9
00:00:35,610 --> 00:00:41,430
So in order to use it, what we need to do is we have to import in two things from redox persist.

10
00:00:41,790 --> 00:00:47,760
We have to import in first the actual persist store method.

11
00:00:50,070 --> 00:00:53,070
From Redux persist like this.

12
00:00:54,180 --> 00:00:57,630
And then the other thing we need is persist reducer.

13
00:00:58,380 --> 00:01:02,190
These are the two methods that will help us actually set up our persistence.

14
00:01:03,400 --> 00:01:08,020
We need a configuration object that tells me to persist what we want.

15
00:01:08,560 --> 00:01:14,170
Now, this config is relatively straightforward and you can find out what other values you can set inside

16
00:01:14,170 --> 00:01:16,060
of the docs that I want for redox persist.

17
00:01:17,220 --> 00:01:22,590
But here in our current config object, we need to say, okay, what's the key?

18
00:01:22,860 --> 00:01:24,720
So the key is the part that we want to start with.

19
00:01:24,900 --> 00:01:28,860
And Root just says, I want you to process the whole thing, which is what we want.

20
00:01:29,310 --> 00:01:30,810
We want to start from the root level.

21
00:01:31,980 --> 00:01:36,660
Then as far as the storage, what do we want to store this into?

22
00:01:37,440 --> 00:01:41,700
So here we need to import this in from redux.

23
00:01:41,700 --> 00:01:42,360
Persist.

24
00:01:44,480 --> 00:01:47,480
Slash lib slash storage.

25
00:01:48,380 --> 00:01:52,970
So by default in any web browser, this will just use local storage, which is what we want.

26
00:01:53,180 --> 00:01:56,150
So this is what will pass as the storage value like so.

27
00:01:57,370 --> 00:02:02,770
Except using this shorthand where we cast the variable as the key name.

28
00:02:04,000 --> 00:02:09,270
And then what we need is we need to think about whether we want a blacklist or white list.

29
00:02:09,280 --> 00:02:10,870
Any of these reduce our values.

30
00:02:11,380 --> 00:02:17,460
So here, this is where you would put in an array of strings of the actual values that you don't want

31
00:02:17,470 --> 00:02:19,660
for which reducer you don't want to persist.

32
00:02:20,410 --> 00:02:25,720
For us, we know that our user value is coming from our author state listener anyways.

33
00:02:26,080 --> 00:02:33,520
So if that's the case, we probably don't want to persist the user because this might conflict and clash

34
00:02:33,520 --> 00:02:38,560
with local storage in a way where we get some weird interactive behavior we may not want.

35
00:02:38,830 --> 00:02:40,270
So I'm just going to blacklist the user.

36
00:02:42,090 --> 00:02:49,320
Now what I'm going to do is I'm going to say I want to create a persisted reducer using this process

37
00:02:49,320 --> 00:02:49,740
config.

38
00:02:50,190 --> 00:02:53,010
So I'm going to call persist reducer like so.

39
00:02:54,030 --> 00:02:56,070
And here I'm going to pass it two things.

40
00:02:56,580 --> 00:02:58,590
First is the persist config.

41
00:02:58,680 --> 00:03:02,930
And then the next thing is the root reducer with these two.

42
00:03:02,940 --> 00:03:08,730
Now I have created a persisted reducer, which is what I want to use for my store.

43
00:03:09,740 --> 00:03:14,090
So now my store is by default, going to be using persistent reducer.

44
00:03:14,870 --> 00:03:22,970
And then what I'm going to do is I'm also going to export out a persistent object which calls persist

45
00:03:22,970 --> 00:03:25,100
store using the store object.

46
00:03:25,880 --> 00:03:33,530
So it's using these new modified, persisted values that we have in Redux that we can now persist the

47
00:03:33,530 --> 00:03:33,860
store.

48
00:03:34,250 --> 00:03:40,580
But to do so, we have to actually go into our index indexes, and we need to import the component that

49
00:03:40,580 --> 00:03:41,840
we're going to pass all this to.

50
00:03:42,740 --> 00:03:47,090
So here what we're going to import in is this thing called a persist gate.

51
00:03:47,840 --> 00:03:55,340
So I'm going to import in persist gate, which is a component specifically from Redux persists that

52
00:03:55,340 --> 00:03:57,260
we can use for React.

53
00:03:57,770 --> 00:04:04,430
So this loss under redux persist, not react slash integration slash react like this.

54
00:04:05,510 --> 00:04:09,110
Now this component we want to wrap inside of our provider.

55
00:04:12,100 --> 00:04:15,640
And we want to wrap all of our application inside of our new Persist gate.

56
00:04:16,540 --> 00:04:22,300
And what we passed of Persist Gate is our sister that we are now exporting from this file.

57
00:04:23,440 --> 00:04:26,650
So I'm going to say persist or is equal to poor sister.

58
00:04:27,500 --> 00:04:29,360
And now if we go back to our application.

59
00:04:31,150 --> 00:04:34,270
If we have looking inside of our car, we have some items.

60
00:04:34,750 --> 00:04:35,590
Let's refresh now.

61
00:04:37,030 --> 00:04:43,420
What we see is that we have retained the same items and looking inside of our code here, we see that

62
00:04:43,420 --> 00:04:46,060
we receive an action of type redux.

63
00:04:46,060 --> 00:04:47,260
Persist or persist.

64
00:04:47,260 --> 00:04:48,820
Slash persist and then persist.

65
00:04:49,120 --> 00:04:49,780
Rehydrate.

66
00:04:50,770 --> 00:04:56,830
So here, this rehydrate, as you can see, is giving us back the actual values that we told that to

67
00:04:56,830 --> 00:04:57,310
persist.

68
00:04:57,610 --> 00:05:00,670
Remember, we said, don't persist the actual user.

69
00:05:01,240 --> 00:05:07,690
And through this, we're now able to actually retain the initial state that the user previously had.

70
00:05:08,170 --> 00:05:11,620
If we remove some values and then we refresh again.

71
00:05:13,310 --> 00:05:15,740
We see that we are persisting the same values.

72
00:05:16,770 --> 00:05:22,350
One additional thing you can also add to this Pacific Gate is you can pass a loading value and here

73
00:05:22,380 --> 00:05:24,180
you just renders something.

74
00:05:24,300 --> 00:05:29,130
You can pass it a component or whatever you want when it's trying to determine how long it takes to

75
00:05:29,130 --> 00:05:30,480
actually rehydrate the store.

76
00:05:30,930 --> 00:05:31,980
So if I say no.

77
00:05:32,070 --> 00:05:36,630
Essentially what happens is that it'll render nothing until Persiste is actually finished.

78
00:05:37,600 --> 00:05:38,260
But there we go.

79
00:05:38,530 --> 00:05:46,120
Now we have in local storage and persistence that you can carry your actual state across multiple sessions.

80
00:05:46,720 --> 00:05:51,880
And this is, again, one of the benefits we get out of Redux is that the ecosystem for Redux has a

81
00:05:51,880 --> 00:05:54,340
lot of these solutions and tools already solved.

82
00:05:54,850 --> 00:05:59,350
You most likely want to use Redux when you're building a large application that has really large state

83
00:05:59,350 --> 00:06:00,430
and really complex state.

84
00:06:01,030 --> 00:06:04,810
If you don't need a lot of these optimizations, then just use context.

85
00:06:04,810 --> 00:06:05,750
API is enough.

86
00:06:06,460 --> 00:06:12,370
But now we've migrated the entire application to Redux, and this is pretty much a lot of what you need

87
00:06:12,370 --> 00:06:15,460
in Redux is just these same patterns over and over again.

88
00:06:16,060 --> 00:06:17,920
A lot of practice will go a long way.

89
00:06:18,890 --> 00:06:24,830
So at this point you can continue to learn redux by either building in new features yourself, or you

90
00:06:24,830 --> 00:06:28,850
can try and convert this application back to context.

91
00:06:29,450 --> 00:06:33,770
By doing so, you'll actually think about these mappings and all of these different logical decisions

92
00:06:33,770 --> 00:06:36,710
that we made in order to architect the application this way.

93
00:06:37,720 --> 00:06:39,550
So there's a lot of different ways that you can learn.

94
00:06:39,580 --> 00:06:41,660
Again, practice always makes perfect.

95
00:06:41,680 --> 00:06:44,950
But now that you're armed with the knowledge, at least you'll know what to do.

96
00:06:45,490 --> 00:06:50,200
Redux is one of those things that naturally, again, has a steep learning curve that will only get

97
00:06:50,200 --> 00:06:52,120
easier the more you practice.

98
00:06:52,900 --> 00:06:53,440
But that's it.

99
00:06:53,830 --> 00:06:56,770
We have in our Redux process, we have Redux.

100
00:06:57,310 --> 00:07:03,160
And now you have seen what it takes in order to set up Redux as your state management service inside

101
00:07:03,160 --> 00:07:04,270
of a React application.
