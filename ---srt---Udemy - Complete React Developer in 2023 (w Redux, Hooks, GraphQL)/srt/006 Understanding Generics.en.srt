1
00:00:00,720 --> 00:00:01,590
Welcome back, everyone.

2
00:00:02,280 --> 00:00:06,870
So now that we've typed out our search box, let's type out our objects.

3
00:00:07,620 --> 00:00:10,490
Our object contains the bulk of our logic and code.

4
00:00:10,500 --> 00:00:14,970
So this is probably going to require a lot of typing because we have so many things to find.

5
00:00:15,780 --> 00:00:20,620
The first step is always to rename this from J.S. to T.S..

6
00:00:20,670 --> 00:00:22,800
Whatever it is before, name to the new one.

7
00:00:23,550 --> 00:00:29,840
Now here, one thing I want to mention is that this is indeed gsx, so we can even update this to TSX

8
00:00:29,940 --> 00:00:30,840
to be more explicit.

9
00:00:31,290 --> 00:00:38,160
The reason it works even with dogs, is because under the Hood React app has set up BABBEL so that even

10
00:00:38,160 --> 00:00:43,980
if it's J.S., it will attempt to use Gsx if it needs to, if it realizes that you're trying to return

11
00:00:43,980 --> 00:00:44,850
gsx elements.

12
00:00:45,240 --> 00:00:49,590
That's just one of the advantages of using create backed up so that our code gets registered even if

13
00:00:49,590 --> 00:00:52,230
we're not using the correct file function type.

14
00:00:53,070 --> 00:00:57,990
So inside, one thing I want you to notice right out of the gate.

15
00:00:58,970 --> 00:01:04,730
We do see that there are a bunch of highlights about where our errors are.

16
00:01:06,570 --> 00:01:11,910
There's going to be a process oftentimes when migrating an application where the moment you switch your

17
00:01:11,910 --> 00:01:15,150
files over to TypeScript, you will see a bunch of errors.

18
00:01:15,870 --> 00:01:21,120
This is actually a good thing because through these errors you're able to now figure out what you need

19
00:01:21,120 --> 00:01:23,060
to type in order for your code to work.

20
00:01:24,220 --> 00:01:25,210
So first things first.

21
00:01:25,210 --> 00:01:27,070
There's a couple things we need to think about.

22
00:01:28,580 --> 00:01:34,880
Chances are the most critical part of our application that needs to be typed is going to be the data

23
00:01:34,880 --> 00:01:35,990
that we receive.

24
00:01:36,530 --> 00:01:39,080
The data that we receive is from this fetch.

25
00:01:39,590 --> 00:01:46,430
But the thing about this is that we don't actually know what it is that we're getting back from this

26
00:01:46,430 --> 00:01:46,820
fetch.

27
00:01:47,480 --> 00:01:49,520
We know the shape of the object.

28
00:01:49,520 --> 00:01:52,640
If we literally go to this URL and we check it out.

29
00:01:53,540 --> 00:01:54,470
So if we come here.

30
00:01:56,040 --> 00:01:56,760
And paste it in.

31
00:01:57,830 --> 00:02:00,680
We do see that this will be the shape.

32
00:02:01,770 --> 00:02:06,510
But the problem is that we're not getting this from the actual API that we're calling.

33
00:02:06,720 --> 00:02:08,940
There's no third party library that's giving us this type.

34
00:02:09,510 --> 00:02:15,660
If we were to type this ourselves, now we're creating a connection between our application and this

35
00:02:15,660 --> 00:02:16,200
website.

36
00:02:16,680 --> 00:02:18,480
They might update these values.

37
00:02:18,660 --> 00:02:20,010
We would have no idea.

38
00:02:20,020 --> 00:02:22,950
And if our application is in, production were suddenly going to break.

39
00:02:23,730 --> 00:02:28,620
So what we want to do is figure out a way to defend ourselves from these changes as best as we can.

40
00:02:30,090 --> 00:02:33,480
What you want to do here is you do want to type this up somehow.

41
00:02:34,200 --> 00:02:41,070
Instead of just assuming we're going to get anything, we are doing some type of, say, transformation

42
00:02:41,070 --> 00:02:46,620
in order for us to actually be able to ensure that we have the correct values, at least if they're

43
00:02:46,620 --> 00:02:47,820
there for us.

44
00:02:47,820 --> 00:02:54,120
For example, we mainly know that we're only using name, and if I remember correctly, we're just using

45
00:02:54,150 --> 00:02:56,430
email and the ID.

46
00:02:56,700 --> 00:03:01,830
Those are the only three variables that we need from this object that we're getting back.

47
00:03:02,780 --> 00:03:04,910
In order for us to type this fetch.

48
00:03:05,450 --> 00:03:09,320
The easiest way is to actually create a utility function.

49
00:03:09,890 --> 00:03:15,050
So as we know, we want to make a utility folder following our best practices.

50
00:03:15,710 --> 00:03:23,690
And inside of here, we can create a new file and we can call it fetch, utils or data.

51
00:03:25,230 --> 00:03:26,280
Because we're getting data.

52
00:03:26,970 --> 00:03:32,190
And here actually let's make this a test file because we know we want to use TypeScript from now on.

53
00:03:33,800 --> 00:03:34,220
Here.

54
00:03:34,400 --> 00:03:41,510
What we're going to say is that I want to create some kind of generic gender function.

55
00:03:41,960 --> 00:03:43,700
So this is some get data function.

56
00:03:44,540 --> 00:03:48,040
What it does is that it is a async function.

57
00:03:48,050 --> 00:03:52,070
So I'm going to define just the function first before we actually start typing this.

58
00:03:53,210 --> 00:03:56,950
And what it will do is it's going to get some response back.

59
00:03:58,410 --> 00:04:01,590
This response is going to come from us calling fetch.

60
00:04:02,830 --> 00:04:04,990
On some you are all value.

61
00:04:05,500 --> 00:04:07,660
So we can say path or we can say you are a.

62
00:04:10,570 --> 00:04:17,440
What we do then is we return this response, but we convert it to JSON because when we get it back,

63
00:04:17,440 --> 00:04:21,820
it's not going to be in the JSON format and we want to have it in the JSON format.

64
00:04:23,170 --> 00:04:31,300
This means that this function that we export out of here is going to receive some type of string as

65
00:04:31,300 --> 00:04:31,920
the URL.

66
00:04:31,930 --> 00:04:32,980
So for the type this.

67
00:04:33,880 --> 00:04:36,370
But what does this function actually return?

68
00:04:37,810 --> 00:04:41,800
This is where we need to explicitly tell what we're returning back.

69
00:04:42,780 --> 00:04:47,100
So earlier we saw what a function definition looks like if we were to define the function type.

70
00:04:47,100 --> 00:04:49,470
But here what you can do as well.

71
00:04:49,470 --> 00:04:54,660
When you write out a function like this, you don't actually need to put the fat arrow.

72
00:04:55,320 --> 00:05:00,240
You can just say, okay, in the parameters, I'm going to directly define the types.

73
00:05:00,780 --> 00:05:06,870
And then in order for me to tell what gets returned back from this function, what type is getting returned,

74
00:05:07,110 --> 00:05:11,040
you can get colon here and then here you just put the return type.

75
00:05:12,840 --> 00:05:16,950
What we're returning back is going to be an A wait.

76
00:05:17,490 --> 00:05:19,920
If you return in a way, you're actually returning back.

77
00:05:19,920 --> 00:05:22,570
A promise and a promise.

78
00:05:22,920 --> 00:05:28,530
Just like we saw before with our change event receives a parameter because it needs to know what's the

79
00:05:28,530 --> 00:05:33,750
type that you're going to give me, that I'm going to return as the actual resolved value from this

80
00:05:33,750 --> 00:05:34,290
promise.

81
00:05:35,310 --> 00:05:38,760
This is where you can use a generic because it can be anything.

82
00:05:38,760 --> 00:05:40,140
We don't know what we're getting back.

83
00:05:40,530 --> 00:05:44,670
This response value does not have a type we don't know at this point.

84
00:05:45,420 --> 00:05:51,420
But what we do know is that probably when we call get data, we ourselves are probably going to know

85
00:05:51,780 --> 00:05:53,860
what you are, all we're passing to it.

86
00:05:53,880 --> 00:06:00,420
So in turn, we probably have an idea as the coder what the actual type that this URL is getting back

87
00:06:00,420 --> 00:06:02,640
is going to be because this is a generic function.

88
00:06:02,880 --> 00:06:09,660
It can call fetch on Google API, it can call fetch on the actual JSON placeholder, it can call it

89
00:06:09,660 --> 00:06:11,260
on an Amazon link.

90
00:06:11,280 --> 00:06:14,100
We don't know what we're calling fetch from inside of the function.

91
00:06:14,100 --> 00:06:15,720
The function itself has no idea.

92
00:06:16,020 --> 00:06:18,690
So as a result, we need to define to it what this will be.

93
00:06:19,170 --> 00:06:25,560
But when we call the get data because we are passing in the URL, we know very likely what we're going

94
00:06:25,560 --> 00:06:26,190
to get back.

95
00:06:26,580 --> 00:06:31,890
So as a result, this is where we have to actually say, hey, I know what this promise is going to

96
00:06:31,890 --> 00:06:33,270
be, let me tell you.

97
00:06:33,780 --> 00:06:39,450
And the way you do that is you use a generic and as I mentioned, with a generic, it's essentially

98
00:06:39,450 --> 00:06:46,530
a type parameter that can be used throughout the rest of this function inside of its definitions for

99
00:06:46,530 --> 00:06:47,010
types.

100
00:06:47,850 --> 00:06:51,900
So what we're going to say is that I'm going to pass you some parameter t.

101
00:06:52,620 --> 00:06:57,810
T typically is the starting type, so it's like TSR, etc..

102
00:06:58,720 --> 00:07:01,450
Those are the parameter names that are most frequently used.

103
00:07:01,810 --> 00:07:07,060
So here we're going to say, okay, let me give you some type T and this is what you're going to pass

104
00:07:07,060 --> 00:07:07,990
into the promise.

105
00:07:09,510 --> 00:07:16,500
So doing this now, we're essentially saying, okay, get data is going to receive some type T, this

106
00:07:16,500 --> 00:07:21,930
type T is what you're going to return from this function inside of a promise.

107
00:07:22,710 --> 00:07:28,920
And now if we were to use this, remember, we need to pass as some type T, we first need to import

108
00:07:28,920 --> 00:07:31,230
in the actual get data.

109
00:07:32,690 --> 00:07:36,530
From our utils folder data utils.

110
00:07:37,740 --> 00:07:44,670
And then what we can do is actually call get data and get the appropriate value.

111
00:07:45,120 --> 00:07:51,030
So inside of use effect, instead of using fetch like this, what we're going to do is we are going

112
00:07:51,030 --> 00:07:52,380
to now create.

113
00:07:53,840 --> 00:07:55,340
A new async function.

114
00:07:56,620 --> 00:07:58,000
Called fat users.

115
00:07:59,980 --> 00:08:01,360
Which is going to be.

116
00:08:03,060 --> 00:08:04,890
Again, an asynchronous function.

117
00:08:08,320 --> 00:08:13,390
That will actually retrieve these users and then set it inside of the Monster's Array.

118
00:08:14,550 --> 00:08:15,690
So let's talk about how to do that.

119
00:08:16,230 --> 00:08:22,710
So first we know that we get back the users from us calling our get data.

120
00:08:24,420 --> 00:08:27,210
We're calling it data with this URL.

121
00:08:29,680 --> 00:08:31,930
But here we need to define.

122
00:08:33,070 --> 00:08:39,220
What the actual type that we're getting is going to be, because right now, users, we don't actually

123
00:08:39,220 --> 00:08:41,560
know, which is why we're saying it's unknown.

124
00:08:41,560 --> 00:08:42,820
It's an unknown type.

125
00:08:43,210 --> 00:08:45,130
We don't know what the type that we're going to get is.

126
00:08:45,130 --> 00:08:46,360
We haven't defined it yet.

127
00:08:46,390 --> 00:08:49,150
We have to pass it in, as I mentioned, as a generic.

128
00:08:50,150 --> 00:08:53,690
What we know is that we have, again, those three values we want.

129
00:08:54,380 --> 00:08:59,300
So we can say this type is going to be of type monster.

130
00:09:00,140 --> 00:09:05,630
This monster has an ID, which is a string, has a name, which is a string and has an email, which

131
00:09:05,630 --> 00:09:06,110
is a string.

132
00:09:06,680 --> 00:09:12,350
And we know this because we were earlier referencing the actual values inside of the website itself

133
00:09:12,350 --> 00:09:15,170
when we were looking at the fetch and we were looking at the JSON object.

134
00:09:16,220 --> 00:09:20,120
So here with this type monster, we know that we're getting it back as an array.

135
00:09:20,630 --> 00:09:26,200
So what we can say is that let me pass to you what this generic is going to be.

136
00:09:26,210 --> 00:09:28,670
It's going to be a monster, but it's in an array.

137
00:09:29,180 --> 00:09:34,640
So the way that you can define array is you can put these square brackets after the type or you can

138
00:09:34,640 --> 00:09:36,380
say array like this.

139
00:09:40,140 --> 00:09:41,190
And this also works.

140
00:09:41,790 --> 00:09:45,060
This also defines an interface of type array.

141
00:09:45,870 --> 00:09:52,350
So again, if you look at this, you see interface array with the t t being the generic monster is what

142
00:09:52,350 --> 00:09:52,870
it contains.

143
00:09:52,890 --> 00:09:54,420
So it's an array of monsters.

144
00:09:54,810 --> 00:09:56,280
But this is long and lengthy.

145
00:09:56,880 --> 00:09:59,610
I prefer using just this.

146
00:10:00,740 --> 00:10:01,850
Square bracket definition.

147
00:10:01,970 --> 00:10:04,550
And now we also know this is an array of monsters.

148
00:10:05,330 --> 00:10:11,150
So now what's going to happen is that if you hover over, get data, you'll notice that it has our type

149
00:10:11,150 --> 00:10:11,690
definition.

150
00:10:12,350 --> 00:10:18,260
We are saying that this is a get data where we receive the monster array as the generic.

151
00:10:18,980 --> 00:10:23,450
Then what it returns back is a promise of the monster array.

152
00:10:23,720 --> 00:10:27,980
Notice how it took the generic and it passed it into the promise as the value.

153
00:10:28,760 --> 00:10:30,620
This is how you can use these generics.

154
00:10:30,620 --> 00:10:39,050
And now we know for sure that users is a monsters array because using type inference, TSX is able to

155
00:10:39,050 --> 00:10:42,980
know, Oh, if I await this, get data, I'm going to definitely get back.

156
00:10:42,980 --> 00:10:48,980
A promise with an resolved value of a monster's array away is going to resolve that value cast as the

157
00:10:48,980 --> 00:10:49,370
user.

158
00:10:49,370 --> 00:10:55,610
So of course you're going to get an array of monsters and now users is explicitly typed to a monster's

159
00:10:55,610 --> 00:10:57,050
array, which is what it's expecting.

160
00:10:57,320 --> 00:11:00,260
And just like that, now we have type safety.

161
00:11:02,180 --> 00:11:03,230
Now moving forward.

162
00:11:03,230 --> 00:11:09,830
What we also need to do is we need to set inside of our you states this monsters array.

163
00:11:10,430 --> 00:11:11,630
But this is not typed either.

164
00:11:12,170 --> 00:11:16,400
So what we're going to do in the next video is we type out what this will be.

165
00:11:16,880 --> 00:11:19,220
So join me in the next video and let's type out you state.
