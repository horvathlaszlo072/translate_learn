1
00:00:00,210 --> 00:00:01,470
Welcome back, everyone.

2
00:00:02,190 --> 00:00:08,400
In the last few lessons, we watched Andre explain to us all of the key things required in order for

3
00:00:08,400 --> 00:00:12,150
our application to be considered a progressive Web app.

4
00:00:12,730 --> 00:00:16,740
Now, luckily for us, our application is built with Create React app.

5
00:00:16,740 --> 00:00:22,350
And as Andre explained, it's incredibly easy because Create React app has pretty much given us all

6
00:00:22,350 --> 00:00:29,270
of the tools required in order to adhere to those principles that make an application a P a.

7
00:00:30,180 --> 00:00:35,940
Now, in order for us to actually do this, there's a couple things we have to first tweak about our

8
00:00:35,940 --> 00:00:39,330
application a little bit beyond what Andre explained.

9
00:00:39,420 --> 00:00:43,620
The reason for this is because we're also running an express server, but we'll get to that.

10
00:00:44,010 --> 00:00:49,650
The first thing that we do need to do inside of our index is bring back that service worker.

11
00:00:49,960 --> 00:00:55,830
What we're going to do is we're just going to say import and then we'll use that wildcard, the star

12
00:00:55,830 --> 00:00:57,870
symbol, to say everything.

13
00:00:57,870 --> 00:01:04,560
I want to import everything as the content service worker from the service worker file.

14
00:01:05,750 --> 00:01:10,760
So now that we have a service worker code, we're just going to say service worker register at the bottom,

15
00:01:11,240 --> 00:01:17,300
which will register the service worker inside of our application, and that completely verifies the

16
00:01:17,300 --> 00:01:19,610
service worker requirement for a.

17
00:01:20,740 --> 00:01:27,340
The other thing to remember, though, is that because we're using an express server, whenever a application

18
00:01:27,340 --> 00:01:32,140
tries to load the service worker, it's going to be looking for a service worker file.

19
00:01:32,620 --> 00:01:39,220
So what we have to do in our server is that whenever and the app makes a get request for service worker,

20
00:01:39,550 --> 00:01:42,560
yes, we will give them that service worker file.

21
00:01:43,120 --> 00:01:46,900
So inside of our server jass, we're going to do one thing.

22
00:01:48,070 --> 00:01:55,630
We're going to add inside of here a new app to get call and we're going to say if they're ever requesting

23
00:01:55,640 --> 00:01:57,610
service worker James.

24
00:01:58,570 --> 00:02:02,410
Then with the request and the response as the function.

25
00:02:03,970 --> 00:02:11,020
We are going to say that with the response, we're going to send the file path resolve.

26
00:02:12,200 --> 00:02:13,490
Our directory name.

27
00:02:16,620 --> 00:02:23,640
Combined with this dot dot, meaning that we want to go up one because we were inside of our clients.

28
00:02:24,600 --> 00:02:26,760
We want to go to our build folder.

29
00:02:27,830 --> 00:02:30,530
And then we want to pass it, the service worker.

30
00:02:35,210 --> 00:02:40,190
So that's all we're trying to do, we're just saying whenever an application requests our application

31
00:02:40,190 --> 00:02:44,930
to provide something from this route, we're just going to go into our build folder, get the service

32
00:02:44,930 --> 00:02:47,650
worker, Jaspal, and that's what we'll render and return.

33
00:02:48,530 --> 00:02:52,860
So that's all we need in order to add our service worker into our application.

34
00:02:53,570 --> 00:03:00,170
The next thing that we have to do is we have to ensure that our applications manifest is up to date

35
00:03:00,170 --> 00:03:01,670
with the icons that are required.

36
00:03:02,510 --> 00:03:08,660
We also can change some of the names here because our application is going to actually render this name

37
00:03:08,660 --> 00:03:15,890
or the short name in a mobile browser when we try and open it, after we've downloaded it into our mobile

38
00:03:15,890 --> 00:03:18,500
device as a progressive Web application.

39
00:03:19,150 --> 00:03:21,480
So how we'll do that is we can just name this whatever we want.

40
00:03:21,890 --> 00:03:24,230
I'm just going to call this one Crown Clothing.

41
00:03:26,810 --> 00:03:33,530
With a capital S. and the long name, maybe I'll say something like Crown Clothing by Baiba.

42
00:03:35,410 --> 00:03:40,620
So luckily for us, create react that generates us this Phalcon and it gives us the sizes that we need.

43
00:03:40,630 --> 00:03:44,050
And if you remember, I did give you a Fabricant Ekko.

44
00:03:44,230 --> 00:03:49,590
This babakhan is good enough to replace all of these image sizes inside of our manifest.

45
00:03:49,810 --> 00:03:50,780
So this one is fine.

46
00:03:51,250 --> 00:03:58,000
The only other thing we need to add is two more pages that are the sizes for the Android's splash,

47
00:03:58,000 --> 00:04:02,350
as well as a one nine Chubais one nine two version that Android also needs.

48
00:04:03,040 --> 00:04:08,680
So what we can do is just import them in from the resources folder because I will provide both of those

49
00:04:08,680 --> 00:04:09,180
for you.

50
00:04:09,940 --> 00:04:13,120
So simply just drag them into your public folder.

51
00:04:13,690 --> 00:04:17,880
And what we'll do is create two new objects inside of our icons array.

52
00:04:19,390 --> 00:04:25,720
The first one is going to just point to the source exactly like the same format we see with our Phalcon

53
00:04:25,720 --> 00:04:34,540
Icko above, there was a crown five, 12 times, five, 12 Panji, which is the name of this file.

54
00:04:36,170 --> 00:04:39,560
Four sizes, well, just say five, 12 by five, 12.

55
00:04:42,830 --> 00:04:46,430
And for type, we just got to say it is image.

56
00:04:49,390 --> 00:04:57,460
You can actually copy this text pasted in here and just change the instances of five 12 to one ninety

57
00:04:57,460 --> 00:04:57,790
to.

58
00:04:59,620 --> 00:05:05,200
And that's all we need for our manifest, we have to the names and we updated the icons, the last thing

59
00:05:05,200 --> 00:05:07,760
we have to do is https.

60
00:05:08,590 --> 00:05:12,850
As you remember, we're hosting on Heroku and Hiroku by default does give us.

61
00:05:14,380 --> 00:05:22,810
The only thing to note is that we do need to redirect any HTP request over to meaning that if anybody

62
00:05:22,810 --> 00:05:29,200
requests our application using HTTP, we should automatically redirect them over to https.

63
00:05:29,650 --> 00:05:34,020
Typically when you have a server, you do do this on the hosting server.

64
00:05:34,540 --> 00:05:37,570
Now, Hiroku does not have this option for us.

65
00:05:37,570 --> 00:05:42,460
They have us do it inside of the application, but they do provide us with some links about what the

66
00:05:42,460 --> 00:05:44,470
best libraries to use are.

67
00:05:44,800 --> 00:05:47,440
I'm going to provide you with the one that I think is best.

68
00:05:47,980 --> 00:05:51,520
The one that I like to use is called Express Alfy.

69
00:05:51,880 --> 00:05:53,140
So that's what we're going to do.

70
00:05:53,890 --> 00:05:59,680
So in order to add it into our application, what we're going to do is we are just going to install

71
00:05:59,680 --> 00:05:59,860
that.

72
00:05:59,870 --> 00:06:01,030
And so I'm going to use yarn.

73
00:06:01,030 --> 00:06:10,110
And if you're using NPM, of course just use NPM, but I'll say yarn and express dash ssl i f y asus

74
00:06:10,120 --> 00:06:10,660
alphie.

75
00:06:11,500 --> 00:06:16,600
Once this is finished installing, we're just going to go back into our server jass.

76
00:06:17,830 --> 00:06:23,560
And add this new line, so first of all, we're going to bring in is inforce.

77
00:06:24,810 --> 00:06:30,630
Which is what we're going to call what we get back from Xpress SS Elfy.

78
00:06:32,090 --> 00:06:37,490
In order for us to use it, we just simply call use where we do all of our use statements.

79
00:06:37,880 --> 00:06:40,610
So down here we can just say Apte use.

80
00:06:42,170 --> 00:06:42,950
Inforce.

81
00:06:44,730 --> 00:06:45,510
TB's.

82
00:06:47,050 --> 00:06:51,310
And then we're also going to pass at this object that says Trust Proteau Heter.

83
00:06:52,700 --> 00:06:53,390
Gosta, true.

84
00:06:55,400 --> 00:07:00,460
The reason we need to do this is because with Heroku, Hiroku runs what's called a reverse proxy.

85
00:07:01,100 --> 00:07:07,710
Now a reverse proxy is something that allows us to forward unencrypted HTP traffic to the website.

86
00:07:08,060 --> 00:07:12,950
So this is really difficult because inside of Hiroku, it's going to hide away the headers that originally

87
00:07:12,950 --> 00:07:16,880
would tell our application whether or not it's coming from an IP request.

88
00:07:17,480 --> 00:07:21,700
But luckily for us, there is this Proteau header property that they append on it as well.

89
00:07:22,190 --> 00:07:27,860
So as you can actually read right here, I'm actually realizing that what I explained was inside of

90
00:07:27,860 --> 00:07:31,020
this block of text here, it's just something we've got to do with Hiroku.

91
00:07:31,340 --> 00:07:35,060
So with that, we're now able to enforce our https.

92
00:07:35,450 --> 00:07:37,010
So these are all the changes we need.

93
00:07:37,980 --> 00:07:41,790
So what we're going to do is just simply get at everything in.

94
00:07:42,800 --> 00:07:49,280
Get commit updating our code to be a compliant, let's say, added service worker.

95
00:07:50,650 --> 00:07:51,880
HTTPS.

96
00:07:52,920 --> 00:07:55,080
As well as updated manifest.

97
00:07:57,940 --> 00:08:01,630
And then we're just going to run get push Hiroku M..

98
00:08:02,920 --> 00:08:09,700
And in case your application is out of sync with any of the get repos that you've got so far with your

99
00:08:09,700 --> 00:08:15,370
Hiroku because maybe you closed down my project or something, you can just force your existing Heroku

100
00:08:15,370 --> 00:08:16,540
application to switch over.

101
00:08:20,110 --> 00:08:23,590
OK, now that we finished building, let's actually see our application.

102
00:08:25,670 --> 00:08:27,350
So we're just going to run Hiroku open.

103
00:08:29,350 --> 00:08:34,210
Now, your application may take a little longer because the dynamite need to be spun up, but mine is

104
00:08:34,210 --> 00:08:34,810
already life.

105
00:08:35,590 --> 00:08:42,730
So what we're going to do now is we are going to run an audit to make sure that our application is progressively

106
00:08:43,510 --> 00:08:44,070
compliant.

107
00:08:44,770 --> 00:08:49,720
So to check this, just go to your audits tab if you're in Chrome, because by default, LightHouse's

108
00:08:49,720 --> 00:08:50,950
is actually brought into it.

109
00:08:51,640 --> 00:08:54,520
And here you're going to select the desktop.

110
00:08:55,120 --> 00:08:59,770
Let's actually pop this up just because we want to look at everything.

111
00:09:00,800 --> 00:09:07,070
So we want to choose desktop, we want to audit performance, progressive web app and best practices

112
00:09:07,070 --> 00:09:07,740
accessibility.

113
00:09:07,760 --> 00:09:12,950
Nescio is not important because that's not the focus of this course we're going to set no throttling

114
00:09:13,460 --> 00:09:15,150
and clear storage is perfectly fine.

115
00:09:15,860 --> 00:09:17,900
So we're just going to run the audit itself.

116
00:09:18,950 --> 00:09:20,480
And this might take a couple of seconds.

117
00:09:24,780 --> 00:09:29,940
And there we go, we got our scores, so we'll see that we have one performance, we have ninety three

118
00:09:29,940 --> 00:09:33,590
for best practices and we are progressive Web app compliant.

119
00:09:34,020 --> 00:09:39,690
So if we scroll down here, we see that we have gotten a checkmark for every single one of our sections

120
00:09:39,900 --> 00:09:42,210
and we're now a optimize.

121
00:09:42,660 --> 00:09:46,910
You can actually check this application inside of your phone.

122
00:09:47,850 --> 00:09:53,460
Now, unfortunately, since the making of this course that adds a home page button is no longer available

123
00:09:53,460 --> 00:09:56,400
inside of your Chrome browser on your desktop.

124
00:09:56,400 --> 00:10:03,660
But if you have a mobile device, simply go to the link that is your Heroku app, or you can go to mine

125
00:10:03,990 --> 00:10:07,380
and you will get a little tap at the bottom that asks you to add it to your home page.

126
00:10:07,590 --> 00:10:12,840
If you click that, you'll add our application using our Fabricant to your home page and you can open

127
00:10:12,840 --> 00:10:17,280
it and browse it like you would a native application, which is what's really, really cool.

128
00:10:18,060 --> 00:10:21,030
So that's one great thing about create react app.

129
00:10:21,030 --> 00:10:25,830
And the way that we've set up our project is that we're able to get progressive web application level

130
00:10:25,830 --> 00:10:28,560
compliancy so quickly and so easily.

131
00:10:28,830 --> 00:10:34,440
Hopefully you enjoyed the section on converting our application over to a PWI a check it out on your

132
00:10:34,440 --> 00:10:38,910
mobile device because it's really cool to see for the first time with that.

133
00:10:39,030 --> 00:10:40,980
That ends our section on progressive web apps.

134
00:10:41,370 --> 00:10:42,810
And I'll see you in the next lesson.
