1
00:00:00,480 --> 00:00:04,050
OK, now let's talk about includes.

2
00:00:04,980 --> 00:00:10,860
Now, includes is a little different from the way that we've been writing the other Arae methods that

3
00:00:10,860 --> 00:00:17,670
we've covered so far includes is essentially a method that takes a single argument.

4
00:00:17,820 --> 00:00:21,540
And that argument will be any element that we want.

5
00:00:21,990 --> 00:00:28,680
And what it does is it checks inside the array to see if the element that we pass that exists in our

6
00:00:28,680 --> 00:00:29,020
array.

7
00:00:29,790 --> 00:00:31,050
So let's try this out.

8
00:00:32,520 --> 00:00:35,910
Well, let's first make our array, which is equal.

9
00:00:37,350 --> 00:00:40,350
Two, let's say one, two, three, four or five.

10
00:00:41,470 --> 00:00:44,380
If we do, Meyera includes.

11
00:00:47,050 --> 00:00:47,530
Three.

12
00:00:48,690 --> 00:00:52,900
Well, see that it's true because three does exist in our.

13
00:00:54,060 --> 00:01:00,840
Now, if we were to say try something like nine, then we will get false, because nine is clearly not

14
00:01:00,840 --> 00:01:01,690
inside of our.

15
00:01:02,430 --> 00:01:09,910
The second argument we could take in are includes is the index in which we want to start searching.

16
00:01:10,650 --> 00:01:12,210
So what do I mean by this?

17
00:01:12,870 --> 00:01:21,270
Well, our array is actually indexed from our first element to its last element, starting from zero

18
00:01:21,450 --> 00:01:23,340
and counting up by one.

19
00:01:24,030 --> 00:01:27,630
So one is our array element at index zero.

20
00:01:28,170 --> 00:01:31,200
Two is our element at index one.

21
00:01:31,830 --> 00:01:34,920
Now I know what this example, maybe it's a little confusing.

22
00:01:35,460 --> 00:01:38,270
So let's do another array.

23
00:01:38,280 --> 00:01:44,100
Let's use const newera equals these three objects while new array.

24
00:01:45,490 --> 00:01:50,740
At index zero is our first element, right, our first object is one.

25
00:01:51,960 --> 00:01:58,320
Element at index two is our last one, because this is zero, this is one, and this is two.

26
00:01:59,380 --> 00:02:07,330
One thing to keep in mind with using includes and our second argument, let's say in our original example

27
00:02:07,330 --> 00:02:08,110
with Meyera.

28
00:02:09,120 --> 00:02:10,320
We wanted to see.

29
00:02:11,900 --> 00:02:16,880
If the number two exists starting from our third.

30
00:02:18,070 --> 00:02:26,170
Index, this means that it's starting from for it's going to check if four includes our two, it doesn't

31
00:02:26,200 --> 00:02:29,140
or a five has our two, which it doesn't.

32
00:02:29,830 --> 00:02:32,200
So here we'll see that we won't get false.

33
00:02:33,890 --> 00:02:34,910
So essentially.

34
00:02:36,010 --> 00:02:42,520
If we were to try this, except instead we were to start from our second index, well, we'll find that

35
00:02:42,520 --> 00:02:43,090
it's true.

36
00:02:44,250 --> 00:02:50,760
Because starting from two, it'll see that two is included, starting from this part of the array onwards.

37
00:02:52,060 --> 00:02:59,500
But this is essentially how it works with includes when it comes to using what are called primitive

38
00:02:59,500 --> 00:02:59,950
types.

39
00:03:00,970 --> 00:03:06,760
Now, I'm going to explain what those are, but first I'm going to show you why this is important.

40
00:03:08,230 --> 00:03:15,840
If with our new array, let's say, for example, we wanted to find our second object with ID too,

41
00:03:16,690 --> 00:03:23,260
if I did a new array includes and then I tried to find the object with ID to.

42
00:03:25,180 --> 00:03:32,140
Well, we'll get false, but why is that, even though this object looks exactly like the element that

43
00:03:32,140 --> 00:03:33,900
does exist inside our array?

44
00:03:34,360 --> 00:03:35,890
Why would we get false?

45
00:03:36,580 --> 00:03:44,260
Well, this is because of the way that JavaScript references objects versus primitive types.

46
00:03:44,980 --> 00:03:46,360
Now, what are primitive types?

47
00:03:46,690 --> 00:03:49,180
Well, let's actually look at this diagram here.

48
00:03:50,240 --> 00:03:57,470
In this diagram, imagine there's a memory bank and this is internal to JavaScript inside this memory

49
00:03:57,470 --> 00:04:04,450
bank, JavaScript has a reference to every primitive type and there are six of them.

50
00:04:04,850 --> 00:04:10,880
There are strings, strings being anything that we see between quotation marks.

51
00:04:11,390 --> 00:04:14,600
So this is a string, is a string.

52
00:04:16,720 --> 00:04:26,890
Boulin is true or false, nul is the null object, undefined is also undefined, a unique primitive

53
00:04:26,890 --> 00:04:28,650
type numbers.

54
00:04:28,780 --> 00:04:32,410
So this is any integer, so that's a whole number.

55
00:04:33,480 --> 00:04:38,580
And also any float, so any decimal number, these are also all primitive types that fall under the

56
00:04:38,580 --> 00:04:46,230
category of number and symbol, which is a bit more complicated, but it's essentially a unique thing.

57
00:04:47,220 --> 00:04:52,590
We don't really want to go too deeply into symbol because we're not really going to use it, but these

58
00:04:52,590 --> 00:05:00,150
are the six primitive types and these primitive types all exist inside of JavaScript Memory Bank.

59
00:05:01,580 --> 00:05:09,830
Now, when we set a constant or a variable equal to a primitive type like, say, the number three,

60
00:05:10,610 --> 00:05:17,780
what JavaScript is doing, is it setting it's creating this new variable that we want called A and it's

61
00:05:17,780 --> 00:05:23,300
pointing its value to the number three in its memory.

62
00:05:24,880 --> 00:05:28,900
So it's actually pointing to three in memory.

63
00:05:31,710 --> 00:05:33,690
When we set variable B.

64
00:05:34,910 --> 00:05:41,210
To three, it does the same thing, it creates this new variable called B, and then it also points

65
00:05:41,210 --> 00:05:45,260
to the same three points to three in memory.

66
00:05:47,250 --> 00:05:49,770
If we set variable C to be.

67
00:05:51,020 --> 00:06:00,680
It's actually not pointing to our value of B. Instead it points to B, which then points to our value

68
00:06:00,680 --> 00:06:02,180
in memory of three.

69
00:06:03,500 --> 00:06:09,170
If we were to see this in action, let's say we did var B equals three.

70
00:06:10,990 --> 00:06:13,120
And Vassy equals B.

71
00:06:14,770 --> 00:06:21,100
If we look at sea, we'll see that the number is pointing to three, if we changed be to five.

72
00:06:23,480 --> 00:06:27,620
BP is now pointing to the value and memory of five, right?

73
00:06:28,860 --> 00:06:35,820
It's not really setting a value, it's we're we're saying that our value of B wants to point to the

74
00:06:36,090 --> 00:06:42,000
five that's in JavaScript memory, but C is still pointing to three.

75
00:06:42,870 --> 00:06:46,380
So C is not always going to equal whatever B becomes.

76
00:06:46,710 --> 00:06:52,500
C will only point to the value that B pointed to when we set it.

77
00:06:53,650 --> 00:06:57,370
Why was it that this didn't work well inside of JavaScript?

78
00:06:57,700 --> 00:07:06,880
Anything that's not a primitive type so not any of these six types is called an object and an object

79
00:07:06,880 --> 00:07:07,950
is unique.

80
00:07:08,530 --> 00:07:15,040
Whenever an object gets instantiated, it gets its own unique reference in memory.

81
00:07:15,430 --> 00:07:18,540
Now, before we explore this, what is an object?

82
00:07:18,580 --> 00:07:24,790
Well, everything else in JavaScript that is not one of these six primitive types, as we mentioned,

83
00:07:25,180 --> 00:07:26,080
is an object.

84
00:07:26,080 --> 00:07:26,320
Right.

85
00:07:26,770 --> 00:07:29,650
So arrays are also objects.

86
00:07:29,920 --> 00:07:38,390
And you can essentially just see objects as collections of things that have properties that have values.

87
00:07:39,130 --> 00:07:40,960
So my array.

88
00:07:40,990 --> 00:07:46,930
Right, the arrays that we've created, they all have properties, right.

89
00:07:46,930 --> 00:07:49,060
Because they have these methods on them.

90
00:07:49,390 --> 00:07:54,700
And methods are pretty much just properties that point to functions.

91
00:07:55,480 --> 00:07:58,150
That's why we're able to use them like functions.

92
00:07:58,390 --> 00:08:04,720
But we call them with the dot notation like it's a property on the object.

93
00:08:04,870 --> 00:08:05,190
Right.

94
00:08:05,200 --> 00:08:11,740
And we're used to seeing objects as these curly braces with key value pairs inside them.

95
00:08:12,190 --> 00:08:15,820
Well, you can pretty much see that as everything else in JavaScript.

96
00:08:15,820 --> 00:08:20,520
That is not one of those six primitive types that we're talking about now.

97
00:08:20,530 --> 00:08:28,510
Whenever you see an object get instantiated for the first time or for any time, for that matter.

98
00:08:29,610 --> 00:08:37,750
What you're seeing is JavaScript store that object as a brand new reference in memory.

99
00:08:38,310 --> 00:08:39,540
So what do I mean by this?

100
00:08:39,720 --> 00:08:47,970
Well, let's say we made a new const object, one which equals to this object with the idea of one.

101
00:08:49,290 --> 00:08:53,670
This I object gets a new reference in memory.

102
00:08:54,620 --> 00:09:01,070
Even if we were to make a new object to right, let's say we were to point it to a different object,

103
00:09:01,430 --> 00:09:03,170
but it looked the exact same.

104
00:09:04,770 --> 00:09:12,330
This is actually going to be different if we do object, one equals object to it's going to give us

105
00:09:12,330 --> 00:09:15,510
false because what JavaScript is comparing.

106
00:09:15,870 --> 00:09:24,570
If the reference in memory is the same, it's not comparing whether or not this value of this object.

107
00:09:25,430 --> 00:09:26,640
Is equal to each other.

108
00:09:26,990 --> 00:09:31,940
It's comparing if they're both pointing to the same place in memory.

109
00:09:32,990 --> 00:09:40,610
This only works if we were to do something like we did earlier when we pointed our value of sea to be,

110
00:09:40,910 --> 00:09:45,590
but instead if we were to say point our consed obj three.

111
00:09:45,620 --> 00:09:45,950
Right.

112
00:09:45,980 --> 00:09:50,030
So this new concept we want to point to object to.

113
00:09:52,630 --> 00:09:59,080
Well, now we'll see that OBJ three is pointing to this object.

114
00:09:59,970 --> 00:10:07,860
Now we can see that because both Object three and Object two are pointing to the same object in memory.

115
00:10:08,740 --> 00:10:15,550
If we do a comparison, we'll see that it's actually true because the reference and memory is the same.

116
00:10:16,510 --> 00:10:23,740
Now, the interesting thing about objects is that if we change the properties on them, if we add them

117
00:10:23,740 --> 00:10:29,510
or or modify them, they'll always point to the same object reference in memory.

118
00:10:30,100 --> 00:10:36,700
So if I were to do object to dot, ID equals 17.

119
00:10:37,720 --> 00:10:47,250
Well, now I object to is it 17, but object three you'll see still points to the same object in memory.

120
00:10:47,950 --> 00:10:57,880
So that would be how we would get our includes to work is we would actually do const O one right equals.

121
00:10:59,010 --> 00:11:06,510
A new object with idea of one constant two is equal to another object with idea of two.

122
00:11:07,590 --> 00:11:12,000
Const 003 is equal to an object with idea three.

123
00:11:13,130 --> 00:11:21,170
And now we'll say consed newest array is equal to or one 02 and 03.

124
00:11:22,490 --> 00:11:30,920
So now if we were to display it, we'll see that inside our array is those three objects that we just

125
00:11:30,920 --> 00:11:41,270
made and now if we do newest array DOT includes and we were to point to let's say, oh, one will find

126
00:11:41,270 --> 00:11:47,120
that it's true because what we're referencing is that pointer in memory.

127
00:11:47,150 --> 00:11:54,830
So even though our array is this array, the elements inside are not new objects, but they're all pointing

128
00:11:54,830 --> 00:12:01,640
to the same elements in memory, which is why when we do the includes, the evaluation is true because

129
00:12:01,640 --> 00:12:04,070
that's essentially what includes is doing under the hood.

130
00:12:04,460 --> 00:12:07,730
It's checking if the reference that we're passing in.

131
00:12:07,820 --> 00:12:08,180
Right.

132
00:12:08,540 --> 00:12:15,690
Is equal to the any of the elements inside by their memory reference.

133
00:12:16,610 --> 00:12:23,870
So this is a bit of a longer lesson because we have to understand this very fundamental thing about

134
00:12:23,900 --> 00:12:32,720
objects and how JavaScript stores things in memory, but also how includes works when comparing and

135
00:12:32,720 --> 00:12:37,300
trying to find if an element exists in the array.

136
00:12:37,940 --> 00:12:43,970
We'll definitely explore these concepts a lot more as we code, and they'll definitely make more sense

137
00:12:43,970 --> 00:12:49,370
why the code we write is structured the way it is based on these rules.
