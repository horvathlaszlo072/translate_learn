1
00:00:00,360 --> 00:00:01,200
Welcome back, everyone.

2
00:00:02,270 --> 00:00:08,270
In this video, we are going to install the net lavishly, which stands for Nullify Command Line Interface.

3
00:00:08,540 --> 00:00:13,010
It's a terminal tool that we can use in order to simulate the net left by environment.

4
00:00:13,010 --> 00:00:18,200
When it comes to building out our application, which also involves allowing us to build up our net

5
00:00:18,200 --> 00:00:21,860
of AI functions so that we can interact with them in a local environment.

6
00:00:22,580 --> 00:00:26,780
Similarly, the net lovi seal is going to take the place of our typical dev server.

7
00:00:26,780 --> 00:00:31,010
So that's what makes it really handy because again, it's simulating our build process for us.

8
00:00:31,550 --> 00:00:36,350
So what you can do is cancel your current build server inside of your terminal.

9
00:00:37,070 --> 00:00:42,680
And what you're going to do is you are going to run AMPM, install Dash G, so we're going to globally

10
00:00:42,680 --> 00:00:47,120
install onto our terminal or into our computer.

11
00:00:47,450 --> 00:00:50,000
The net la lovi dash a lot.

12
00:00:51,290 --> 00:00:52,730
So Wallace is installing.

13
00:00:52,730 --> 00:00:55,850
I'm going to talk a little bit about what this cloud enables us to do.

14
00:00:56,510 --> 00:00:57,340
Using the clay.

15
00:00:57,350 --> 00:01:03,380
You can essentially control as much of the net platform as you want through the net lo fi website UI.

16
00:01:03,770 --> 00:01:07,340
The only difference is that with the CLIA, you can do it all through the command line.

17
00:01:07,850 --> 00:01:12,080
This is useful when you want to run programs that actually perform some of these functions for you.

18
00:01:12,110 --> 00:01:18,050
So if you want to programmatically set variables, update different things on the actual website profile

19
00:01:18,050 --> 00:01:18,560
that you have.

20
00:01:18,590 --> 00:01:20,720
You don't have to go through the interface to do so.

21
00:01:20,720 --> 00:01:22,400
You can do it through the CLIA.

22
00:01:22,430 --> 00:01:28,670
If you are a power user like that, CLIA are very useful for that reason, primarily because they give

23
00:01:28,670 --> 00:01:31,220
power users the ability to do everything they need to.

24
00:01:32,240 --> 00:01:37,130
So here we see that it's done and in order for us to make sure it works, we just run net la fi in our

25
00:01:37,130 --> 00:01:37,730
command line.

26
00:01:38,150 --> 00:01:42,830
What we should see is that there is a list of instructions that we now have access to.

27
00:01:43,490 --> 00:01:46,430
So the primary one that we want to do is first log in.

28
00:01:46,850 --> 00:01:52,850
So if you run a net le fi log in, this will connect your net live easily to your log in instance.

29
00:01:53,240 --> 00:01:59,690
So if you hit this, it will prompt you with whether or not you want to open up the browser to a net

30
00:01:59,690 --> 00:02:00,920
Levi account.

31
00:02:02,470 --> 00:02:02,770
Now.

32
00:02:02,770 --> 00:02:04,450
I, of course, am already logged in.

33
00:02:04,900 --> 00:02:11,080
So what you can do when it prompts you say yes, it'll take you to notify where you are, sign in,

34
00:02:11,320 --> 00:02:13,000
and once you sign in, it'll redirect you.

35
00:02:13,000 --> 00:02:15,220
And now your credentials are linked to your.

36
00:02:15,250 --> 00:02:22,180
Now, if I see a light, once you have the seal, all you need to run is net le fi dev and now or have

37
00:02:22,180 --> 00:02:29,500
it is that it will spin up a development server and build our project the way that you typically would

38
00:02:29,800 --> 00:02:31,230
inside of net lovi.

39
00:02:31,270 --> 00:02:36,220
So whatever it takes for net lovi to spin up your actual website, it's doing the same thing.

40
00:02:37,210 --> 00:02:42,580
The other thing that happens is that we are now also running our network function.

41
00:02:43,360 --> 00:02:49,390
So what happens with the CLI when it builds is it will go into your net file folder inside of your root

42
00:02:49,390 --> 00:02:53,920
folder and it will find a functions folder and build all of those folders as well.

43
00:02:54,340 --> 00:02:58,840
So inside of our functions, of course, we have the one file which is our create payment intent.

44
00:02:59,830 --> 00:03:01,420
And now this is set up.

45
00:03:02,050 --> 00:03:04,690
So what we can do is we can now test it.

46
00:03:05,500 --> 00:03:11,980
So inside of our payment form, what we were doing before was we needed a payment intent in order for

47
00:03:11,980 --> 00:03:12,610
this to work.

48
00:03:13,180 --> 00:03:18,460
So as we know inside of our create payment intent, it is expecting an amount of value.

49
00:03:18,970 --> 00:03:25,570
So this is where what we need to do is pass a amount value in as a request to our net of function.

50
00:03:26,140 --> 00:03:31,120
So as I mentioned, not only works with functions as if they are API endpoints.

51
00:03:31,870 --> 00:03:36,910
So in order for us to do this, what we're going to say is, okay, let's make the request in order

52
00:03:36,910 --> 00:03:38,540
to get this payment at ten.

53
00:03:38,560 --> 00:03:44,100
So I'm going to say const response is equal to await fetch.

54
00:03:44,440 --> 00:03:50,560
Now here you're going to pass it the route relative to your application URL because net the file will

55
00:03:50,590 --> 00:03:53,100
build all of our functions relative to the route.

56
00:03:53,470 --> 00:03:59,800
And the way it works is that go slash dot net la fi slash functions because for us we're putting it

57
00:03:59,800 --> 00:04:04,420
inside of the functions folder and then slash the name of the file.

58
00:04:04,630 --> 00:04:07,090
So here it's create payment intent.

59
00:04:07,510 --> 00:04:08,620
This is going to be the root.

60
00:04:09,070 --> 00:04:13,420
Then we pass the fetch object that is going to define what we're trying to do.

61
00:04:13,900 --> 00:04:16,510
So the method here is a post method.

62
00:04:16,900 --> 00:04:18,820
So that's what we're saying.

63
00:04:19,330 --> 00:04:28,600
The headers is going to be a object where the content type is equal to application slash.

64
00:04:28,600 --> 00:04:29,050
Jason.

65
00:04:29,770 --> 00:04:36,310
So here we're saying, hey, I'm going to send you this body in JSON format and the body is going to

66
00:04:36,310 --> 00:04:44,830
be JSON string of five and it's going to be an object where we pass a mount and let's just do 10,000

67
00:04:44,830 --> 00:04:45,190
for now.

68
00:04:45,520 --> 00:04:50,080
We'll hook up our actual selector for the actual total, but we'll do that after.

69
00:04:50,080 --> 00:04:51,310
Let's just verify everything works.

70
00:04:52,150 --> 00:04:55,120
Once this fetch completes, we will say Dot.

71
00:04:55,120 --> 00:05:02,020
Then I want the response and I just want to convert this to JSON before I actually resolve it back to

72
00:05:02,020 --> 00:05:03,010
my actual response.

73
00:05:03,400 --> 00:05:06,820
I don't want to have to go through that extra step, so I'm just doing my dot then here.

74
00:05:07,910 --> 00:05:11,420
Once I have this, then I'm just going to consult dot log the response.

75
00:05:12,230 --> 00:05:18,200
And what I want to do as well is I want to take the payment handler and attach it to the on submit of

76
00:05:18,200 --> 00:05:19,130
the form container.

77
00:05:20,080 --> 00:05:28,360
So essentially what we're saying is that whenever this form submits and remember any button inside of

78
00:05:28,360 --> 00:05:33,910
your form container will automatically be a submission button unless stated otherwise.

79
00:05:34,570 --> 00:05:35,980
So for us, that's exactly what we want.

80
00:05:36,400 --> 00:05:42,220
So we'll save this and let's go back to our application and here, because we aren't actually using

81
00:05:42,220 --> 00:05:42,820
the card yet.

82
00:05:42,850 --> 00:05:47,410
We can just submit the form and we should make a payment intent for that value of 10,000.

83
00:05:48,340 --> 00:05:53,200
And here we see we log back our object with the response with the payment intent.

84
00:05:53,680 --> 00:05:56,050
This payment intent has a bunch of fields on it.

85
00:05:56,050 --> 00:05:59,290
But the main thing that we want is this client secret.

86
00:05:59,830 --> 00:06:05,890
This client secret is what attaches an actual payment to the payment intent that was generated from

87
00:06:05,890 --> 00:06:06,400
the backend.

88
00:06:06,880 --> 00:06:11,830
So remember how I mentioned our back and tell Stripe hey, this user intends to pay.

89
00:06:12,010 --> 00:06:14,140
I'm telling you the value that he intends to pay.

90
00:06:14,320 --> 00:06:19,480
So give me back a handshake token, which is essentially this client secret, so that when I actually

91
00:06:19,480 --> 00:06:26,650
pass you the payment details with this secret, you know that this payment is connected to that intent

92
00:06:26,650 --> 00:06:27,070
to pay.

93
00:06:28,140 --> 00:06:33,690
So now that we have this set up, what we need to do is actually build out the rest of this flow.

94
00:06:35,010 --> 00:06:37,500
So I want to get off this client secret.

95
00:06:37,560 --> 00:06:41,420
So I'm going to say const client secret is equal to response.

96
00:06:41,420 --> 00:06:42,930
Stop payment intent.

97
00:06:44,300 --> 00:06:46,220
Dot client secret.

98
00:06:47,680 --> 00:06:49,430
Underscore secret.

99
00:06:50,380 --> 00:06:53,180
Now we can do it like this or we can de structure.

100
00:06:53,200 --> 00:07:01,240
You can do payment intents and then client secret like this as well.

101
00:07:01,960 --> 00:07:05,560
This will also give us the appropriate client secret value.

102
00:07:06,070 --> 00:07:12,100
We can console.log the client secret like this just to make sure that everything is working.

103
00:07:13,490 --> 00:07:15,470
Again, some teams enforce that.

104
00:07:15,470 --> 00:07:18,580
Everything is structured so that you know where everything's coming from.

105
00:07:18,590 --> 00:07:21,110
It's a lot clearer if we hit pay now.

106
00:07:21,650 --> 00:07:22,130
There we go.

107
00:07:22,130 --> 00:07:23,510
We see our client secret.

108
00:07:24,080 --> 00:07:29,690
And now with this client secret, what we're going to do is we are going to create the actual payment.

109
00:07:30,350 --> 00:07:40,400
So to do this, we're going to say const payment result is equal to us calling the Stripe instance.

110
00:07:41,410 --> 00:07:43,720
Dot confirm card payment.

111
00:07:43,960 --> 00:07:50,290
So confirm card payment is the card payment method specifically for cards.

112
00:07:50,920 --> 00:07:54,460
And here are you going to pass it as the first argument, your client secret.

113
00:07:55,180 --> 00:08:00,340
And then the second argument is a configuration object where payment method.

114
00:08:00,820 --> 00:08:02,500
So payment underscore method.

115
00:08:04,710 --> 00:08:06,600
Is going to go to an object.

116
00:08:06,600 --> 00:08:09,390
And on this object we're going to pass the card.

117
00:08:09,930 --> 00:08:12,840
So in order to get the card element, we're going to say elements.

118
00:08:13,290 --> 00:08:18,930
So this again, is the elements instance that we got from use elements don't get element.

119
00:08:20,400 --> 00:08:23,130
And what you're going to pass this is the card element.

120
00:08:23,730 --> 00:08:29,490
So the reason why this works is because inside of Stripe, you remember in our index, J.S., what we

121
00:08:29,490 --> 00:08:33,300
did is we created this elements wrapper inside of here.

122
00:08:33,450 --> 00:08:35,850
Any element can only exist once.

123
00:08:36,270 --> 00:08:40,770
So there's actually a plethora of different elements that we can bring in.

124
00:08:41,460 --> 00:08:43,680
We just specifically chose the card element.

125
00:08:44,400 --> 00:08:49,230
I'll post a link with the list of the other elements, but here by saying get element and seeing the

126
00:08:49,230 --> 00:08:52,530
exact specific element because again, only one instance of it.

127
00:08:53,630 --> 00:08:58,280
What Stripe is going to do is actually get off all the appropriate details it needs in order to pass

128
00:08:58,550 --> 00:09:02,150
this payment value that gets inserted in as a result.

129
00:09:02,810 --> 00:09:03,890
So here we have the card.

130
00:09:03,890 --> 00:09:07,910
And then what we're going to say is billing details here.

131
00:09:07,940 --> 00:09:08,990
We're going to say name.

132
00:09:10,160 --> 00:09:11,450
We can put whatever we want.

133
00:09:11,930 --> 00:09:13,970
We're going to use the current username.

134
00:09:15,500 --> 00:09:17,450
But again, we haven't hooked up the user anything.

135
00:09:17,450 --> 00:09:19,940
So I'm just going to say using as a test.

136
00:09:21,970 --> 00:09:23,590
And then ask for payment results.

137
00:09:24,460 --> 00:09:28,690
What we can do is we can now check if we get back in error.

138
00:09:30,110 --> 00:09:30,740
From Stripe.

139
00:09:31,220 --> 00:09:37,130
If payment results dot air, then we're just going to alert that error.

140
00:09:37,250 --> 00:09:39,890
So we'll say payment results dot error.

141
00:09:41,480 --> 00:09:43,760
Otherwise we were successful.

142
00:09:44,000 --> 00:09:45,440
So let's say if payments.

143
00:09:47,820 --> 00:09:54,090
Result dot payment intent, dot status is equal to succeeded.

144
00:09:54,630 --> 00:09:57,210
So this, of course, is what we get back from Stripe.

145
00:09:58,050 --> 00:10:03,900
We'll say, if this is successful, then we will alert payment successful.

146
00:10:06,260 --> 00:10:09,230
Either way, we'll get an alert depending on what happens.

147
00:10:09,890 --> 00:10:10,970
So now we're going to save this.

148
00:10:11,570 --> 00:10:13,220
We're going to go back to our application.

149
00:10:14,990 --> 00:10:15,830
We're going to refresh.

150
00:10:17,200 --> 00:10:22,690
And now that we are actually expecting to use the credit card, I'm going to go for two, four, two,

151
00:10:22,690 --> 00:10:23,620
four, two, four, two.

152
00:10:23,890 --> 00:10:25,960
Now, this is the test credit card.

153
00:10:27,210 --> 00:10:28,740
0424.

154
00:10:29,100 --> 00:10:33,530
You can use any date as long as it's in the future and then ask for a CVC and zip.

155
00:10:33,540 --> 00:10:34,500
They can be whatever you want.

156
00:10:35,040 --> 00:10:40,110
Key thing is that as long as this date is ahead of time and then the credit card is four, two, four,

157
00:10:40,110 --> 00:10:40,860
two, four, two, four, two.

158
00:10:40,890 --> 00:10:41,790
This only works in test.

159
00:10:41,800 --> 00:10:44,130
It's Stripe's test visa credit card.

160
00:10:44,610 --> 00:10:47,190
If we get pay now, we see that there is a secret.

161
00:10:47,520 --> 00:10:48,840
We're going to attempt to make a payment.

162
00:10:49,110 --> 00:10:49,780
And there we go.

163
00:10:49,800 --> 00:10:51,480
We see the payment is successful.

164
00:10:51,990 --> 00:11:00,540
And now if we go to our actual stripe dashboard and we go to developers, what we'll see right there

165
00:11:00,540 --> 00:11:01,590
is a payment.

166
00:11:02,370 --> 00:11:03,570
So we've got a successful call.

167
00:11:05,210 --> 00:11:11,450
Additionally, if we actually want to see what happened, you can check payments inside of payments

168
00:11:11,450 --> 00:11:11,720
here.

169
00:11:12,020 --> 00:11:18,380
We'll see that these or all of those incomplete payment intents that we generated.

170
00:11:18,890 --> 00:11:24,380
But the successful payment right here was because we successfully charged the card or the test card.

171
00:11:25,340 --> 00:11:30,260
So again, as I mentioned, when you're back in net life, I function makes a payment intent.

172
00:11:30,290 --> 00:11:35,810
This shows up here saying that, oh, somebody is intending to pay, but then the customer did not enter

173
00:11:35,810 --> 00:11:39,080
the payment method, meaning they never actually completed the payment with the credit card.

174
00:11:39,710 --> 00:11:43,070
And here this payment complete is actually because we succeeded.

175
00:11:43,820 --> 00:11:44,510
But this is it.

176
00:11:45,170 --> 00:11:48,680
We've successfully hooked into the full stripe flow.

177
00:11:49,400 --> 00:11:50,510
We learned a lot of things.

178
00:11:50,870 --> 00:11:55,970
We definitely learn about Stripe significantly, and we learn a lot about nullify functions.

179
00:11:56,330 --> 00:11:59,240
There was a lot of steps that we had to go through in order to set this up.

180
00:11:59,750 --> 00:12:04,520
But when you really think about it and boil it down, it's actually a very simple amount of code.

181
00:12:04,940 --> 00:12:11,330
Beyond working with Stripe to make this work, and there are very key nuances about how you use their

182
00:12:11,330 --> 00:12:12,530
Stripe objects.

183
00:12:13,190 --> 00:12:15,350
Everything else is actually very simple.

184
00:12:16,010 --> 00:12:16,850
So that's it.

185
00:12:17,390 --> 00:12:21,620
In the next video, what we can do is clean this up a little bit, make it look a little prettier.

186
00:12:21,650 --> 00:12:26,240
But we've pretty much written the bulk of the logic that is required in order to make this work.

187
00:12:26,720 --> 00:12:32,630
Once we clean up all of our components, then what we can do is deploy this and see it live as well.

188
00:12:33,260 --> 00:12:34,160
I'll see in the next video.
