1
00:00:01,150 --> 00:00:02,110
Welcome back, everyone.

2
00:00:03,400 --> 00:00:06,730
In this video we are going to talk about use params.

3
00:00:07,480 --> 00:00:10,210
So use params comes from react router v6.

4
00:00:10,930 --> 00:00:14,230
When we type this, you'll notice something interesting happens.

5
00:00:14,860 --> 00:00:19,450
First, we're going to convert category component as well as the category styles.

6
00:00:20,320 --> 00:00:24,970
And looking inside of styles, of course, we see no props, so we don't need to worry about that.

7
00:00:25,720 --> 00:00:27,550
But when you come in here, what do you notice?

8
00:00:28,090 --> 00:00:31,300
You'll notice here that category might be string or undefined.

9
00:00:31,720 --> 00:00:39,160
The reason for this is because use params gives you back from an object of potential parameters inside

10
00:00:39,160 --> 00:00:39,850
of the URL.

11
00:00:40,270 --> 00:00:43,150
Any matches that exist from the object.

12
00:00:43,900 --> 00:00:52,180
The problem here is that we know inside of our code this category can only be rendered if the root matches

13
00:00:52,180 --> 00:00:53,500
that URL parameter.

14
00:00:54,500 --> 00:00:56,330
Think about it, this category.

15
00:00:56,660 --> 00:00:59,150
It lives inside of the shop component.

16
00:00:59,630 --> 00:01:06,260
We know that the only way that this component will ever render is if this path matches with the category

17
00:01:06,260 --> 00:01:07,760
value already in the URL parameter.

18
00:01:08,300 --> 00:01:14,660
For us, it's an absolute known that this component will never render unless this parameter is present.

19
00:01:15,290 --> 00:01:22,940
But react, router and TypeScript do not know that TypeScript only knows that use parameter can return

20
00:01:22,940 --> 00:01:26,420
you back these params and this params could be empty.

21
00:01:27,200 --> 00:01:32,660
If that's the case, then what we have to do is we have to tell TypeScript that we are expecting there

22
00:01:32,660 --> 00:01:34,340
to definitely be a value.

23
00:01:35,210 --> 00:01:42,500
So what we can say is that we want some kind of type actually not even exportable, let's just say a

24
00:01:42,500 --> 00:01:46,280
type of category root params.

25
00:01:48,210 --> 00:01:50,220
And this is going to have category.

26
00:01:53,200 --> 00:01:58,120
Now what we want to do with these parameters is we want to tell TypeScript, just assume that these

27
00:01:58,120 --> 00:01:59,380
are always going to be present.

28
00:01:59,950 --> 00:02:03,040
Use params actually can take a value.

29
00:02:03,100 --> 00:02:06,580
If you hover over it, you'll notice that it can take a string value.

30
00:02:07,210 --> 00:02:08,980
And what is the string value going to be?

31
00:02:09,670 --> 00:02:14,950
Well, here we're going to pass it not just category root parameters, but we're going to say, hey,

32
00:02:14,950 --> 00:02:18,490
these are only keys of category root parameters.

33
00:02:18,910 --> 00:02:23,080
The reason we do it like this is because if there are additional parameters, we want to be able to

34
00:02:23,080 --> 00:02:24,400
have them accessible.

35
00:02:24,760 --> 00:02:29,050
So saying, hey, this is a key of category root parameters means that you're either going to get a

36
00:02:29,050 --> 00:02:34,180
category or you're going to get any other additional values that are potentially parameters that are

37
00:02:34,210 --> 00:02:34,750
viable.

38
00:02:35,500 --> 00:02:37,330
But beyond that, we need to enforce that.

39
00:02:37,330 --> 00:02:39,730
There are definitely going to be these parameters.

40
00:02:39,730 --> 00:02:46,960
So here we're going to say as category root parameters, meaning that you can assume that this is not

41
00:02:46,990 --> 00:02:49,330
optional, this must be a string value.

42
00:02:50,110 --> 00:02:50,920
So here now.

43
00:02:51,960 --> 00:02:54,600
These category is no longer going to be undefined.

44
00:02:54,630 --> 00:02:56,190
It's definitely going to be a strength.

45
00:02:57,810 --> 00:03:03,300
So now we can now properly identify that these categories are always going to be present.

46
00:03:04,080 --> 00:03:05,790
So this is one of those things about use pram.

47
00:03:06,210 --> 00:03:08,400
You need to be able to enforce that.

48
00:03:08,640 --> 00:03:17,700
Hey, I know logically that because this is in a route, this must only render if that category is actually

49
00:03:17,700 --> 00:03:18,750
inside of the URL.

50
00:03:19,590 --> 00:03:21,630
So in order to do that, you're going to have to use this pattern.

51
00:03:23,060 --> 00:03:29,030
Now, the last component that is going to be a little bit interesting to type is going to be our payment

52
00:03:29,030 --> 00:03:29,660
form component.

53
00:03:30,740 --> 00:03:31,670
Now payment form.

54
00:03:31,670 --> 00:03:36,870
The reason why it's interesting is because we are interfacing with a third party library, which is

55
00:03:36,980 --> 00:03:43,760
right, and typing around a third party library is always going to require us to have a bit of finesse

56
00:03:43,760 --> 00:03:45,080
in understanding how it works.

57
00:03:45,590 --> 00:03:47,540
So to begin with, we check again.

58
00:03:47,960 --> 00:03:51,110
Our style does not have any props in the components.

59
00:03:51,380 --> 00:03:52,160
No problem.

60
00:03:52,160 --> 00:03:53,180
We don't need to worry about it.

61
00:03:53,870 --> 00:03:55,340
What about the payment form component?

62
00:03:56,060 --> 00:04:02,150
Well, first off, we see that our payment handler component has a problem because again, we need to

63
00:04:02,150 --> 00:04:06,260
type this according to the form, the fact that this is indeed a form type.

64
00:04:06,860 --> 00:04:12,140
So we already know that we need to bring in some of those react elements that we have already done in

65
00:04:12,140 --> 00:04:14,360
order to type out a form event.

66
00:04:14,930 --> 00:04:15,860
So let's bring that in.

67
00:04:16,460 --> 00:04:20,330
And now let's type this out as an HTML.

68
00:04:21,550 --> 00:04:23,500
Form element like so.

69
00:04:24,620 --> 00:04:33,350
But inside you'll notice that here we see that card must receive a valid Stripe card element.

70
00:04:33,560 --> 00:04:35,810
We cannot pass in null.

71
00:04:36,170 --> 00:04:39,710
NULL is not assignable to the card for this payment method.

72
00:04:41,180 --> 00:04:46,790
So this means that elements that get element, car element might potentially return us back?

73
00:04:46,820 --> 00:04:47,240
No.

74
00:04:48,250 --> 00:04:51,490
If this is the case, we need to perform a type guard check.

75
00:04:52,300 --> 00:04:57,610
So we've done this before, but we need to probably get a little bit more consider of how we're going

76
00:04:57,610 --> 00:04:58,090
to do this.

77
00:04:58,660 --> 00:05:03,130
So first, I'm actually going to cast this as a variable.

78
00:05:03,340 --> 00:05:09,850
So I'm going to say contact card details is equal to elements like element of card element.

79
00:05:11,210 --> 00:05:20,210
If this card details right here is not present, we can say if bank card details or even more explicitly

80
00:05:20,210 --> 00:05:24,110
if card details is equal to null, then just exit.

81
00:05:25,790 --> 00:05:32,210
Now what you'll notice is that when we switch this out over to card details.

82
00:05:33,380 --> 00:05:38,480
That now it works because we're essentially saying, hey, if it's ever, no, don't even continue.

83
00:05:38,840 --> 00:05:42,020
Only continue if there is a valid card details.

84
00:05:43,260 --> 00:05:44,610
So this is one way we can do it.

85
00:05:45,420 --> 00:05:48,960
Another way that you can do it is using a very strict.

86
00:05:50,430 --> 00:05:52,950
Type guard or type predicate function as we've done before.

87
00:05:53,220 --> 00:05:54,750
I'm going to show you this one as well.

88
00:05:55,290 --> 00:05:57,060
If valid card element.

89
00:05:58,910 --> 00:06:02,210
This is going to be equal to us receiving some card value.

90
00:06:02,660 --> 00:06:04,040
But what is the card value?

91
00:06:04,490 --> 00:06:11,480
Well, it's either going to be a stripe card element, as we saw earlier when we checked inside of this

92
00:06:11,480 --> 00:06:13,400
card details or it's going to be no.

93
00:06:14,030 --> 00:06:17,960
So to do that, we need to bring in stripe card elements.

94
00:06:19,890 --> 00:06:26,370
Now Stripe card element actually doesn't even come from React Stripe JS inside the documentation, they

95
00:06:26,370 --> 00:06:30,300
actually say they bring it in from Stripe itself, the Stripe library.

96
00:06:30,510 --> 00:06:39,360
So here, let's just say that we get it from at stripe slash stripe dash j as it is a stripe card element.

97
00:06:41,960 --> 00:06:46,550
And here again, we'll cast this card, either two stripe card element or no.

98
00:06:47,450 --> 00:06:53,510
And what we'll say is that card is stripe card elements if it returns true.

99
00:06:54,290 --> 00:06:58,130
So how do we know for sure that this card must be a Stripe card elements?

100
00:06:58,550 --> 00:07:04,240
Well, if the card is not equal to null, then this must be a Stripe card element.

101
00:07:04,250 --> 00:07:07,070
If it's not no null, it can only be a Stripe card element.

102
00:07:07,490 --> 00:07:09,980
And now we can even get more explicit without check.

103
00:07:09,980 --> 00:07:11,690
And we can say if.

104
00:07:13,540 --> 00:07:14,500
This is.

105
00:07:15,510 --> 00:07:19,740
Invalid, meaning that it is not equal to a stripe card element, then return.

106
00:07:20,280 --> 00:07:25,230
Otherwise it must be a Stripe card element, which is exactly what our type card does.

107
00:07:26,010 --> 00:07:27,240
So two different ways you can do it.

108
00:07:27,420 --> 00:07:30,180
This one is more typescript friendly because it is a type card.

109
00:07:30,510 --> 00:07:33,450
So we're going to do this one because it's more consistent with our code.

110
00:07:34,670 --> 00:07:35,230
And there we go.

111
00:07:35,240 --> 00:07:37,760
We have actually typed out the majority of what's challenging.

112
00:07:38,710 --> 00:07:43,150
My challenge to you is to type out the remaining of these components.

113
00:07:43,540 --> 00:07:45,580
You've already seen the majority of the patterns.

114
00:07:45,580 --> 00:07:48,340
You can now type the rest of these as a bit of practice.

115
00:07:48,700 --> 00:07:53,260
If you want even more practice, you can undo this and then type it out yourself as well.

116
00:07:53,740 --> 00:07:57,250
In the end, what I'm going to give you is the actual you are.

117
00:07:57,250 --> 00:08:01,480
I'll link or the GitHub repo to all of these components being fully typed.

118
00:08:01,870 --> 00:08:06,340
Honestly, nothing else is going to be a total shocker, but you can read through it and make sure that

119
00:08:06,340 --> 00:08:08,770
your typing versus my typing is pretty much the same.

120
00:08:09,040 --> 00:08:10,960
But we'd already done 50% of everything.

121
00:08:11,470 --> 00:08:16,390
And from this point forward, now we are going to use TypeScript inside of our projects.

122
00:08:17,110 --> 00:08:18,160
So I'll see you in the next video.
