1
00:00:02,220 --> 00:00:07,410
All right, we're starting to see more and more tests, but up until now, we've only worked with some

2
00:00:07,860 --> 00:00:09,020
simple components.

3
00:00:09,420 --> 00:00:16,740
What if we want to work with something like a container that says we have all this map state to props?

4
00:00:17,100 --> 00:00:21,450
It's also a connected component.

5
00:00:23,910 --> 00:00:26,280
How do we test with that?

6
00:00:27,970 --> 00:00:29,200
Let's give it a try.

7
00:00:30,190 --> 00:00:35,470
I'm going to create a new file and call it dot test dojos.

8
00:00:37,710 --> 00:00:44,520
And this test suggests, again, we can just go through the motions and copy one of the.

9
00:00:45,940 --> 00:00:48,550
Last tests, let's just do this.

10
00:00:50,700 --> 00:00:54,150
And this time, instead of contraband, it's going to be up.

11
00:00:56,150 --> 00:01:02,970
And again, we won't receive any colors, let's just run this and see what happens.

12
00:01:03,550 --> 00:01:05,650
No, actually, let me delete this as well.

13
00:01:05,810 --> 00:01:06,260
Save.

14
00:01:08,750 --> 00:01:15,590
All right, I'm getting some errors, it says expect to render app component, which is over here,

15
00:01:15,980 --> 00:01:21,740
but I'm getting an error saying that invariant violation could not find a store in either the context

16
00:01:21,740 --> 00:01:24,140
or props of Connect app.

17
00:01:24,860 --> 00:01:25,130
All right.

18
00:01:25,130 --> 00:01:27,380
So let's just mock a store.

19
00:01:27,590 --> 00:01:31,760
We can say const lock store equals.

20
00:01:33,500 --> 00:01:42,650
Say an empty object for now or let's just do the robots of an empty array and let's do.

21
00:01:44,260 --> 00:01:44,980
Sarshar.

22
00:01:46,460 --> 00:01:49,250
Or a search field that is an empty string.

23
00:01:50,140 --> 00:01:52,390
And we'll just pass this mock store.

24
00:01:55,150 --> 00:01:55,870
As the storm.

25
00:01:57,450 --> 00:01:57,990
Let's save.

26
00:02:01,350 --> 00:02:09,270
And Hellboy, I'm getting stalked, get state is not a function, and that makes sense, right?

27
00:02:09,300 --> 00:02:17,040
If you remember, our store isn't just an empty object or a dummy object.

28
00:02:17,280 --> 00:02:19,650
I mean, it is an redox terms.

29
00:02:19,740 --> 00:02:26,490
But it also came with all these other things that we didn't really think about when we installed Redox.

30
00:02:26,640 --> 00:02:31,370
We had get state subscribe and all these other methods that came with it.

31
00:02:32,370 --> 00:02:40,380
So that means we have to mock this entire list of store methods that redux comes up with.

32
00:02:40,390 --> 00:02:45,480
And if redux updates and add something new in the future, we're going to have to update that as well.

33
00:02:46,170 --> 00:02:50,840
And luckily for us, there's tools that already do this for you.

34
00:02:51,600 --> 00:02:56,250
For example, there is a package called Redox Lock.

35
00:02:57,870 --> 00:03:06,750
Store that you can use to actually mock this store and have these proper methods on it, and that's

36
00:03:06,750 --> 00:03:08,330
an NPM package that we can install.

37
00:03:08,730 --> 00:03:10,440
But I want to take a different route.

38
00:03:11,490 --> 00:03:20,220
I want to take a route of simplicity, because right now, looking at this app, dot JS file, we're

39
00:03:20,220 --> 00:03:21,420
doing a lot of things.

40
00:03:21,420 --> 00:03:27,410
And I like simple test tests that test simple things.

41
00:03:28,050 --> 00:03:34,590
And this app is frankly a little bit complicated because we have this Kinect.

42
00:03:34,590 --> 00:03:36,930
So it's technically not even rendering the app.

43
00:03:36,930 --> 00:03:38,760
It's rendering Canet.

44
00:03:40,180 --> 00:03:43,690
And then that is wrap by app, let me show you what I mean.

45
00:03:44,350 --> 00:03:51,760
If I go back to our app and open up our react developer tools, you might have to download this plug

46
00:03:51,760 --> 00:03:52,870
in if you don't have it already.

47
00:03:53,880 --> 00:03:58,620
I see that my app is a provider and then a connect to app.

48
00:04:00,060 --> 00:04:08,760
So this app, what we're actually testing is this Kinect component that is wrapping the app and only

49
00:04:08,760 --> 00:04:14,820
inside of it we have the app and then header search box scroll and so on and so forth.

50
00:04:16,390 --> 00:04:25,060
Let's simplify this, why not just test our app instead of testing our connected component, and this

51
00:04:25,060 --> 00:04:28,870
is what I like to do when I test things instead of trying to.

52
00:04:30,020 --> 00:04:37,540
Test a really complicated component, I asked myself, is this component as simple as it can be?

53
00:04:37,550 --> 00:04:44,510
Is there better things that I can do with code to make it more testable, which usually results in better

54
00:04:44,510 --> 00:04:45,440
code overall?

55
00:04:55,280 --> 00:05:04,310
So looking at this, this app component does two main things, one, it connects to the Redock store

56
00:05:04,460 --> 00:05:11,300
through all this map, say, to props and map dispatch to props, but it also renders a ton of these

57
00:05:11,300 --> 00:05:11,660
things.

58
00:05:11,870 --> 00:05:13,820
So let's separate this out.

59
00:05:14,450 --> 00:05:22,760
I'm going to create a new component file and call it main page, Gorgias, so you can think of this

60
00:05:22,760 --> 00:05:25,070
as the homepage of our robo friends up.

61
00:05:28,170 --> 00:05:38,220
And now this main page will also have a test file, so I'm going to move the app test, James, to actually

62
00:05:38,220 --> 00:05:45,150
be renamed to Main Page and put it into the components folder.

63
00:05:48,120 --> 00:05:52,500
All right, our tests are failing, but that's because we have our names all off.

64
00:05:53,460 --> 00:05:55,580
So let's go about this step by step.

65
00:05:55,800 --> 00:06:04,710
Let's make Jess be worried about just connecting and receiving just receiving props from the store and

66
00:06:04,710 --> 00:06:10,440
make our main page be concerned with rendering all this homepage stuff.

67
00:06:12,360 --> 00:06:13,440
So how can we do this?

68
00:06:14,490 --> 00:06:22,590
Well, the very first step is I'm going to copy the entire file, go to our main page, copy and paste

69
00:06:22,590 --> 00:06:29,160
it and right off the bat, remove all the redox things because I don't need anything redux.

70
00:06:29,190 --> 00:06:33,180
This is going to be a simple component that's not connected to a reduc story.

71
00:06:33,540 --> 00:06:35,970
So I'm going to remove the Kinect.

72
00:06:36,900 --> 00:06:42,120
I'm going to remove any of the actions and just leave our components.

73
00:06:43,040 --> 00:06:47,880
I'm going to remove the map state to props, map dispatched to props.

74
00:06:49,440 --> 00:06:51,720
And I'm going to rename this to.

75
00:06:53,670 --> 00:06:55,050
Main page.

76
00:06:56,090 --> 00:06:58,880
Component and you don't have access file for it.

77
00:06:59,920 --> 00:07:06,100
Or maybe we should move this apgar's to our main page, so for now, I'm just going to create something

78
00:07:06,100 --> 00:07:06,670
quickly.

79
00:07:06,970 --> 00:07:09,820
I'm going to say new file.

80
00:07:10,880 --> 00:07:12,870
Main page dot success.

81
00:07:13,070 --> 00:07:17,750
And by the way, you're starting to see why we might want to have a better folder structure than just

82
00:07:17,750 --> 00:07:18,920
files, files, files.

83
00:07:18,950 --> 00:07:23,870
We might want to have components and a component folder for each one of these components.

84
00:07:24,770 --> 00:07:27,020
And I'm just going to copy and paste here.

85
00:07:28,540 --> 00:07:33,370
And going back to our main page, we now have the success, we have the.

86
00:07:36,150 --> 00:07:39,510
Constructor and I don't know why we have our.

87
00:07:41,880 --> 00:07:47,730
Count in here, I don't think we need the count, it's not using it at all, so let's just remove that

88
00:07:48,420 --> 00:07:50,460
so we don't need a constructor.

89
00:07:53,460 --> 00:08:00,150
And in our main page, again, there's no constructor we have the component did mount because while

90
00:08:00,150 --> 00:08:09,340
we want to request robots and we have our regular render, but we also don't have our connect anymore.

91
00:08:09,360 --> 00:08:11,220
We're just simply rendering our.

92
00:08:12,520 --> 00:08:13,180
Main page.

93
00:08:16,100 --> 00:08:25,640
All right, so we've removed this and made this into a simple app that still has the component did mount,

94
00:08:25,640 --> 00:08:29,180
but that's just props that we received from the store.

95
00:08:30,940 --> 00:08:38,710
All right, so let's go into Abduh and now remove the up part, because we don't really need that anymore

96
00:08:38,710 --> 00:08:42,490
or we don't need the render part, we just need the connected component.

97
00:08:43,240 --> 00:08:47,140
So again, in here now for our render.

98
00:08:48,920 --> 00:08:55,550
All we really need to do is, well, remove all of this feels nice, removing stuff and making files

99
00:08:55,550 --> 00:09:02,480
smaller and all we need is the main page component to render, right.

100
00:09:03,680 --> 00:09:06,530
So we can remove all these component imports.

101
00:09:08,390 --> 00:09:12,230
And just import the main page component.

102
00:09:15,680 --> 00:09:20,420
Again, another reason I love reactivates everything is just so nice and simple to move component's

103
00:09:20,420 --> 00:09:24,140
around, but look what we've just done really, really quickly.

104
00:09:24,380 --> 00:09:28,310
Oh, and we definitely don't need component did mount.

105
00:09:29,540 --> 00:09:34,170
Because we're doing that in the main page, so look how small that component just got.

106
00:09:34,820 --> 00:09:36,230
How nice is that?

107
00:09:37,270 --> 00:09:45,520
And now this app component just turned into a super simple container component, and this is an architectural

108
00:09:45,820 --> 00:09:52,360
decision that I really, really like because we don't really need to even test this, do we?

109
00:09:53,670 --> 00:10:03,150
Because all we're doing is just using the connect function to grab the state and dispatch events from

110
00:10:03,150 --> 00:10:09,300
our Redock store, so even writing test for this, although we could do it, we're just simply testing

111
00:10:09,300 --> 00:10:11,240
the functionality of redux.

112
00:10:11,250 --> 00:10:14,760
And that's something that Redux Library already does.

113
00:10:15,090 --> 00:10:18,930
It already has tests and people working to make sure that it works properly.

114
00:10:20,190 --> 00:10:26,880
This component now becomes something so simple that we might not even need to test and we've moved all

115
00:10:26,880 --> 00:10:34,500
our logic that we can test to the main page component, and that's something really important to think

116
00:10:34,500 --> 00:10:39,270
about, to always try and make your tests easy.

117
00:10:39,480 --> 00:10:43,680
If they're not, then perhaps there's something in your code that you can simplify and you can see how

118
00:10:44,040 --> 00:10:45,720
elegant of a solution this is.

119
00:10:45,990 --> 00:10:51,290
The last thing we really want to do is just pass down these props down to the main page.

120
00:10:52,110 --> 00:10:55,170
To do that, we can just use some de structuring.

121
00:10:56,530 --> 00:11:01,090
Or object spread to say this dot props.

122
00:11:05,360 --> 00:11:11,570
Let's save and actually haven't tested this Scotsdale, make sure it still works, let's run and start.

123
00:11:11,870 --> 00:11:12,170
Sure.

124
00:11:12,170 --> 00:11:14,720
There's something that we may have missed.

125
00:11:15,880 --> 00:11:16,840
Let's close this.

126
00:11:19,450 --> 00:11:22,930
All right, we have your render method, should have a return statement.

127
00:11:24,600 --> 00:11:31,170
And yeah, we need to actually return from this render statement that's silly of us, let's return.

128
00:11:34,620 --> 00:11:40,920
And we have a bit of an issue with the access, and that is because they can't find the sycophant,

129
00:11:41,860 --> 00:11:43,350
so that's a simple fix.

130
00:11:43,620 --> 00:11:49,770
We just go to the euro and do because the sycophant is in the containers.

131
00:11:51,230 --> 00:11:52,790
We can just simply do.

132
00:11:55,030 --> 00:12:00,490
Containers for now, even though we probably want to move this around for now, for demonstration purposes,

133
00:12:00,520 --> 00:12:01,020
that's fine.

134
00:12:02,290 --> 00:12:03,530
Everything is passing.

135
00:12:03,550 --> 00:12:10,000
If I go back, I see that there's a few other areas we have the count of.

136
00:12:10,540 --> 00:12:10,960
No.

137
00:12:12,650 --> 00:12:20,360
And we're passing the count state in here in the header component, but if you remember our header component.

138
00:12:21,480 --> 00:12:22,260
Has the.

139
00:12:23,650 --> 00:12:30,640
Counterbattery that actually has its own state, so looks like we're doing this for no reason, so let's

140
00:12:30,640 --> 00:12:32,110
just remove that from the.

141
00:12:33,920 --> 00:12:39,950
Where is it from the main page so we can just remove that save?

142
00:12:41,030 --> 00:12:41,610
Go back.

143
00:12:42,350 --> 00:12:42,810
All right.

144
00:12:42,830 --> 00:12:43,730
Everything is working.

145
00:12:43,760 --> 00:12:45,010
Make sure our searching works.

146
00:12:45,950 --> 00:12:47,500
Yeah, everything is working.

147
00:12:48,170 --> 00:12:52,070
Count is working if I open up my react developer tools.

148
00:12:53,940 --> 00:12:55,830
No, not redox, we won't react.

149
00:12:58,370 --> 00:13:02,330
We have the provider, we have the connected app, but check this out.

150
00:13:03,610 --> 00:13:08,320
We now have the main page that we can test.

151
00:13:09,350 --> 00:13:14,630
And this main page now is more accessible for us using enzyme and just.

152
00:13:15,720 --> 00:13:17,120
So let's try some tests here.

153
00:13:19,220 --> 00:13:22,430
We're going to go into the main page that tests.

154
00:13:23,150 --> 00:13:29,150
All right, let's first change the name to Main Page, which is what we're testing now.

155
00:13:30,910 --> 00:13:37,540
And because I feel like we're going to be doing this a lot and passing down some props, there's a neat

156
00:13:37,540 --> 00:13:38,950
little trick that we can do.

157
00:13:39,380 --> 00:13:43,660
Let's say we're going to have a little rapper and I'm going to.

158
00:13:45,060 --> 00:13:46,050
Remove this for now.

159
00:13:48,310 --> 00:13:55,240
And we can use something called before each again comes with jest and other testing frameworks, and

160
00:13:55,240 --> 00:13:59,520
this makes sure that it runs before each one of our tests.

161
00:14:00,340 --> 00:14:04,480
Now in here, we simply give it a function.

162
00:14:04,960 --> 00:14:09,490
And inside of this function, we can say what should run before each one of our tests.

163
00:14:10,000 --> 00:14:12,790
In our case, we want to mock props.

164
00:14:14,210 --> 00:14:21,560
And these mock props, well, why are we going to have we're going to have the on request robots.

165
00:14:22,990 --> 00:14:24,250
Which if you remember.

166
00:14:25,450 --> 00:14:29,860
Let's close this and close this, so it's a little bit cleaner.

167
00:14:31,150 --> 00:14:39,520
If you remember, Main Page has the request robot's function, so we can just do the just.

168
00:14:40,760 --> 00:14:45,950
Function here, which we've seen before with mocking, so we're just saying that this is just this simple

169
00:14:45,950 --> 00:14:49,040
function, don't worry about actually doing the API call.

170
00:14:49,670 --> 00:14:52,040
We'll say that robots is an empty array.

171
00:14:54,360 --> 00:14:55,650
That search field.

172
00:14:57,080 --> 00:14:58,550
Is going to be an empty string.

173
00:15:01,040 --> 00:15:05,990
And that is pending will be set to force.

174
00:15:08,220 --> 00:15:15,330
And then finally, because we have this for each or before each, we're going to say that the rapper

175
00:15:15,540 --> 00:15:19,380
is going to equal the shallow.

176
00:15:22,030 --> 00:15:22,660
Rendered.

177
00:15:24,220 --> 00:15:32,620
Main page and this main page, again, just like we did in our Apgar's, can just receive the.

178
00:15:34,350 --> 00:15:36,390
Props, that is the.

179
00:15:38,090 --> 00:15:38,870
Mock props.

180
00:15:42,640 --> 00:15:49,090
So this is going to receive all these properties just like we did, and see that over here.

181
00:15:53,970 --> 00:15:57,810
All right, so let's say here, I'm going to go back to running and test.

182
00:16:00,250 --> 00:16:05,260
And we have a few areas because, well, that's not semicolon, that's comma, my arch nemesis, the

183
00:16:05,260 --> 00:16:05,650
comma.

184
00:16:07,410 --> 00:16:13,200
And we get an air saying that our test, we must contain one test because we haven't ridden one yet,

185
00:16:13,770 --> 00:16:15,390
we just wrote the before each.

186
00:16:16,500 --> 00:16:18,260
Now, let's start off with the basics.

187
00:16:18,300 --> 00:16:23,910
The it renders main page without crashing.

188
00:16:25,590 --> 00:16:26,790
And we'll say that.

189
00:16:29,050 --> 00:16:36,340
Well, we can use our favorite testable snapshot testing, we can just say expect rapper, because now

190
00:16:36,340 --> 00:16:41,790
we have access to this rapper that is shallow rendered because before each is going to run before this

191
00:16:41,800 --> 00:16:45,760
test and I'll say to match.

192
00:16:46,920 --> 00:16:47,460
Snapshot.

193
00:16:48,180 --> 00:16:49,590
I love how easy this is.

194
00:16:51,440 --> 00:16:52,040
Let's save.

195
00:16:54,770 --> 00:16:56,930
And what did I mess up here?

196
00:16:57,410 --> 00:17:00,100
Wow, I am terrible writing, Comis.

197
00:17:01,500 --> 00:17:02,640
All right, there you go.

198
00:17:03,090 --> 00:17:07,650
You must be just laughing at me right now with all the comments that I miss while I code.

199
00:17:07,650 --> 00:17:09,080
But, hey, we're all human here.

200
00:17:09,090 --> 00:17:10,020
We all make mistakes.

201
00:17:10,690 --> 00:17:15,210
I don't think there's ever a perfect developer that doesn't make mistakes while coding.

202
00:17:16,110 --> 00:17:17,850
If there are, well, I'm very jealous of them.

203
00:17:18,960 --> 00:17:19,380
All right.

204
00:17:19,380 --> 00:17:20,490
Let's test another thing.

205
00:17:20,490 --> 00:17:24,120
Let's say that I wanted to make sure that it filters the robots correctly.

206
00:17:24,120 --> 00:17:28,410
So I'll say it filters robots correctly.

207
00:17:29,460 --> 00:17:37,320
And I'm just going to say that in here we expect the rapper.

208
00:17:39,620 --> 00:17:44,430
And hmm, how do we do this if we go to Main Page, James?

209
00:17:47,160 --> 00:17:57,330
We have filter robots in here, but that's happening in the render function, so let's just clean this

210
00:17:57,330 --> 00:18:02,070
up and say that we have the filter robots.

211
00:18:04,300 --> 00:18:07,810
And this filter, robots will receive the.

212
00:18:09,310 --> 00:18:13,030
Robots, and it's going to make it a narrow function.

213
00:18:18,510 --> 00:18:21,000
And we can just grab this.

214
00:18:24,890 --> 00:18:26,510
And just return.

215
00:18:29,680 --> 00:18:36,400
Are filtered robots, we're going to need the search field here, so I'm going to say this dot props,

216
00:18:36,670 --> 00:18:37,720
dot search field.

217
00:18:38,700 --> 00:18:39,540
To lower case.

218
00:18:40,980 --> 00:18:51,780
And now within here, we can just say that filtered robots is coming from this dot filter robots, let's

219
00:18:51,780 --> 00:18:53,070
just make sure this runs.

220
00:18:53,230 --> 00:18:55,830
I'm going to go back and run and start.

221
00:18:59,600 --> 00:19:02,790
And it looks like I made a mistake somewhere here.

222
00:19:03,620 --> 00:19:10,610
We need to actually pass down the robot, so let's just say it's going to receive the robots or we can

223
00:19:10,610 --> 00:19:13,150
even do this up over here for now.

224
00:19:13,160 --> 00:19:17,300
Let's just leave it like that and make sure we have our name incorrect here.

225
00:19:17,480 --> 00:19:18,300
Felter robots.

226
00:19:18,680 --> 00:19:19,340
Let's go back.

227
00:19:20,730 --> 00:19:27,480
All right, it's still working, so now that I've made this a little bit cleaner in our render function

228
00:19:28,650 --> 00:19:31,050
and let's just remove the search field from here.

229
00:19:33,000 --> 00:19:33,620
There you go.

230
00:19:34,860 --> 00:19:42,000
How can I actually test this, we can now just simply test this method on the main page class.

231
00:19:43,010 --> 00:19:53,300
Well, we can just now use the instance property that comes with enzyme, and now this instance is going

232
00:19:53,300 --> 00:19:58,960
to give us access to all the methods that Main Page has, including Felda robots.

233
00:19:59,330 --> 00:20:02,240
So let's say in our test, I'm going to move this around.

234
00:20:02,840 --> 00:20:03,830
I'm going to say.

235
00:20:04,980 --> 00:20:06,900
Dot filter.

236
00:20:08,350 --> 00:20:13,270
Robots, it's going to run filter robots with, let's say, an empty array.

237
00:20:15,170 --> 00:20:18,140
And we expect that to equal.

238
00:20:19,190 --> 00:20:19,950
An empty array.

239
00:20:20,690 --> 00:20:24,920
So let's save and run, npm start or ampm test.

240
00:20:31,190 --> 00:20:32,570
We have a failed test.

241
00:20:35,210 --> 00:20:43,000
And I made a bit of a bit of a mistake here, the expect should be around this entire thing.

242
00:20:43,010 --> 00:20:47,970
We want to expect that the filter robots runs and we want it to equal the empty array.

243
00:20:48,350 --> 00:20:48,830
Let's save.

244
00:20:50,720 --> 00:20:56,390
All right, everything is passing, but let's test other cases, because while this is most likely not

245
00:20:56,390 --> 00:20:57,320
going to be the case.

246
00:20:58,510 --> 00:21:03,820
Let's say that this time around, in this statement, only even though we're getting these before each

247
00:21:04,030 --> 00:21:11,320
and we have access to the rapper this time around, we want to have a special case where the mock props

248
00:21:12,160 --> 00:21:20,350
is going to have a search field of a and in here we have a robot.

249
00:21:21,450 --> 00:21:24,090
That is to say, I'd.

250
00:21:25,980 --> 00:21:39,180
Three with a name of John and email, Wolf, leave your username out of it for now, John at Gmail dot

251
00:21:39,180 --> 00:21:39,450
com.

252
00:21:41,140 --> 00:21:42,040
Let's save this.

253
00:21:43,420 --> 00:21:45,760
And create a new expect statement now.

254
00:21:50,180 --> 00:21:58,220
And just for this test, we're going to use a different wrapper, so let's just a.

255
00:21:59,830 --> 00:22:05,800
A rapper with and I know this is not the cleanest, but trying to illustrate a point here, so bear

256
00:22:05,800 --> 00:22:06,140
with me.

257
00:22:06,250 --> 00:22:08,290
So let's do mock props.

258
00:22:09,540 --> 00:22:17,460
To mock props, too, and this is going to be rapper two, so let's save rapper to save.

259
00:22:19,310 --> 00:22:26,150
And it says filters robots correctly, and you know what, I just realized, I think a better way for

260
00:22:26,150 --> 00:22:35,270
us to do filter robots for now at least, is we can forget about the props and we can just do this dot

261
00:22:35,690 --> 00:22:35,950
oops.

262
00:22:36,710 --> 00:22:39,230
This dot props dot robots.

263
00:22:41,890 --> 00:22:47,260
So going back here, we can now remove these arrays, so just looks a little bit cleaner.

264
00:22:48,720 --> 00:22:57,150
And let's make this test pass, we get a bit of an error here because we need to do CONSED rapper too,

265
00:22:57,240 --> 00:22:58,750
because rapper is not defined.

266
00:22:58,800 --> 00:23:06,930
Remember, we have to define it and our test pass because our search field is a and we only have robots

267
00:23:07,080 --> 00:23:08,580
with John and John.

268
00:23:08,580 --> 00:23:09,300
A good outcome.

269
00:23:09,600 --> 00:23:11,160
But if I change this through John.

270
00:23:13,120 --> 00:23:19,390
Oh, it fails because we expected to equal the actual robots with John and.

271
00:23:21,190 --> 00:23:27,580
For now, we can just say that we expect this array to be returned.

272
00:23:28,670 --> 00:23:32,270
And I'm going to remove the first one, let's save.

273
00:23:35,810 --> 00:23:41,900
Oh, and I have extra brackets here again, this is good, our tests are failing and we're working towards

274
00:23:41,900 --> 00:23:42,500
passing them.

275
00:23:42,920 --> 00:23:43,430
All right.

276
00:23:43,430 --> 00:23:47,720
And now we know that filters robots correctly is working.
