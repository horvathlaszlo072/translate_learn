1
00:00:00,800 --> 00:00:08,330
So when the last lesson we added in our Babbo loader so that we can convert our jazz and jazz files

2
00:00:08,330 --> 00:00:12,380
down into five jazz files that our browser can understand.

3
00:00:13,810 --> 00:00:20,890
What we're going to do now is we need to actually bring in another loader because we need to actually

4
00:00:20,890 --> 00:00:23,800
tell Westpac what it should do with CSX.

5
00:00:24,190 --> 00:00:27,620
It actually doesn't know how to render and bring in Keziah.

6
00:00:28,000 --> 00:00:30,000
This is a thing that we have to do with Westpac.

7
00:00:31,120 --> 00:00:37,420
What we're going to bring in is two new loaders, one loader is called the style loader and the other

8
00:00:37,420 --> 00:00:38,770
loader is loader.

9
00:00:39,250 --> 00:00:44,150
Now style loader is what allows it to convert different types of style files.

10
00:00:44,590 --> 00:00:49,540
The seller actually allows us to import in files into our react component files.

11
00:00:50,260 --> 00:00:55,480
The actual loader is what converts CSFs into a version or not even a version.

12
00:00:55,480 --> 00:00:58,800
But it's just what allows the cows to be read by our JavaScript files.

13
00:00:59,870 --> 00:01:07,460
We can use a saslaw if we want it to convert SAS over as well, but you always need access loader and

14
00:01:07,820 --> 00:01:10,130
style loader, so we're just going to bring those in.

15
00:01:11,470 --> 00:01:15,340
Style odor as well as cislunar.

16
00:01:18,360 --> 00:01:24,840
Now that we have those two loaders in, we're going to define a new rule and here we want to say.

17
00:01:26,390 --> 00:01:26,780
That.

18
00:01:27,590 --> 00:01:36,890
For any file that ends in success, so just like our Jass, it's following the very same conventional

19
00:01:36,890 --> 00:01:41,720
pattern, except we don't need these brackets because we need the brackets when we do the OR but we

20
00:01:41,720 --> 00:01:42,830
don't hear in this context.

21
00:01:43,550 --> 00:01:51,560
We want to say for any CSFs files, we want to just run them through the two loaders and you can take

22
00:01:51,560 --> 00:01:54,650
an object with multiple options or it can take an array.

23
00:01:55,010 --> 00:01:58,500
And here we're going to pass an array because we want it to run through two loaders.

24
00:01:58,760 --> 00:02:00,800
Keep in mind here that the order does matter.

25
00:02:01,100 --> 00:02:07,690
Loaders evaluate from right to left and we want to render the loader first before we do the stallholder.

26
00:02:08,330 --> 00:02:12,290
So because we're going right to left and we want stallholder to be last, we're going to say stop Loader

27
00:02:12,290 --> 00:02:14,600
first and then CSFs Loader second.

28
00:02:15,200 --> 00:02:16,580
And that's all we need for CSFs.

29
00:02:17,570 --> 00:02:25,670
The last thing that we need to do is we need to make sure that we can output and build a HTML file that

30
00:02:25,670 --> 00:02:28,730
we can actually finally read in our final production build.

31
00:02:29,000 --> 00:02:31,400
In order to do that, we need two more tools.

32
00:02:32,540 --> 00:02:38,540
So going back to our terminal, we are going to add in HTML loader, which, as you're familiar with

33
00:02:38,540 --> 00:02:40,180
now, it's simply just a loader.

34
00:02:40,640 --> 00:02:43,580
But we also need HTML Web plugin.

35
00:02:45,130 --> 00:02:51,970
So the HTML loader is the thing that lets us read our HTML file inside of our REACT application, but

36
00:02:51,970 --> 00:02:57,300
the Web pack plugin is what allows us to actually place the output somewhere.

37
00:02:57,820 --> 00:03:03,250
So what it's going to do is it's going to build all of our HTML files and it's going to create efficient

38
00:03:03,250 --> 00:03:10,480
chunks, as we saw in our performance optimization courses, where there the HTML bundles with the JavaScript

39
00:03:10,480 --> 00:03:11,510
for each page.

40
00:03:11,530 --> 00:03:13,360
And this plug in actually helps us do that.

41
00:03:14,670 --> 00:03:16,680
So here we're just going to add these two libraries.

42
00:03:18,200 --> 00:03:22,430
And once we have that, let's go back to our rules and let's add another one.

43
00:03:23,750 --> 00:03:30,470
So here, what we want to do is we want to say in order to use our HTML plug and loader, it's pretty

44
00:03:30,470 --> 00:03:36,080
much going to be the exact same as what we saw with the style loader and the jack loader we need to

45
00:03:36,080 --> 00:03:36,590
test.

46
00:03:37,400 --> 00:03:39,800
And just as we saw, we're going to write.

47
00:03:41,420 --> 00:03:44,480
That we're matching anything that ends in didymo.

48
00:03:46,350 --> 00:03:48,510
And then we're just going to use.

49
00:03:49,950 --> 00:03:50,760
The loader.

50
00:03:51,860 --> 00:03:52,820
HTML loda.

51
00:03:55,580 --> 00:04:01,470
So as simple as that, the only thing now is that after rules, we have to actually bring in that cement

52
00:04:01,490 --> 00:04:02,930
plug in that we were talking about.

53
00:04:03,530 --> 00:04:05,450
So there's another property called plug ins.

54
00:04:06,810 --> 00:04:12,180
And instead of plug ins, we're going to call new and then we got to call the actual plug in, so we've

55
00:04:12,180 --> 00:04:15,530
got to bring that plug in into our Web config file.

56
00:04:16,140 --> 00:04:19,590
So we're going to say consed html web pack.

57
00:04:20,910 --> 00:04:21,420
Plug in.

58
00:04:22,530 --> 00:04:26,820
Is equal to require HTML Watpac plugin.

59
00:04:27,790 --> 00:04:28,970
So we're bringing it in here.

60
00:04:29,890 --> 00:04:36,730
We want to instantiate an instance of it and we're going to pass to it a configuration object, this

61
00:04:36,730 --> 00:04:43,630
object is simply going to take the template of the actual file that it's going to use as the index HTML

62
00:04:43,630 --> 00:04:45,360
starting point in our REACT application.

63
00:04:45,790 --> 00:04:49,780
So we wanted to take this one that we have in our source, because this is the one that renders the

64
00:04:49,780 --> 00:04:56,320
div idea of root using the object code and all of the index code that we have here.

65
00:04:57,890 --> 00:05:05,060
What's going to happen is that inside of Babilonia, Babille loader always by default, tries to go

66
00:05:05,240 --> 00:05:08,490
for a index inside of your source folder.

67
00:05:08,540 --> 00:05:11,230
That's why we always define index us inside of source.

68
00:05:11,600 --> 00:05:13,060
So it's going to find this file.

69
00:05:13,430 --> 00:05:19,520
It's going to run this code and it's going to use that index HTML file that we supply to the actual

70
00:05:19,520 --> 00:05:26,000
HTML plugin as the file that it needs to run the JavaScript on, which is where we're going to end up

71
00:05:26,000 --> 00:05:32,940
using our reactant render in order to replace that div with the idea of root with our app component.

72
00:05:33,350 --> 00:05:40,700
So it's actually the combination of those two loaders together inside of our web pack that ends up producing

73
00:05:40,820 --> 00:05:46,430
and providing outside the new JavaScript and HTML files that we need for our final build.

74
00:05:47,150 --> 00:05:51,800
So finally, with this template, we're just going to pass it the string to our indexed HTML.

75
00:05:52,370 --> 00:05:55,640
And this is our Web config, a lot of new concepts.

76
00:05:56,270 --> 00:06:00,470
But honestly, if you think about what it is that we wrote, it's actually quite simple.

77
00:06:00,470 --> 00:06:03,500
We're just following along with some simple rules and using loaders.

78
00:06:03,680 --> 00:06:05,540
It's just all configuration with Web hack.

79
00:06:05,570 --> 00:06:06,360
That's really all it is.

80
00:06:06,890 --> 00:06:11,660
Of course, I'm going to link all of the documentation for this so that you can see what other options

81
00:06:11,660 --> 00:06:16,040
you have, understand a little better, what else you can do with these different options.

82
00:06:16,220 --> 00:06:22,820
But this is just a bare bones setup so that we can run our web pack and render our reachout.

83
00:06:23,600 --> 00:06:28,700
Now that we have all this, let's just run built because we've got our config setup.

84
00:06:29,030 --> 00:06:29,960
We've got Watpac.

85
00:06:30,170 --> 00:06:31,850
Well, it looks like we have a little error here.

86
00:06:31,850 --> 00:06:32,240
Oh.

87
00:06:33,280 --> 00:06:34,840
I put this in the wrong place.

88
00:06:35,440 --> 00:06:36,880
This should be one lower.

89
00:06:38,460 --> 00:06:40,380
So plug ins comes after module.

90
00:06:41,440 --> 00:06:42,670
And now let's try this again.

91
00:06:44,080 --> 00:06:49,090
So it's going to run the Web, build, can't find app inside of app.

92
00:06:49,810 --> 00:06:50,850
This is a syntax issue.

93
00:06:51,490 --> 00:06:56,140
So inside of index such as this should be Abduh RSX.

94
00:06:57,360 --> 00:07:00,690
Because our loader is looking specifically for this, it does not default.

95
00:07:00,720 --> 00:07:04,290
So that's actually one of the things with WABAC, let's fix that.

96
00:07:04,320 --> 00:07:05,160
Let's try this again.

97
00:07:06,440 --> 00:07:11,600
So my autocomplete will automatically try and correct, sometimes without doing the ASX, as you've

98
00:07:11,600 --> 00:07:14,250
seen throughout this course, as I've imported multiple files together.

99
00:07:14,690 --> 00:07:17,120
So this is just one of the caveats and nuances with Web.

100
00:07:17,360 --> 00:07:20,600
If you want that feature, you actually have to write it yourself as a config option.

101
00:07:21,320 --> 00:07:22,610
But now we finished our built.

102
00:07:23,450 --> 00:07:25,180
But let's actually go over what just happened.

103
00:07:25,190 --> 00:07:27,160
We ran into a couple of minor errors.

104
00:07:27,230 --> 00:07:29,720
This is very normal with configuration of web.

105
00:07:30,020 --> 00:07:35,180
This is why the track team and actually many Selli tools, even for angular and view, try and hide

106
00:07:35,180 --> 00:07:38,300
this away from developers because it's so error prone.

107
00:07:38,300 --> 00:07:44,420
There's so many little nuances you can miss with Westpac that it's really frustrating to work with in

108
00:07:44,420 --> 00:07:44,960
that sense.

109
00:07:45,110 --> 00:07:46,540
That's not to say that it's not worth learning.

110
00:07:46,550 --> 00:07:49,250
It definitely is worth learning, at least what's happening.

111
00:07:49,760 --> 00:07:55,790
But the tools, as Andre mentioned in an earlier lesson, an entire team is dedicated to helping you

112
00:07:55,790 --> 00:08:01,100
build and set up your configuration with Web and Babel to the most optimized degree possible.

113
00:08:02,130 --> 00:08:06,990
It's worth knowing what's happening under the hood, at least like demystifying what Web hacking people

114
00:08:06,990 --> 00:08:10,920
do, but writing it from scratch could bring you a lot of headache.

115
00:08:10,920 --> 00:08:14,580
And the configuration options are pretty much just things you have to do by memory.

116
00:08:14,580 --> 00:08:21,090
And looking at the actual configuration, there's no real logic beyond what it is that each configuration

117
00:08:21,090 --> 00:08:22,410
tool is trying to do for you.

118
00:08:23,460 --> 00:08:26,220
But now that we have our final bill that we see that succeeded.

119
00:08:27,550 --> 00:08:34,480
Inside, we now see we have this new disk folder and an e-mail, so let's actually open this up in the

120
00:08:34,480 --> 00:08:36,840
terminal, but let's open up our index.

121
00:08:37,870 --> 00:08:38,980
Let's reveal and find her.

122
00:08:39,550 --> 00:08:41,320
And let's just open it up in our browser.

123
00:08:41,800 --> 00:08:45,690
And then we see we see our component render our react is working.

124
00:08:45,850 --> 00:08:50,260
So we know that our loader is working and we know that our web hack is all working.

125
00:08:50,500 --> 00:08:51,450
And that's pretty much it.

126
00:08:51,910 --> 00:08:53,710
This is all Web hack and bable.

127
00:08:53,710 --> 00:08:55,330
Do it, transpose it down.

128
00:08:55,540 --> 00:09:01,240
It builds it into a final indexed e-mail as well as manger's bundle that we download as we saw in a

129
00:09:01,240 --> 00:09:02,140
performance section.

130
00:09:02,710 --> 00:09:07,540
So this is actually what's helping Web pack, is helping improve our performance by bundling these files

131
00:09:07,540 --> 00:09:09,260
for us when we make these requests.

132
00:09:09,520 --> 00:09:11,680
That's why we included the HTML bundle.

133
00:09:12,520 --> 00:09:17,950
This is the main advantage of Watpac Web allows us to increase our performance because it sets up a

134
00:09:17,950 --> 00:09:18,970
lot of these things for us.

135
00:09:19,720 --> 00:09:23,000
The REACT team by default assumes and must use web hack.

136
00:09:23,020 --> 00:09:29,020
All of these new technologies and frameworks all leverage Watpac under the hood to help them optimize

137
00:09:29,020 --> 00:09:35,590
the performance and build the code that you write in angular or in react down into a readable version

138
00:09:35,590 --> 00:09:36,340
for browsers.

139
00:09:37,200 --> 00:09:43,500
But now that we finally have our weapon and our configuration options, we understand what it is that

140
00:09:43,500 --> 00:09:44,280
weapon does.

141
00:09:45,540 --> 00:09:49,950
Dig around with the documentation, play with it a little bit yourself if you want to, for example,

142
00:09:49,950 --> 00:09:55,170
include the SAS loader, I can include a link to the SAS loader, just trying to follow the instructions

143
00:09:55,170 --> 00:09:56,340
and see if you can fit it in.

144
00:09:56,730 --> 00:09:57,030
Right.

145
00:09:57,060 --> 00:09:59,220
S file and see what happens.

146
00:10:00,360 --> 00:10:05,940
So hopefully with that, you understand, at least conceptually at what Watpac and Bable do, that's

147
00:10:05,940 --> 00:10:10,200
not to say that for your projects, especially when you're on a new team, that you suddenly write this

148
00:10:10,230 --> 00:10:11,300
yourself from scratch.

149
00:10:12,000 --> 00:10:18,510
If you also want, you can create a new create react app application, inject it and look at how complicated

150
00:10:18,540 --> 00:10:22,980
that code is, because now you at least have a better understanding of what it is that Watpac is doing.

151
00:10:23,640 --> 00:10:27,750
Look at the Babo RC as well and see how many configuration options there are.

152
00:10:28,820 --> 00:10:34,040
Compare and contrast that with the documentation and you'll at least see all of the available possibilities

153
00:10:34,040 --> 00:10:36,170
that you have in front of you with Web hacking babble.

154
00:10:36,740 --> 00:10:40,070
So hopefully you've enjoyed this lesson and I'll see you in the next lesson.
