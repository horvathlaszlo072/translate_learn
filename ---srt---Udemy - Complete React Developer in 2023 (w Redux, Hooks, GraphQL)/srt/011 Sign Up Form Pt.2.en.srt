1
00:00:00,610 --> 00:00:01,720
Welcome back, everyone.

2
00:00:02,590 --> 00:00:08,110
In the last video, we learned about how to leverage this new pattern from you state where we create

3
00:00:08,110 --> 00:00:14,830
some object that allows us to keep track of multiple fields inside of our form due to the fact that

4
00:00:14,830 --> 00:00:18,640
there was overlap between the name and the value that we had generated.

5
00:00:18,820 --> 00:00:25,930
We were able to create this easy, simple shorthand method of storing and setting this uniform object

6
00:00:26,080 --> 00:00:27,310
that we had in our form.

7
00:00:27,820 --> 00:00:32,950
In this video, what we're going to do is utilize this form field in order to actually authenticate

8
00:00:32,950 --> 00:00:35,350
our user with their email and password.

9
00:00:36,130 --> 00:00:42,940
So one thing I want you to notice is that here we are keeping the same values that we know we need for

10
00:00:42,940 --> 00:00:44,170
our create.

11
00:00:45,340 --> 00:00:47,290
User document from Auth Method.

12
00:00:47,800 --> 00:00:54,070
This user off, as we know, sets a display name and an email, and the created ad is generated inside,

13
00:00:54,280 --> 00:01:00,670
but primarily what needs to be passed through is display, name and email for us here inside of our

14
00:01:00,670 --> 00:01:01,390
new signing.

15
00:01:01,660 --> 00:01:04,660
What we do need is very similar.

16
00:01:04,900 --> 00:01:07,240
We needed the display name, we needed the email.

17
00:01:07,390 --> 00:01:09,370
But now with password, a confirmed password.

18
00:01:09,640 --> 00:01:13,960
The thing to remember here is we don't actually want to store these inside of our database.

19
00:01:14,260 --> 00:01:16,090
This is considered sensitive information.

20
00:01:16,600 --> 00:01:21,370
Instead, what we want to do is we want to leverage Firebase authentication, which will figure out

21
00:01:21,370 --> 00:01:23,770
whether or not the password matches with the user.

22
00:01:23,950 --> 00:01:30,430
But they obfuscate that from us so that even if somehow our firebase gets hacked or a fire gets hacked,

23
00:01:30,820 --> 00:01:34,180
our passwords don't get leaked and it's not a security concern for us.

24
00:01:34,420 --> 00:01:37,450
So that's a great functionality as well of Firestorm.

25
00:01:38,640 --> 00:01:44,370
Now, what we want to do is we want to leverage all these default form fields that we've set up and

26
00:01:44,370 --> 00:01:51,150
actually authenticate the user, which means we're going to need to leverage new utilities inside of

27
00:01:51,150 --> 00:01:52,200
our firebase utils.

28
00:01:52,950 --> 00:02:00,480
So as we saw before, when we were using Firebase off, we introduced the sign in with redirect and

29
00:02:00,480 --> 00:02:02,010
sign in with pop up methods.

30
00:02:02,430 --> 00:02:08,190
These methods took some specific provider that told us which external provider we were trying to sign

31
00:02:08,190 --> 00:02:08,730
in with.

32
00:02:08,970 --> 00:02:09,960
Maybe it was Facebook.

33
00:02:10,170 --> 00:02:15,060
Maybe it was Google, it was Google, in fact for us, but maybe it could be GitHub or any of those

34
00:02:15,060 --> 00:02:16,860
other options here.

35
00:02:16,980 --> 00:02:24,090
When you look inside of your actual console and you look at the sign and methods when we added the provider.

36
00:02:24,300 --> 00:02:29,370
These are considered native providers, which means that we don't actually need to supply a provider.

37
00:02:29,490 --> 00:02:32,070
These come by default with Firebase off.

38
00:02:32,550 --> 00:02:37,350
So all we need then is not another provider instance, but we just need the method.

39
00:02:38,380 --> 00:02:43,930
Now, this method we're going to import is actually aptly named create user with email and password.

40
00:02:44,440 --> 00:02:45,790
And let me show you how to use it.

41
00:02:45,880 --> 00:02:46,720
It's pretty simple.

42
00:02:47,470 --> 00:02:50,590
First of all, we want to do is we want to create another function.

43
00:02:50,890 --> 00:02:56,590
And I want to call it something explicit, like create off user with email and password, because as

44
00:02:56,590 --> 00:03:03,550
we know, what we're making is a authenticated user inside of our Firebase Authentication tab.

45
00:03:04,210 --> 00:03:09,190
This is not necessarily a user document inside of our fire store instance.

46
00:03:09,580 --> 00:03:12,880
So here I'm being more explicit about what this function will do.

47
00:03:13,240 --> 00:03:18,520
It's going to be an async function because we're going to be setting some values a synchronously inside

48
00:03:18,520 --> 00:03:19,150
a firebase.

49
00:03:19,900 --> 00:03:27,340
And here what I want you to notice is that I tend to create these methods inside of this utility file.

50
00:03:27,640 --> 00:03:35,140
And the reason why I do this is because it allows me to control the large majority of how my application

51
00:03:35,140 --> 00:03:37,900
interfaces with this external service.

52
00:03:38,440 --> 00:03:44,830
In this particular case, the external service is Firebase or Firestar or whichever other service inside

53
00:03:44,830 --> 00:03:46,090
of Firebase that I'm working with.

54
00:03:46,720 --> 00:03:52,060
The reason why I do this is because it allows me to create this separation layer between my frontend

55
00:03:52,060 --> 00:03:54,250
as well as the services it relies on.

56
00:03:54,670 --> 00:03:59,380
Let's say, for example, Google Firebase decided to change some of these methods.

57
00:03:59,830 --> 00:04:04,030
Now what happens is that suddenly my application might start breaking without me noticing.

58
00:04:04,450 --> 00:04:13,480
However, if I have more clearly defined where my code is going to directly interact with the underlying

59
00:04:13,480 --> 00:04:13,910
service.

60
00:04:13,930 --> 00:04:17,830
So in this particular case, creating user documents from off, let's take this example.

61
00:04:18,640 --> 00:04:23,100
What happens if some of the way that we get these documents changed?

62
00:04:23,410 --> 00:04:28,120
Let's say they change up the methodology that we receive documents the way that we fetch the data,

63
00:04:28,270 --> 00:04:33,510
the way that we determine whether or not some of the data or maybe even the reference exists or not.

64
00:04:33,520 --> 00:04:35,020
Let's say all of this changes.

65
00:04:35,440 --> 00:04:41,530
Does that mean that we have to refactor everywhere inside of our application that is now utilizing Firebase

66
00:04:41,530 --> 00:04:44,200
as authentication and to create this documents?

67
00:04:44,770 --> 00:04:50,230
No, because now we can just change it in this one place and there's one place I can figure out how

68
00:04:50,230 --> 00:04:56,110
it is that Firebase wants me to authenticate in a new way now and just modify in one place, even if

69
00:04:56,110 --> 00:04:58,390
I call this method in more than one place.

70
00:04:58,840 --> 00:05:04,090
The other thing, too, is that if we look at a method like create author user, this might be relatively

71
00:05:04,090 --> 00:05:04,480
simple.

72
00:05:04,930 --> 00:05:08,740
We know that with this method, or at least I know what this method.

73
00:05:09,160 --> 00:05:15,700
All I need to pass it is off an email string and a password string, and Firebase is going to figure

74
00:05:15,700 --> 00:05:17,260
out how to authenticate this user.

75
00:05:17,620 --> 00:05:18,880
But what if they change this?

76
00:05:18,880 --> 00:05:20,880
What if they need more values to be added?

77
00:05:20,890 --> 00:05:23,170
Maybe there's more additional options that they extend.

78
00:05:23,350 --> 00:05:27,610
Maybe there's even more steps that get involved here when this changes.

79
00:05:27,850 --> 00:05:32,110
Again, all I need to do is modify this one function, but what I've done.

80
00:05:33,110 --> 00:05:39,080
Is I've protected my Front-End application from this external service that's subject to change.

81
00:05:39,470 --> 00:05:47,420
Now it becomes much easier because I define how it is that this service is going to interface with my

82
00:05:47,660 --> 00:05:48,770
frontend application.

83
00:05:49,130 --> 00:05:55,610
I've added this utilities as essentially a layer in between my frontend code and this additional library

84
00:05:55,610 --> 00:05:56,330
that I'm working with.

85
00:05:57,260 --> 00:06:02,510
So here, for example, I know that what I want is an email and I also want a password.

86
00:06:03,350 --> 00:06:09,080
If I don't receive either of these things, meaning that if I don't get an email or if I don't get a

87
00:06:09,080 --> 00:06:10,830
password, then I want to exit.

88
00:06:10,850 --> 00:06:17,240
I don't want to call this method, and what I want to return is the awaited value from this method.

89
00:06:18,290 --> 00:06:21,320
Because here, once this authenticates, I want to see what I get back.

90
00:06:21,680 --> 00:06:26,300
But the key thing here is that I know this method will never call if I don't get an email value and

91
00:06:26,300 --> 00:06:27,560
I don't get a password value.

92
00:06:28,310 --> 00:06:35,480
Now, in a much later lesson in the course, we are going to learn about much more rigid ability to

93
00:06:35,480 --> 00:06:37,880
protect our code using TypeScript.

94
00:06:38,060 --> 00:06:39,950
But for now, I don't want you to think about that.

95
00:06:39,950 --> 00:06:44,990
It becomes too much to think about when we're already in the process of just learning react and a lot

96
00:06:44,990 --> 00:06:47,810
of the React ecosystem, as well as these end patterns.

97
00:06:48,080 --> 00:06:53,250
But I do want to highlight here that we are protectively focusing on how to defend our code.

98
00:06:53,810 --> 00:06:58,280
We can actually also do something similar inside of our create user off document.

99
00:06:58,760 --> 00:07:02,750
Here we can say that if we don't get a user off, we also want to return.

100
00:07:03,290 --> 00:07:04,820
So this is another way we can protect our code.

101
00:07:05,420 --> 00:07:11,540
But these are just different ways that we're saying if we do not receive any of these arguments, then

102
00:07:11,540 --> 00:07:12,890
just don't run the function.

103
00:07:13,920 --> 00:07:18,690
TypeScript kind of makes this significantly easier, but again, we'll explore that later.

104
00:07:18,810 --> 00:07:20,520
So keep your eyes peeled for that.

105
00:07:21,060 --> 00:07:26,010
But here, at the very least, we now have this new method to create author user with email and password.

106
00:07:26,370 --> 00:07:29,160
We pass that the off, we pass it, the email and the password.

107
00:07:29,310 --> 00:07:34,080
And then this will create an authenticated user and give us back some auth object.

108
00:07:35,300 --> 00:07:39,500
Inside of our sign up form, now, let's import in this method we just created.

109
00:07:40,480 --> 00:07:44,110
And let's pull this in from the appropriate place.

110
00:07:45,570 --> 00:07:47,520
Of our utils, firebase.

111
00:07:47,700 --> 00:07:48,630
Firebase utils.

112
00:07:49,710 --> 00:07:57,480
And now that you have this method, my challenge to you for this function right here is create it and

113
00:07:57,480 --> 00:07:59,640
figure out what's needed for this feature.

114
00:08:00,480 --> 00:08:04,950
This is actually going to be your first big challenge because we've learned a lot of the little bits

115
00:08:04,950 --> 00:08:06,930
that are required to make this work.

116
00:08:06,930 --> 00:08:13,140
Now we've learned extensively how to work with Firebase enough that we have an idea of what the object

117
00:08:13,140 --> 00:08:16,140
we're going to get back if this is successful is going to be.

118
00:08:17,010 --> 00:08:19,800
And here I just want you to think about these requirements.

119
00:08:20,220 --> 00:08:26,220
So first, let's just set up this method before I ask you to pause the video and give it a try yourself.

120
00:08:26,970 --> 00:08:29,370
I'm just going to call this handle submits.

121
00:08:30,300 --> 00:08:31,800
This is going to be a method.

122
00:08:33,240 --> 00:08:38,070
That is going to leverage the farm fields in order to actually create this method.

123
00:08:38,520 --> 00:08:44,640
So again, this is an async method because we're generating a user document inside of an external service

124
00:08:45,510 --> 00:08:47,250
and it's an async method.

125
00:08:47,670 --> 00:08:53,970
And because it's going to trigger on this on submit event handler, we're going to get an event.

126
00:08:54,900 --> 00:08:57,180
So I'm going to teach you how to set up some of this basic stuff.

127
00:08:57,660 --> 00:08:59,970
The first thing we want to do is we want to prevent default.

128
00:09:00,540 --> 00:09:04,170
Essentially, we don't want any default behavior of the form.

129
00:09:04,710 --> 00:09:08,610
We are saying that all of what's going to happen in the form we are going to handle.

130
00:09:09,090 --> 00:09:12,600
All we need you to do is just tell us when the form has been submit.

131
00:09:13,530 --> 00:09:17,280
Once this event is prevented, there's a couple of things you need to do.

132
00:09:17,790 --> 00:09:23,340
You need to confirm that the password matches because again, they have to type the two passwords together.

133
00:09:24,350 --> 00:09:31,040
What we also need to do is we need to then actually see if we've authenticated that user with email

134
00:09:31,040 --> 00:09:31,670
and password.

135
00:09:32,420 --> 00:09:39,350
Then what we want to do is we want to create a user document from what this returns.

136
00:09:39,830 --> 00:09:46,670
So step by step, I want you to try and actually piece together this handle, submit function yourself.

137
00:09:47,120 --> 00:09:48,080
We've done it before.

138
00:09:48,440 --> 00:09:51,050
We did it when we were using our sign signing component.

139
00:09:51,050 --> 00:09:55,940
It's going to be similar, except now you're just creating that authenticated user with email and password.

140
00:09:56,910 --> 00:09:58,800
So try it out, walk through it.

141
00:09:59,160 --> 00:10:01,680
Use these fields of email password.

142
00:10:01,890 --> 00:10:06,990
And don't forget to pass display name when you're actually trying to generate the document from what

143
00:10:06,990 --> 00:10:08,550
we get back from the author.

144
00:10:09,240 --> 00:10:13,260
But I just want you to play around and tinker with this actual function.

145
00:10:13,410 --> 00:10:16,110
Test it yourself and see if you can build out this feature.

146
00:10:16,650 --> 00:10:20,130
So once you've done that, join me in next video and we'll do it together.
