1
00:00:02,010 --> 00:00:02,610
Welcome back.

2
00:00:03,450 --> 00:00:09,580
Now, tests in general can be grouped into three main categories.

3
00:00:10,110 --> 00:00:16,890
Now everybody has their own definition and sometimes somebody's definition might overlap with the other

4
00:00:16,890 --> 00:00:17,660
category.

5
00:00:18,000 --> 00:00:26,220
But just as a mental framework, think of tests as having three main distinct types.

6
00:00:27,600 --> 00:00:34,560
The first, ah, unit tests, and these are the most common, the easiest to implement and the ones

7
00:00:34,560 --> 00:00:37,530
that are really important to have in your application.

8
00:00:39,170 --> 00:00:47,960
Unit tests, as the name suggests, tests, individual functions or classes, so if I had a some function,

9
00:00:48,500 --> 00:00:53,810
I'm going to just test that one function to make sure that it does what it says it does.

10
00:00:54,080 --> 00:01:00,860
Maybe if it accepts parameter A and B, I want to make sure that A and B get added with that function.

11
00:01:02,210 --> 00:01:09,860
They are the cheapest to implement, the easiest to implement and 90 percent of your time, you're going

12
00:01:09,860 --> 00:01:12,230
to be working on writing unit tests.

13
00:01:12,270 --> 00:01:13,980
They're very, very useful.

14
00:01:14,570 --> 00:01:18,390
The second one is something called integration tests.

15
00:01:19,310 --> 00:01:27,830
This is testing how different pieces of code work together so it can be testing of whether the database

16
00:01:28,250 --> 00:01:33,770
works with the Express app that's requesting some data from the database.

17
00:01:34,130 --> 00:01:42,740
Or it could be how a function works with another function and how this connection between them works

18
00:01:42,740 --> 00:01:43,610
and testing that.

19
00:01:44,610 --> 00:01:53,220
Finally, we have automation tests or UI tests, this usually involves testing real life scenarios on

20
00:01:53,220 --> 00:01:59,730
the browser by controlling the browser and making sure that the expected behavior on the web is correct.

21
00:02:00,390 --> 00:02:07,440
Now, you can have humans doing this where they go through and click through everything on your website

22
00:02:07,440 --> 00:02:08,550
and make sure everything works.

23
00:02:08,790 --> 00:02:16,170
Or you can programmatically have robots or code that you're right that runs through these tests for

24
00:02:16,170 --> 00:02:16,350
you.

25
00:02:17,310 --> 00:02:22,980
As we go down into this order, they become more and more expensive to implement.

26
00:02:23,580 --> 00:02:24,300
What does that mean?

27
00:02:24,690 --> 00:02:31,860
Well, automation tests, just by hearing about what they do, are a lot more difficult to implement

28
00:02:31,860 --> 00:02:32,840
than unit tests.

29
00:02:32,910 --> 00:02:33,270
Right.

30
00:02:34,250 --> 00:02:39,490
So all these tests have they use cases but have their pros and cons as well.

31
00:02:41,170 --> 00:02:43,000
And we're going to talk about each one of these.

32
00:02:44,660 --> 00:02:50,540
But for now, let's leave it at that and in the next video, we're going to talk about some of the tools

33
00:02:50,540 --> 00:02:53,320
that you're going to encounter as you start to write tests.

34
00:02:54,630 --> 00:02:55,500
I'll see you in the next one.
