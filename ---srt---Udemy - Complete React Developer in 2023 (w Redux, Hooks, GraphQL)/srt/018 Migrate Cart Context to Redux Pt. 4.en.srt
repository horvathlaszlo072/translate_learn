1
00:00:00,510 --> 00:00:01,470
Welcome back, everyone.

2
00:00:02,430 --> 00:00:08,040
The last two remaining files that we need to migrate out of context towards Caritas is the checkout

3
00:00:08,040 --> 00:00:10,360
component and the checkout item component.

4
00:00:11,010 --> 00:00:15,750
To start with the checkout component, we know that we need the car items and the cart total.

5
00:00:16,320 --> 00:00:21,720
So first, let's once again bring in the appropriate hooks that we need from React Redux.

6
00:00:22,410 --> 00:00:25,080
We need the use selector hook.

7
00:00:27,240 --> 00:00:27,810
Like so.

8
00:00:28,800 --> 00:00:33,780
And then what we need is both these select car items and select cart total.

9
00:00:39,690 --> 00:00:42,420
And these will come from our store folder.

10
00:00:44,570 --> 00:00:45,770
Our cart folder.

11
00:00:46,890 --> 00:00:48,270
Our carp selector.

12
00:00:49,750 --> 00:00:53,680
And then it's just a matter of replacing our car items.

13
00:00:55,510 --> 00:01:03,730
That we were getting from context before to use the selector select card items and then the card total.

14
00:01:05,270 --> 00:01:06,830
So that we're using the selector.

15
00:01:08,560 --> 00:01:09,520
Select Carr total.

16
00:01:16,540 --> 00:01:19,660
Now what we need to do is do the same thing for our checkout item.

17
00:01:20,620 --> 00:01:26,140
So our checkout item has both add items, a car remove item from cart and clear item from cart.

18
00:01:26,920 --> 00:01:31,510
And as we know with these three methods that we have which are action creators, they need the cart

19
00:01:31,510 --> 00:01:32,350
items as well.

20
00:01:32,860 --> 00:01:37,540
So this component is actually going to be the one that calls probably the most.

21
00:01:38,140 --> 00:01:40,360
So we'll need our use selector.

22
00:01:42,990 --> 00:01:45,000
Well also need use dispatch.

23
00:01:46,200 --> 00:01:50,010
And then we're going to bring in our select car items.

24
00:01:52,850 --> 00:01:54,170
From our card selector.

25
00:01:54,860 --> 00:01:57,050
And we also need both.

26
00:01:57,050 --> 00:02:01,550
Ah, add item to cart from our cart action.

27
00:02:02,330 --> 00:02:03,290
We need our.

28
00:02:04,590 --> 00:02:05,760
Clear item from CART.

29
00:02:07,650 --> 00:02:11,010
And we also need remove item from cart.

30
00:02:11,970 --> 00:02:14,310
It seems that I've called it remove item to cart.

31
00:02:14,340 --> 00:02:21,210
So let's actually fix this and name this something that is more grammatically correct instead of remove

32
00:02:21,210 --> 00:02:22,130
item to cart.

33
00:02:22,200 --> 00:02:24,630
I'm going to say remove item from cart.

34
00:02:26,190 --> 00:02:30,000
And then here I am going to reflect the same as well.

35
00:02:32,900 --> 00:02:36,710
And now all we can do is we can start replacing what we had before.

36
00:02:37,550 --> 00:02:42,410
So these three methods are now action creators, which will need to be dispatched.

37
00:02:43,310 --> 00:02:47,720
So of course this means that remove item to cart is remove item from cart like.

38
00:02:47,720 --> 00:02:53,030
So we no longer need context because we've imported them in from the correct action.

39
00:02:53,030 --> 00:02:53,690
Create our file.

40
00:02:54,320 --> 00:03:00,800
And then I just need to wrap these in the dispatch, which we will get from our use dispatch.

41
00:03:04,360 --> 00:03:06,010
So just a lot of boilerplate at this point.

42
00:03:06,160 --> 00:03:08,980
Everything is something that we're already pretty comfortable doing.

43
00:03:10,540 --> 00:03:17,020
The other thing we need is we need to get the cart items from our use selector select cart items.

44
00:03:19,840 --> 00:03:26,200
And what we can do is make sure that when we call clear items from CART, we pass it the cart items

45
00:03:26,200 --> 00:03:27,340
as the first argument.

46
00:03:34,850 --> 00:03:38,000
And then we're going to do the same for these two remaining methods.

47
00:03:38,480 --> 00:03:44,450
We're going to wrap this in a dispatch and we're going to pass cart items as the first parameter.

48
00:03:46,650 --> 00:03:48,240
And do the same for the remaining one.

49
00:03:52,960 --> 00:03:54,040
And now if we save this.

50
00:03:55,510 --> 00:03:56,950
Let's check to make sure our code works.

51
00:03:57,850 --> 00:03:58,750
So going back here.

52
00:04:00,180 --> 00:04:01,260
We had our go to check out.

53
00:04:02,660 --> 00:04:05,930
We see that now where inside we can remove items.

54
00:04:06,560 --> 00:04:11,540
Our total updates are effectively we can get rid of an item and we can clear the item.

55
00:04:12,230 --> 00:04:12,800
So there we go.

56
00:04:13,190 --> 00:04:17,120
Everything works and that is our full migration.

57
00:04:17,780 --> 00:04:23,690
So the last thing we need to do is just remove the correct spending context for CART because we don't

58
00:04:23,690 --> 00:04:24,350
need those anymore.

59
00:04:24,980 --> 00:04:28,910
In fact, we can even delete our context folder because there's nothing inside.

60
00:04:30,190 --> 00:04:30,880
And there we go.

61
00:04:31,030 --> 00:04:35,290
We've migrated everything over from our cart into Redux.

62
00:04:36,190 --> 00:04:38,890
So there's a lot of little things that we had to tweak.

63
00:04:39,310 --> 00:04:45,790
But what we really understood is that there is a different way of thinking about how to structure your

64
00:04:45,790 --> 00:04:48,730
code when you're using redux versus context.

65
00:04:49,210 --> 00:04:56,350
The primary one is that inside of your cart actions, you want to figure out what you need because you

66
00:04:56,350 --> 00:05:00,040
no longer have that scoped context that you had before.

67
00:05:00,520 --> 00:05:05,440
You have to pass everything in side of these function creators, and they should be as pure as possible.

68
00:05:05,860 --> 00:05:12,220
Similarly, a lot of the logic that we are dependent on is being extrapolated into selectors and using

69
00:05:12,220 --> 00:05:12,880
results.

70
00:05:12,910 --> 00:05:19,210
We can memorize them so that they are just as efficient as if we were to store them using either use

71
00:05:19,210 --> 00:05:21,850
reducer or you stay inside of a context component.

72
00:05:23,360 --> 00:05:30,650
So now that we have this done, another great benefit that we get from Redux is actually the ability

73
00:05:30,650 --> 00:05:33,050
to persist inside of local storage.

74
00:05:33,530 --> 00:05:38,810
And it's technically doable as well inside of context, but you have to write your own code to do so.

75
00:05:39,020 --> 00:05:44,270
Whereas inside of Redux there is a very, very popular library called Redux Persist.

76
00:05:44,870 --> 00:05:51,410
What it essentially allows us to do, really persist, is persist any of our local state into local

77
00:05:51,410 --> 00:05:58,160
storage on the web browser, meaning that every browser has access to this little slice of memory.

78
00:05:58,820 --> 00:06:06,980
We can actually commit any state changes that the user has to that local storage so that when they come

79
00:06:06,980 --> 00:06:13,700
back to their session they can actually re hydrate this store with their previous states, which means

80
00:06:13,700 --> 00:06:19,250
the application, if done correctly, the state of the application is reflected by redux.

81
00:06:19,760 --> 00:06:24,920
So that means that technically we can actually persist their cart throughout their journey.

82
00:06:25,610 --> 00:06:27,980
Let's say they leave and they come back or they refresh.

83
00:06:28,400 --> 00:06:33,890
If we refresh right now, what we notice is that our cart goes back to zero, but we can actually persist.

84
00:06:33,890 --> 00:06:35,330
This using redux persist.

85
00:06:35,690 --> 00:06:37,870
So that's what we're going to do in the next video.
