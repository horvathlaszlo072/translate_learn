1
00:00:00,540 --> 00:00:01,410
Welcome back, everyone.

2
00:00:02,230 --> 00:00:03,820
So let's continue studying this reducer.

3
00:00:04,890 --> 00:00:05,190
Here.

4
00:00:05,190 --> 00:00:11,820
What you'll notice is that our action cannot structure payload when we hover over it says property payload

5
00:00:11,820 --> 00:00:14,100
does not exist on category action.

6
00:00:14,820 --> 00:00:21,300
The reason for this is because inside of our union type, we have actions that do not have a payload

7
00:00:21,300 --> 00:00:21,810
property.

8
00:00:22,320 --> 00:00:30,960
So as I mentioned before, even though we are passing in a payload right here that points to avoid this

9
00:00:30,960 --> 00:00:34,050
action, does not have a payload value.

10
00:00:34,380 --> 00:00:39,120
So as a result, you cannot de structure something that does not exist.

11
00:00:39,630 --> 00:00:46,050
So even though on some of our action types inside of category action, they are actions with payloads.

12
00:00:46,560 --> 00:00:51,130
But the moment you have one that does not have that property, this will not work.

13
00:00:51,600 --> 00:00:52,500
And this is fine.

14
00:00:52,860 --> 00:00:57,300
We can just get rid of this call right here where we de structure.

15
00:00:57,840 --> 00:01:01,200
Instead, we'll switch right on action type.

16
00:01:01,920 --> 00:01:08,970
And what we'll say is that categories, action, payload and error action, drop payload.

17
00:01:09,090 --> 00:01:10,200
So no restructuring.

18
00:01:11,040 --> 00:01:17,520
And instead what happens, you'll notice is that because we're switching on the type, typescript is

19
00:01:17,520 --> 00:01:23,940
smart enough to know that if your case hits this fetch category start, then what you're going to get

20
00:01:23,940 --> 00:01:26,880
here in the action is a regular action.

21
00:01:27,180 --> 00:01:34,440
Similarly, if you're inside and you pass this fetch category success, then this action type must be

22
00:01:34,440 --> 00:01:40,500
of fetch category success, and therefore the payload must be the correct payload.

23
00:01:42,270 --> 00:01:47,250
So that's one of those benefits that we get by creating this union type.

24
00:01:47,640 --> 00:01:53,550
And TypeScript is smart enough to know that based on what checks and what passes, it will narrow the

25
00:01:53,550 --> 00:01:58,080
type down to what must be the case of this action by the time you get here.

26
00:01:58,980 --> 00:02:02,280
Now, what we need to do is also we need to type this initial state.

27
00:02:02,940 --> 00:02:05,850
So here I'm going to say export type categories.

28
00:02:05,850 --> 00:02:07,230
State is equal.

29
00:02:08,400 --> 00:02:14,860
To this object where we know this is read only because we cannot ever modify these values.

30
00:02:14,860 --> 00:02:22,500
So read only is a additional property you can add so that you force it, that this state object can

31
00:02:22,500 --> 00:02:23,460
never be modified.

32
00:02:23,670 --> 00:02:24,810
It can only be read.

33
00:02:25,500 --> 00:02:27,870
And again with the reducers you never modify the state.

34
00:02:27,870 --> 00:02:30,270
You always spread over and create a new state.

35
00:02:31,600 --> 00:02:36,640
Now, the values, of course, are categories, which is a category array.

36
00:02:37,360 --> 00:02:39,820
So let's assure that we bring that in.

37
00:02:41,400 --> 00:02:42,870
And then read only.

38
00:02:43,710 --> 00:02:47,220
We also need is loading which is a boolean.

39
00:02:48,430 --> 00:02:55,330
And finally we have air which can initialize as an error or as null.

40
00:02:56,930 --> 00:02:58,430
So now we save that.

41
00:02:58,760 --> 00:03:04,340
And you'll look at this and you'll notice that this is pretty much what our initial state value will

42
00:03:04,340 --> 00:03:04,550
be.

43
00:03:05,750 --> 00:03:11,090
And because this initial state value is being cast here, this is going to inherit that.

44
00:03:11,330 --> 00:03:14,420
And state will always be of type category state.

45
00:03:15,140 --> 00:03:21,440
And now we have typed out this reducer as well as this initial state, as well as the state value as

46
00:03:21,440 --> 00:03:21,650
well.

47
00:03:22,870 --> 00:03:23,500
So there we go.

48
00:03:23,740 --> 00:03:25,780
We have typed out our reducer.

49
00:03:25,900 --> 00:03:32,560
The key thing here is that now we're using this discriminatory union in order for us to state that this

50
00:03:32,560 --> 00:03:37,030
is what must be the types of actions that our reducer response to.

51
00:03:38,680 --> 00:03:41,440
The last thing we need to take out is our selector.

52
00:03:42,340 --> 00:03:47,160
So here inside of the selector, I'm also going to rename this to Dots.

53
00:03:48,310 --> 00:03:55,810
The moment we start actually converting our selectors over until you convert all of them, TypeScript

54
00:03:55,810 --> 00:04:01,330
is actually not going to compile for all of this code and the reason why is because we do not have a

55
00:04:01,330 --> 00:04:04,270
root state type for our top level selector yet.

56
00:04:05,020 --> 00:04:09,760
So what you'll notice is whenever you check your application, unfortunately it will always throw an

57
00:04:09,760 --> 00:04:13,270
error until we get to the section where we type out the root state.

58
00:04:14,230 --> 00:04:22,210
So in this conversion we can't check that everything is continuing to work unless we type the selectors

59
00:04:22,210 --> 00:04:22,570
last.

60
00:04:23,230 --> 00:04:26,590
But again, I'm trying to show you this process of typing out these files.

61
00:04:27,280 --> 00:04:28,450
So just follow along.

62
00:04:28,540 --> 00:04:30,490
And once we're finished, everything.

63
00:04:30,490 --> 00:04:32,260
It will all work anyways.

64
00:04:33,930 --> 00:04:38,940
And as far as typing our selector goes, we just need to think about what it is that the selector needs

65
00:04:38,940 --> 00:04:40,560
to actually return back.

66
00:04:41,580 --> 00:04:43,860
So inside again at this top level.

67
00:04:45,550 --> 00:04:45,850
Here.

68
00:04:45,850 --> 00:04:54,550
We know that we're turning back the category slice which we just defined as the categories state.

69
00:04:56,850 --> 00:04:57,570
So this.

70
00:04:58,590 --> 00:04:59,970
Is what we want to return back.

71
00:05:02,130 --> 00:05:02,640
Right here.

72
00:05:04,010 --> 00:05:12,860
And now if you actually look inside of this selector, it's actually smart enough to know what the types

73
00:05:12,860 --> 00:05:17,330
are now, because again, this category state is what gets returned by this selector.

74
00:05:17,870 --> 00:05:22,940
So then this value that it receives, this parameter must be the category state.

75
00:05:23,270 --> 00:05:28,810
So if we pluck off the category's value, then select categories returns a memoir selector.

76
00:05:28,820 --> 00:05:31,490
So that's what all of that stuff near the end is showing you.

77
00:05:32,030 --> 00:05:37,700
But notice how what it returns back is the category array, which is what this category's value points

78
00:05:37,700 --> 00:05:37,910
to.

79
00:05:39,690 --> 00:05:47,010
Now for this next selector, we see that we are indeed typing already and the TypeScript compiler knows

80
00:05:47,010 --> 00:05:48,390
that we're getting the category array.

81
00:05:49,170 --> 00:05:53,730
However, it doesn't know what to do with this category is reduced because it doesn't actually know

82
00:05:53,730 --> 00:05:56,580
what this accumulator value is since it's of any type.

83
00:05:56,580 --> 00:05:58,290
Right now, it's just an empty object.

84
00:05:58,980 --> 00:06:04,230
So what we need to do is we need to type explicitly what we expect the category map to be.

85
00:06:05,160 --> 00:06:10,650
So inside of our category type, I am going to now create a category map type.

86
00:06:11,460 --> 00:06:15,090
So here we're going to need to export this as we have been doing.

87
00:06:15,300 --> 00:06:17,940
So export type category map.

88
00:06:19,480 --> 00:06:21,580
So what is the category map?

89
00:06:22,390 --> 00:06:26,710
Essentially, it's going to be a bunch of different key value pairs.

90
00:06:27,670 --> 00:06:33,760
And the pair value is going to be category items, arrays, because we're essentially converting this

91
00:06:33,760 --> 00:06:39,490
category object, which is an array of these categories over to a map.

92
00:06:40,430 --> 00:06:45,800
Now, in order for us to say that this key is just going to be any string, you're going to use these

93
00:06:46,610 --> 00:06:50,540
square brackets and you're going to say the key is just some string value.

94
00:06:51,540 --> 00:06:52,620
It can be any value.

95
00:06:52,620 --> 00:06:53,160
It doesn't matter.

96
00:06:53,160 --> 00:06:57,360
It's just a string because we don't know actually what the key is going to be.

97
00:06:57,990 --> 00:06:59,430
It's based off of the title.

98
00:06:59,880 --> 00:07:06,630
So this allows us to just say, Hey, all I know is that this key is a string, but the value is definitely

99
00:07:06,630 --> 00:07:11,880
going to be a category item array, and that is our category map.

100
00:07:13,480 --> 00:07:13,780
Next.

101
00:07:13,780 --> 00:07:16,150
All we need to do is just import this in.

102
00:07:20,200 --> 00:07:21,610
Two are selective file.

103
00:07:26,910 --> 00:07:33,300
And now what we can say is that from this selector, we're going to return a category map.

104
00:07:34,380 --> 00:07:39,600
And this object right here we can type as category map like so.

105
00:07:40,560 --> 00:07:47,430
So right now, essentially, you generally don't want to cast anything because essentially you're overwriting

106
00:07:47,430 --> 00:07:47,790
the type.

107
00:07:47,790 --> 00:07:51,000
You're telling TypeScript that this type is going to be something.

108
00:07:51,450 --> 00:07:57,690
But here with Reduce, we know that what we're building out is going to be this category map object.

109
00:07:57,930 --> 00:08:01,560
So this is a place where it's relatively type safe to do this.

110
00:08:02,720 --> 00:08:03,350
But now.

111
00:08:04,410 --> 00:08:07,290
We at least have typed out all of our action creators.

112
00:08:08,010 --> 00:08:13,290
Again, I'm going to mention that until we build out all of these reducers, we can't technically type

113
00:08:13,290 --> 00:08:14,340
out this root state.

114
00:08:15,270 --> 00:08:16,470
So that's what we're going to do next.

115
00:08:17,990 --> 00:08:23,540
But at the very least, now we have typed out everything except our sagas, the sagas we're going to

116
00:08:23,540 --> 00:08:26,150
type last because they're a little bit more complicated.

117
00:08:26,150 --> 00:08:28,400
So I want to explain what we're going to do with sagas.

118
00:08:29,000 --> 00:08:35,060
But at the very least, we have pretty much struck a general pattern for typing out the actions, the

119
00:08:35,060 --> 00:08:38,480
reducers as well as the selectors.

120
00:08:39,170 --> 00:08:43,820
Now let's take what we've learned and continue typing out the rest of these Redux files.

121
00:08:44,480 --> 00:08:46,090
I'll see you in the next video.
