1
00:00:01,400 --> 00:00:11,030
Before we continue, I think it's very important for us to take some time to better understand JavaScript

2
00:00:11,030 --> 00:00:12,900
asynchronous event handling.

3
00:00:13,610 --> 00:00:20,870
Now, that's a mouthful, but asynchronous event handling is a huge part of not only JavaScript, but

4
00:00:20,870 --> 00:00:23,360
also the react ecosystem.

5
00:00:24,360 --> 00:00:24,810
Now.

6
00:00:25,790 --> 00:00:34,160
With Essex, there was promises that got introduced as a means of handling asynchronous events, we've

7
00:00:34,160 --> 00:00:39,640
already used them a little bit when we used fetch in our monster's Rolodex project.

8
00:00:40,160 --> 00:00:49,840
But let's take a deeper dive into both fetch and promise as well as the new S7 syntax of async await.

9
00:00:50,660 --> 00:00:55,070
These are three things that we're going to use a lot in our application.

10
00:00:56,010 --> 00:01:04,680
So let's first look at what we had before promises so we could understand how promises were.

11
00:01:07,250 --> 00:01:12,510
Now, I've got some pseudocode here, but you can imagine what it is that this code is trying to do.

12
00:01:13,280 --> 00:01:20,860
We have some function called get user, which fetches that from this link, right, of Facebook's Kashiwa.

13
00:01:20,870 --> 00:01:29,150
So we're fetching our Facebook user, Iowa, and then we give it this function, which is called a callback.

14
00:01:29,990 --> 00:01:38,540
Inside of it is either going to get the successfully retrieved user or an error if something goes wrong

15
00:01:38,540 --> 00:01:39,410
along the way.

16
00:01:41,040 --> 00:01:47,430
If there's an error, we want to throw the error, right, if there is no error, then we want to get

17
00:01:47,430 --> 00:01:51,030
the user ID and set it to this concept of user ID.

18
00:01:51,870 --> 00:01:58,920
And then we want to pass that into this new function, get friends or we give it the user ID and maybe

19
00:01:58,920 --> 00:02:01,500
that fetches friends from whatever back in API.

20
00:02:01,500 --> 00:02:01,860
It is.

21
00:02:01,860 --> 00:02:02,090
Right.

22
00:02:02,100 --> 00:02:02,940
We don't really care.

23
00:02:03,910 --> 00:02:11,470
And then we give it also another call back, but this time similar to what we just did with Arget user.

24
00:02:11,920 --> 00:02:16,120
It's either going to give us back our list of friends or it's going to give us back an error.

25
00:02:16,120 --> 00:02:19,340
If something goes wrong, we'll do the same thing right.

26
00:02:19,390 --> 00:02:23,250
If it airs, we want to throw the air because we want to stop our code, right.

27
00:02:23,260 --> 00:02:24,250
If there is an error.

28
00:02:25,090 --> 00:02:31,270
And then we want to get our friend John from that list of friends if there is no error.

29
00:02:32,480 --> 00:02:37,790
We want to do some find right, however, is that we get them and then we want to get his posts in a

30
00:02:37,790 --> 00:02:42,880
similar method as the one before we give posts John.

31
00:02:43,160 --> 00:02:43,510
Right.

32
00:02:43,670 --> 00:02:47,030
It gets it from whatever back end and then we give it another call back.

33
00:02:48,320 --> 00:02:57,380
Posts error, if error, throw the error, if there is no error, I want the first post and then finally

34
00:02:57,380 --> 00:03:04,730
I want to get the comments for the post, similar method, similar callback before we finally end up

35
00:03:04,730 --> 00:03:06,140
displaying the comments.

36
00:03:07,200 --> 00:03:17,340
So this was as is as much of a mouthful to say as it is to read, reading this code is really difficult

37
00:03:17,340 --> 00:03:23,720
because it's this massive pyramid treelike shape of nested callbacks.

38
00:03:24,690 --> 00:03:32,640
And what we affectionately refer to this as is callback hell, because this code is extensively difficult

39
00:03:32,640 --> 00:03:34,470
to read and debug.

40
00:03:35,470 --> 00:03:43,540
Now, with the introduction of promises, its aim was to extrapolate out a lot of the stuff, and the

41
00:03:43,540 --> 00:03:50,760
reason for it is because this code here, these functions are all asynchronous functions.

42
00:03:51,250 --> 00:03:54,330
We don't know when those functions will complete.

43
00:03:54,880 --> 00:04:02,500
And we have to nest a bunch of other function calls inside of each other because each one depends on

44
00:04:02,500 --> 00:04:05,980
the result and the return of the previous one.

45
00:04:06,730 --> 00:04:11,740
In order for us to get our friends, we need our user ID, which we get after we fetch it right.

46
00:04:12,160 --> 00:04:17,110
And in order to get the posts, we need to get our friend after we've gotten our friends list, after

47
00:04:17,110 --> 00:04:22,600
we've gotten it from our user, like it's just this long, repetitive process.

48
00:04:23,050 --> 00:04:26,080
But this is also part of our coding.

49
00:04:26,560 --> 00:04:31,810
A lot of the times this is what we'll need to do in order to eventually get that right.

50
00:04:31,810 --> 00:04:33,550
Final set of data we need.

51
00:04:34,670 --> 00:04:40,360
So Promises has simplified this and Promises was introduced in Essex.

52
00:04:40,520 --> 00:04:42,200
So let's take a look at what it is.

53
00:04:43,700 --> 00:04:44,920
So let's get rid of this for now.

54
00:04:46,730 --> 00:04:55,300
Now a promise is instantiated with this constructor, so we'll say, consed, my promise is equal to

55
00:04:55,400 --> 00:05:00,410
new promise and then the promise is given a function.

56
00:05:01,600 --> 00:05:06,610
And in this function, it gets past two things a resolve and a reject.

57
00:05:07,860 --> 00:05:10,170
Now, what is the resolve and what is the reject?

58
00:05:10,950 --> 00:05:14,670
Well, a promise is kind of exactly as what it's named.

59
00:05:15,300 --> 00:05:21,300
It is a promise that this object will eventually have a value.

60
00:05:22,140 --> 00:05:27,660
It will either be a resolved value or a rejected value.

61
00:05:28,580 --> 00:05:35,210
The result value we use when our API call, for example, is successful.

62
00:05:36,180 --> 00:05:44,250
Our reject call we use when our API call gives us an error, but the promise will be in a state where

63
00:05:44,250 --> 00:05:49,860
it's pending until either the resolve or the reject has been called.

64
00:05:50,770 --> 00:05:52,630
Now, what does that mean?

65
00:05:53,230 --> 00:05:55,450
So let's say we have some.

66
00:05:56,430 --> 00:06:07,770
Set timeout and said time out is just this function that takes a callback and a time as a second argument,

67
00:06:08,460 --> 00:06:10,740
that time is in milliseconds.

68
00:06:11,010 --> 00:06:18,360
So we're saying after one thousand milliseconds or one second, we want to run this function and the

69
00:06:18,360 --> 00:06:23,100
function we want to run is resolve with the term.

70
00:06:23,130 --> 00:06:24,890
I have succeeded.

71
00:06:27,830 --> 00:06:38,120
By doing this, we are saying that after one second, I want this promise to call the resolve key with

72
00:06:38,330 --> 00:06:40,630
this value of I have succeeded.

73
00:06:41,240 --> 00:06:47,300
So when this happens, when resolve finally gets called after one second, our promise now holds this

74
00:06:47,300 --> 00:06:49,600
value that we pass to the resolve.

75
00:06:50,360 --> 00:06:56,000
And in order for us to access it, we have to say my promise then.

76
00:06:57,250 --> 00:07:04,010
And then we passed the dot, then a function where value will be the resolved value.

77
00:07:04,270 --> 00:07:07,180
So now we can finally console log the value.

78
00:07:09,320 --> 00:07:12,020
Now, let's open up our terminal and run this and see.

79
00:07:13,280 --> 00:07:15,350
Let's say we run our code.

80
00:07:16,510 --> 00:07:23,770
We will see that after one second it logged, I have succeeded because our promise has resolved this

81
00:07:23,770 --> 00:07:24,190
value.

82
00:07:25,460 --> 00:07:32,630
Now, reject will work in a similar way, except in how we end up accessing it.

83
00:07:34,250 --> 00:07:41,270
What we would do is let's say we have some call where we say let's say we have a conditional.

84
00:07:42,360 --> 00:07:44,740
And we'll just set this to true for now, right?

85
00:07:44,910 --> 00:07:47,760
If it's true, then we want to.

86
00:07:49,220 --> 00:07:50,240
Resolve our code.

87
00:07:51,260 --> 00:07:56,270
Otherwise, we want to reject with I have failed.

88
00:07:58,730 --> 00:08:06,230
Now, if we set our conditional to false right, we will hit our block and it will reject and the only

89
00:08:06,230 --> 00:08:14,450
way for us in our promised code following the instantiation to access the rejected value is to chain

90
00:08:14,450 --> 00:08:16,280
on a dot catch.

91
00:08:17,390 --> 00:08:20,690
With the cash, we will get the reject value.

92
00:08:23,990 --> 00:08:28,460
Inside of the callback that we pass to it, so if we were to console logit.

93
00:08:31,390 --> 00:08:35,140
Then now we will see we get the I have failed.

94
00:08:36,060 --> 00:08:45,480
So what we're getting with this promise is control over what we want to do with asynchronous events

95
00:08:45,960 --> 00:08:48,000
if they succeed or fail.

96
00:08:49,080 --> 00:08:55,800
Now, sometimes if we're just using that time out, there's no reason to reject, and that's perfectly

97
00:08:55,800 --> 00:09:01,660
fine if we just want to defer our promises resolution, right.

98
00:09:01,680 --> 00:09:07,550
And we're using a set time out and there's no reason to reject, that's perfectly fine, too.

99
00:09:07,560 --> 00:09:09,810
There's no need to call reject.

100
00:09:09,900 --> 00:09:10,190
Right.

101
00:09:10,260 --> 00:09:21,060
We can only just resolve, but by having a reject, we are able to control the separation of a successful

102
00:09:21,060 --> 00:09:24,510
API call back from an unsuccessful API call back.

103
00:09:24,900 --> 00:09:32,820
And that's the main benefit of using promises, is because when we make an API call, we don't know

104
00:09:32,820 --> 00:09:35,670
whether or not that will work 100 percent of the time.

105
00:09:36,480 --> 00:09:39,900
If we call a server, we don't know if that server's down.

106
00:09:40,110 --> 00:09:46,320
We also don't know if we made a mistake in the parameters that we're passing in that API call.

107
00:09:47,290 --> 00:09:55,810
Let's say our back end is expecting a user ID, right when you fetch at a certain end point, you don't

108
00:09:55,810 --> 00:10:02,320
give it the rights or ID or you forget to give it an ID, then that API call will throw you back with

109
00:10:02,320 --> 00:10:04,440
an error saying that's not right.

110
00:10:04,450 --> 00:10:06,650
You didn't give me a user ID.

111
00:10:07,370 --> 00:10:13,270
Well, we want to handle that differently then we want to handle a successful API call.

112
00:10:13,840 --> 00:10:21,550
And that's why we have both this resolve and reject, because we're able to separate our concerns,

113
00:10:21,940 --> 00:10:26,650
our successes in the then callback and our failure.

114
00:10:26,680 --> 00:10:31,240
Our error is in the reject callback, which is in our catch.

115
00:10:32,680 --> 00:10:37,120
There's another thing that we can do with our promises.

116
00:10:38,310 --> 00:10:47,430
We're actually able to chain then together because the callback that we pass to it, whatever gets returned

117
00:10:47,430 --> 00:10:51,480
right in this case, we're returning console log, which actually doesn't return anything.

118
00:10:51,480 --> 00:10:52,560
It just returns undefined.

119
00:10:53,160 --> 00:10:59,550
But let's say we were to return our value, but we want to add a bunch of exclamation marks to it.

120
00:10:59,880 --> 00:11:00,130
Right.

121
00:11:00,150 --> 00:11:03,810
So we're returning a new string plus four exclamation marks.

122
00:11:05,570 --> 00:11:12,090
What then will do with that value is it will wrap it inside of a resolve promise.

123
00:11:12,920 --> 00:11:15,260
That way we can change then on it.

124
00:11:16,200 --> 00:11:17,550
With our new value.

125
00:11:19,290 --> 00:11:23,220
And then console log that new value because.

126
00:11:24,170 --> 00:11:30,200
The DOT then has wrapped this value in a resolve promise, you can only call DOT then on a resolved

127
00:11:30,200 --> 00:11:30,940
promise, right?

128
00:11:31,010 --> 00:11:33,160
You can't call it on a normal string.

129
00:11:33,530 --> 00:11:33,830
Right.

130
00:11:33,830 --> 00:11:42,620
And the only reason we're able to do so is because each dot then is wrapping the value that gets returned

131
00:11:42,620 --> 00:11:47,360
from the callback, that they get passed in a resolved promise.

132
00:11:48,630 --> 00:11:55,680
Now, we can do this as many times as we want, because every then will be rapping that return in a

133
00:11:55,710 --> 00:11:56,790
resolved promise.

134
00:11:57,940 --> 00:12:05,350
And we actually have seen promises before, if you're keen, this actually looks a lot like when we

135
00:12:05,350 --> 00:12:06,520
used fetch.

136
00:12:07,550 --> 00:12:14,990
If we look at this code, we see that factsheet looks very similar to the promised code we just wrote,

137
00:12:15,710 --> 00:12:20,450
the reason for this is because Fetch returns us a promise.

138
00:12:20,840 --> 00:12:29,090
When you call fetch, it's returning you a promise value while it makes an API request to the you are

139
00:12:29,090 --> 00:12:30,200
all that you passed it.

140
00:12:31,740 --> 00:12:37,200
If the endpoint, for example, throws an error, like, let's say we don't have the right permission

141
00:12:37,200 --> 00:12:44,370
to access it or the server is down or we misspelled the actual end URL.

142
00:12:45,440 --> 00:12:52,490
Well, instead of giving us back a value factual, actually also reject that value in the promise that

143
00:12:52,490 --> 00:12:58,910
it gives back to us, if it's successful, it instead will resolve it, which is how we're able to get

144
00:12:59,420 --> 00:13:04,880
a dot then response, because that response is what that fax gave us back.

145
00:13:05,420 --> 00:13:09,650
We convert it to a JSON object, right, by calling Jason on response.

146
00:13:10,040 --> 00:13:16,450
And as I mentioned before, it ends up wrapping that JSON value in another resolved promise, which

147
00:13:16,480 --> 00:13:20,540
then passes to the next dot then which we then finally a.

148
00:13:21,770 --> 00:13:25,070
So if we were to look, that's what's happening here.

149
00:13:25,700 --> 00:13:30,170
That first promise is what gets return from the fetch a pending promise.

150
00:13:30,320 --> 00:13:30,620
Right.

151
00:13:30,740 --> 00:13:32,540
Because it's not resolved or rejected.

152
00:13:32,900 --> 00:13:41,090
But once that comes back, it's successful, it resolves it internally and then the dot then gets called

153
00:13:41,090 --> 00:13:42,530
because it resolved.

154
00:13:44,180 --> 00:13:47,240
If we were to say, mess up this URL.

155
00:13:48,220 --> 00:13:54,910
Right, so now we know it's false, right, if we catch instead, let's not conceal lock the air because

156
00:13:54,910 --> 00:13:56,110
the air is quite ugly.

157
00:13:56,500 --> 00:13:59,290
You can imagine we do whatever we want with the air.

158
00:13:59,320 --> 00:13:59,680
Right.

159
00:13:59,980 --> 00:14:05,350
But I'm just going to console log the string I have aired.

160
00:14:06,710 --> 00:14:14,300
If we run, this will see that the I have air string was the one that got canceled because the catch

161
00:14:14,600 --> 00:14:22,130
occurred, right, because the get call from our fetch failed and it came back with an error and internally

162
00:14:22,310 --> 00:14:26,570
fetch rejected that error on our promise object.

163
00:14:26,840 --> 00:14:35,030
Now, while the chaining of our promises is rather easy, there is a little bit of complexity when it

164
00:14:35,030 --> 00:14:39,580
comes to figuring out how to structure our actual promise wrapping.

165
00:14:40,430 --> 00:14:49,670
The good news is that with S7 there was a new function that was introduced called Async Away that allows

166
00:14:49,670 --> 00:14:54,350
us to better handle how we write our asynchronous code.

167
00:14:54,780 --> 00:14:57,050
So let's take a look at that now.
