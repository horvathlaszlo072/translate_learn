1
00:00:00,510 --> 00:00:01,320
Welcome back, everyone.

2
00:00:02,280 --> 00:00:03,030
In this video.

3
00:00:03,030 --> 00:00:07,680
We are going to clean up some last minute things that we have inside of our store.

4
00:00:08,460 --> 00:00:13,680
And also, I'm going to talk a little bit more about logging inside of Redux, because we have many

5
00:00:13,680 --> 00:00:14,880
options throughout the years.

6
00:00:15,810 --> 00:00:20,850
First off, what I want to do is mention that we actually have our own logger middleware, as we know,

7
00:00:20,850 --> 00:00:22,290
as well as Redux Logger.

8
00:00:22,800 --> 00:00:24,930
We can really pick and choose which one we prefer.

9
00:00:24,930 --> 00:00:29,730
It's up to you if you want to use Redux Logger, which is what I actually prefer to use.

10
00:00:30,000 --> 00:00:35,910
Again, just keep in mind that we need to get the result using next on action, and only then are we

11
00:00:35,910 --> 00:00:37,740
able to actually get the next state.

12
00:00:38,250 --> 00:00:42,630
So when you look at your code, as we've gone through extensively, you may not see the order of your

13
00:00:42,630 --> 00:00:47,760
actions and the code inside of your components rendering in a way that seems super predictable.

14
00:00:48,860 --> 00:00:53,300
If you feel like you don't like that, of course you can write your own logger middleware, as we've

15
00:00:53,300 --> 00:00:53,740
seen.

16
00:00:53,750 --> 00:00:59,240
And using this you can figure out and get a more accurate depiction of what you want your actions to

17
00:00:59,240 --> 00:00:59,510
be.

18
00:01:00,660 --> 00:01:06,720
So what I want to do is I want to move this middleware that we've made into a middleware folder and

19
00:01:06,720 --> 00:01:08,400
now we always have access to it.

20
00:01:08,610 --> 00:01:10,260
I'm going to similarly call it a logger.

21
00:01:10,260 --> 00:01:13,110
JS Export this out.

22
00:01:14,750 --> 00:01:17,100
And now if you want to just import it.

23
00:01:17,450 --> 00:01:23,540
Otherwise, personally, I'm just going to use Redux Lager and I'm going to pass this middleware here.

24
00:01:24,380 --> 00:01:28,940
Now, one other thing I want to mention is that we should only be running this logger middleware when

25
00:01:28,940 --> 00:01:30,170
we're in development.

26
00:01:30,620 --> 00:01:34,040
When we're in production, we don't want to console.log anything to the logs.

27
00:01:34,670 --> 00:01:41,090
So here, what I'm going to do is I'm going to actually leverage the process dot environment, dot node

28
00:01:41,090 --> 00:01:45,920
environment variable, which is something that we always have access to that tells us whether or not

29
00:01:45,920 --> 00:01:51,440
we're in development or production based on the string development or production like so.

30
00:01:52,190 --> 00:01:58,550
So if our node environment is currently development, only then should we render the logger.

31
00:01:59,180 --> 00:02:04,940
Now of course, if this is untrue, where our node environment is equal to production, what happens

32
00:02:04,940 --> 00:02:10,280
is we never actually end up evaluating logger, but we just get false and we don't want to pass false

33
00:02:10,280 --> 00:02:11,060
as a middleware.

34
00:02:11,450 --> 00:02:15,350
So we need to make sure that we also filter out by Boolean.

35
00:02:16,250 --> 00:02:20,660
What this does is essentially it filters out anything where it is not true.

36
00:02:21,200 --> 00:02:24,650
So if we come here, I want to quickly show you an example.

37
00:02:25,910 --> 00:02:30,560
So let's say, for example, we have this value two equals three.

38
00:02:30,830 --> 00:02:32,690
As you can see that I was starting to type out.

39
00:02:33,850 --> 00:02:36,610
What I'm going to say is that ampersand here as well?

40
00:02:37,000 --> 00:02:38,920
I'm going to put an object.

41
00:02:38,920 --> 00:02:44,320
And inside this object, I'm going to say a ghost to string like this.

42
00:02:45,430 --> 00:02:49,540
Notice that this is equal to false, which is what we expect.

43
00:02:50,140 --> 00:02:56,860
Now, if I put this inside of an array, if I don't filter this and I pass boolean, what I happen is

44
00:02:56,860 --> 00:03:00,760
it will remove anything that's got false or false in this into it.

45
00:03:01,450 --> 00:03:03,250
So now we are filtering out.

46
00:03:04,380 --> 00:03:05,300
If this is false.

47
00:03:05,790 --> 00:03:09,180
If this is true, however, what happens instead?

48
00:03:11,240 --> 00:03:14,750
Is that we will get the actual object inside.

49
00:03:14,930 --> 00:03:19,940
So this is how we keep the middleware if we are indeed evaluating in development.

50
00:03:20,930 --> 00:03:27,710
And now our middleware is going to only apply when we're actually inside of development, which we see

51
00:03:28,220 --> 00:03:29,780
right here when I refresh.

52
00:03:30,200 --> 00:03:31,700
There's our redox logger.

53
00:03:32,450 --> 00:03:35,990
If I want to see that it's actually working, I can just flip this to production.

54
00:03:35,990 --> 00:03:37,070
And now if I save this.

55
00:03:37,970 --> 00:03:38,420
There we go.

56
00:03:38,690 --> 00:03:42,440
We see that no matter what happens, none of these actions are now logging.

57
00:03:43,550 --> 00:03:47,990
So this is some optimizations we can make to make sure that we hide our logger.

58
00:03:48,320 --> 00:03:50,540
Again, if you want to use Redux logger, you can.

59
00:03:50,810 --> 00:03:53,060
If you want to use middleware logger, you can as well.

60
00:03:53,750 --> 00:03:58,160
Now, if you want this to be a little bit more clear, we want to switch this back so that we're in

61
00:03:58,160 --> 00:03:58,730
development.

62
00:03:59,000 --> 00:04:05,090
You can also say that if the node environment is also just not in production, don't render the logger.

63
00:04:05,690 --> 00:04:10,310
This one is also a little bit more clear because sometimes you might have other additional environments

64
00:04:10,310 --> 00:04:11,270
determined for you.

65
00:04:11,720 --> 00:04:14,380
You can actually add more environments if you want it to.

66
00:04:14,900 --> 00:04:16,100
It just depends on your project.

67
00:04:16,520 --> 00:04:17,950
So this is actually the safest one.

68
00:04:17,960 --> 00:04:21,290
We essentially say as long as we're on production, render the logger.

69
00:04:21,470 --> 00:04:23,030
If we are, don't use it.

70
00:04:24,090 --> 00:04:27,750
Now there is one more tool that a lot of different projects like to use.

71
00:04:27,960 --> 00:04:29,520
It's kind of a mixture.

72
00:04:29,880 --> 00:04:35,520
It is actually a Chrome extension that does require us to interact with it in order for us to utilize

73
00:04:35,520 --> 00:04:35,640
it.

74
00:04:35,940 --> 00:04:37,410
And I'll show you how that one works as well.

75
00:04:38,600 --> 00:04:43,670
So if you look inside your resources folder, I have a link to this extension called Redux Dev Tools

76
00:04:43,670 --> 00:04:44,630
only in Chrome.

77
00:04:45,470 --> 00:04:47,000
So you want to add it to Chrome.

78
00:04:47,810 --> 00:04:53,180
And then the way it works is that you'll get this little Chrome extension icon that only triggers if

79
00:04:53,180 --> 00:04:56,480
the web page is enabled for Redux DevTools.

80
00:04:57,140 --> 00:05:01,940
The way that you set up a website so that it actually can use Redux setup tools, is that here inside

81
00:05:01,940 --> 00:05:05,270
of your store, you need to modify the compose method.

82
00:05:05,930 --> 00:05:10,850
You modify it in the sense that you determine whether or not you want to use Redux as compose or the

83
00:05:10,850 --> 00:05:12,200
dev tools compose.

84
00:05:12,710 --> 00:05:16,850
So the way that you write this code is you say const compose enhancer.

85
00:05:17,660 --> 00:05:23,600
Essentially it just says, Hey, I have this compose method that I'm going to use and I'm going to determine

86
00:05:23,600 --> 00:05:29,750
which one to use if the process environment, dot node environment does not equal production.

87
00:05:29,990 --> 00:05:35,840
So very similar to what we saw before, we don't want to use this if we're in production, if we're

88
00:05:35,840 --> 00:05:37,100
not, then it's okay.

89
00:05:38,870 --> 00:05:45,800
So if we're not in production and we have a window object because during our build up there's no window

90
00:05:45,800 --> 00:05:46,880
object on the server.

91
00:05:47,270 --> 00:05:49,220
So for this reason, we don't want to break our code.

92
00:05:49,550 --> 00:05:54,080
So we want to make sure that we say, hey, only if there's a window, object and window.

93
00:05:54,470 --> 00:05:56,090
Underscore, underscore.

94
00:05:56,420 --> 00:05:57,140
Redux.

95
00:05:57,410 --> 00:05:58,650
Underscore dev.

96
00:05:58,670 --> 00:06:00,380
Tools underscore.

97
00:06:00,380 --> 00:06:01,340
Extension.

98
00:06:01,730 --> 00:06:04,580
Underscore, compose, underscore, underscore.

99
00:06:05,390 --> 00:06:07,900
So this right here is a protected keyword.

100
00:06:07,910 --> 00:06:14,690
And what we're saying is that if we're not in production and there's a window object and these dev tools

101
00:06:15,080 --> 00:06:15,860
exist.

102
00:06:16,040 --> 00:06:21,440
So DevTools as a chrome extension is going to attach this to the window object which is their own compose,

103
00:06:22,040 --> 00:06:23,690
then use this compose.

104
00:06:24,230 --> 00:06:28,070
Otherwise just use the compose that we have from Redux.

105
00:06:28,910 --> 00:06:33,440
And now what we do is we call our compose enhancer instead of compose.

106
00:06:34,130 --> 00:06:37,880
If these fail, then we'll use regular compose just as we had before.

107
00:06:38,240 --> 00:06:42,810
Otherwise run the actual one from Redux dev tools.

108
00:06:43,340 --> 00:06:48,200
And now what happens if we've rebuilt properly is if we go back to our application.

109
00:06:48,800 --> 00:06:50,720
What we can see if we refresh.

110
00:06:51,830 --> 00:06:53,090
Is that inside?

111
00:06:54,350 --> 00:06:56,630
We see that our devtools is highlighted.

112
00:06:56,870 --> 00:07:02,150
If I click this now, notice how this new tab opens or not new tab.

113
00:07:02,150 --> 00:07:07,970
But this little modal inside of here, we can see all of the different events that happen and at what

114
00:07:07,970 --> 00:07:09,080
time they happened.

115
00:07:09,440 --> 00:07:15,470
These all happen within very quick milliseconds, and now we can actually look at the action itself.

116
00:07:15,800 --> 00:07:17,660
Here we see that there's a set current user.

117
00:07:18,080 --> 00:07:19,010
This was the action.

118
00:07:19,130 --> 00:07:20,000
It had this type.

119
00:07:20,300 --> 00:07:21,410
It had this payload.

120
00:07:22,010 --> 00:07:23,810
This was the state that we had.

121
00:07:25,720 --> 00:07:27,130
After we had updated.

122
00:07:27,670 --> 00:07:31,790
If we look at the diff, we can see what values got changed on what reducer.

123
00:07:31,810 --> 00:07:33,370
We see that in the user reducer.

124
00:07:33,370 --> 00:07:36,940
The current user value went from null to this payload object.

125
00:07:37,570 --> 00:07:44,800
Similarly, what we can also do is we can use this timeline to jump through the different portions of

126
00:07:44,800 --> 00:07:45,850
our application.

127
00:07:46,090 --> 00:07:48,610
While the Redux State was being modified.

128
00:07:49,330 --> 00:07:51,070
So this might not be as clear.

129
00:07:51,790 --> 00:07:57,090
But let's say, for example, I go to my shop, I add some more items here.

130
00:07:58,520 --> 00:07:59,540
And I go to check out.

131
00:08:00,470 --> 00:08:02,810
And what I'll do is I will modify these values.

132
00:08:03,080 --> 00:08:04,790
I will remove some of these values.

133
00:08:05,300 --> 00:08:13,370
And now if we go back and we reopen relax devtools, we see there's a bunch of these set cart items

134
00:08:13,370 --> 00:08:14,270
method to happen.

135
00:08:14,990 --> 00:08:22,400
We can technically skip through and look at how our application state changed based on these actions

136
00:08:22,400 --> 00:08:23,150
that fired.

137
00:08:23,720 --> 00:08:29,570
So this gives us control over the application state based on all of these different actions that are

138
00:08:29,570 --> 00:08:30,560
firing through Redux.

139
00:08:30,890 --> 00:08:36,590
So this tool is really good if you want to see and you're manipulating very complex redux state, just

140
00:08:36,590 --> 00:08:39,500
what's happening at every step, what's getting modified.

141
00:08:39,500 --> 00:08:45,890
And you'll notice that your application in fact reflects accordingly because this is directly modifying

142
00:08:45,890 --> 00:08:49,730
the reducers so that you can see the state that's being modified in turn.

143
00:08:50,690 --> 00:08:51,290
So there we go.

144
00:08:51,680 --> 00:08:54,890
This is Redux DevTools, another very popular tool.

145
00:08:55,190 --> 00:08:57,050
You can feel free to use whichever ones you want.

146
00:08:57,110 --> 00:08:58,490
You can use a combination of them.

147
00:08:58,610 --> 00:08:59,750
It's really up to you.

148
00:08:59,990 --> 00:09:01,730
The world is your oyster.

149
00:09:02,060 --> 00:09:08,570
So now we've learned the majority of setting up redux by itself and how to use Redux inside of our application.

150
00:09:09,050 --> 00:09:15,290
In the next video, what we're going to start covering is actually some additional redux libraries that

151
00:09:15,290 --> 00:09:20,390
you may encounter in your journey as a developer only at scale.

152
00:09:20,390 --> 00:09:25,640
Though I do want to mention that a lot of these projects that you work on only at scale will you start

153
00:09:25,640 --> 00:09:28,100
using the next libraries we're going to talk about.

154
00:09:28,910 --> 00:09:30,140
So I'll see you in the next video.
