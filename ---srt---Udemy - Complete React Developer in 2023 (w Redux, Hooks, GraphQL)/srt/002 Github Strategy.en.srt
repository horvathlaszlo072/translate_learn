1
00:00:00,210 --> 00:00:01,410
Welcome back, everyone.

2
00:00:02,430 --> 00:00:08,340
So now that we're moving into our big capstone project, I have actually set up a repository just for

3
00:00:08,340 --> 00:00:08,640
you.

4
00:00:09,510 --> 00:00:13,170
This repository contains all of the code that we are going to write.

5
00:00:13,590 --> 00:00:18,690
I've also set it up in such a way that it should be relatively easy for you to work with.

6
00:00:19,380 --> 00:00:23,100
Primarily, I want you to code with this repository.

7
00:00:23,550 --> 00:00:26,850
And the way I want you to use it is more as a reference.

8
00:00:27,630 --> 00:00:32,070
So as you go through the lesson, you're probably going to follow all the steps just like mine.

9
00:00:32,310 --> 00:00:38,430
So inside of your own laptop, on your own terminal, you're going to instantiate your own project and

10
00:00:38,430 --> 00:00:41,400
you're going to follow along and code along as you do.

11
00:00:42,090 --> 00:00:49,560
However, if at any point you feel like you want a direct copy of my code, what you can do is you can

12
00:00:49,560 --> 00:00:54,780
clone down this repository simply by hitting code and then clone.

13
00:00:55,140 --> 00:00:59,760
And this will just bring your repository down into your terminal.

14
00:01:00,060 --> 00:01:01,530
So let's just take an example.

15
00:01:01,830 --> 00:01:04,740
I'm going to come down here to clone, and I'm going to do.

16
00:01:05,250 --> 00:01:09,190
Most likely a TPS because it's the most simple one.

17
00:01:10,020 --> 00:01:15,120
And what I'll do is I'll just do say, get clone and then type in the repository.

18
00:01:15,690 --> 00:01:23,280
And here this is going to clone down the project and I can just CD into it and I have the code.

19
00:01:26,030 --> 00:01:32,540
One of the things that you may have to do that's different from mine is that you most likely will need

20
00:01:32,630 --> 00:01:35,780
this repository on your own GitHub.

21
00:01:36,590 --> 00:01:43,520
So for your own GitHub, it's going to be a little different because you cannot make changes and push

22
00:01:43,520 --> 00:01:46,490
that code into my repository.

23
00:01:46,880 --> 00:01:50,780
The reason being you do not own this repository, I own this repository.

24
00:01:51,140 --> 00:01:54,200
If you want a copy of this repository that you own.

25
00:01:54,230 --> 00:01:56,420
You need to fork this repository.

26
00:01:56,930 --> 00:02:03,140
So when you hit fork up here in the right corner, it will say, Oh, let me fork this project into

27
00:02:03,170 --> 00:02:03,960
your own account.

28
00:02:03,980 --> 00:02:07,280
So I've set up a temporary account here just to show you what happens.

29
00:02:07,880 --> 00:02:12,320
And now here you see you have directly forked down this code.

30
00:02:12,980 --> 00:02:20,270
So once you fork down this code, you can actually clone this specific repository down into your code

31
00:02:20,270 --> 00:02:20,510
base.

32
00:02:20,780 --> 00:02:27,950
So earlier, if you look, you'll notice that I had cloned this and this is my copy, my repository,

33
00:02:28,310 --> 00:02:30,320
not the one that I just forked over.

34
00:02:31,460 --> 00:02:34,790
So what I'm going to do is I'm just going to remove this one.

35
00:02:36,100 --> 00:02:37,540
So that we don't have that name.

36
00:02:37,900 --> 00:02:43,360
And now if I clone down this repository, actually let me copy this again.

37
00:02:45,000 --> 00:02:55,470
If I clone down this new forked repository now, this is tied to the version that is forked to my profile.

38
00:02:55,500 --> 00:03:00,600
So in this particular case, this would be your profile and now you can make push changes to it because

39
00:03:00,600 --> 00:03:02,340
you own this copy.

40
00:03:03,540 --> 00:03:09,270
Now, one important thing I want you to pay attention to is these branches here in the top left corner.

41
00:03:09,780 --> 00:03:12,660
By default, this project sets you at less than one.

42
00:03:13,470 --> 00:03:18,480
But throughout the project, you'll see that there are numerous branches and these are all different

43
00:03:18,480 --> 00:03:19,650
checkpoints for the code.

44
00:03:20,220 --> 00:03:22,920
But what I want you to notice is this main branch.

45
00:03:23,280 --> 00:03:30,170
Maine is pretty much the branch that has the latest version of your code or in this particular case,

46
00:03:30,180 --> 00:03:32,340
my code that I've written for this project.

47
00:03:33,030 --> 00:03:38,880
Maine is also going to be very important because this is pretty much our production branch, which means

48
00:03:38,880 --> 00:03:44,340
any code in Maine is supposed to have the code that we want to be displayed live.

49
00:03:44,670 --> 00:03:49,680
So if we were to deploy this code base, we are often deploying it from the Maine branch.

50
00:03:50,670 --> 00:03:57,660
So the reason why this main branch is important is because in most typical projects that you work on

51
00:03:57,660 --> 00:04:02,130
in companies, the main branch is the one that is considered your production branch and that's where

52
00:04:02,130 --> 00:04:04,260
you're going to be merging changes into it.

53
00:04:04,590 --> 00:04:10,350
But of course, because we're the only person working on this code base, we're not going to really

54
00:04:10,350 --> 00:04:11,490
care about that.

55
00:04:11,760 --> 00:04:13,390
And the Merge strategy is as much.

56
00:04:13,650 --> 00:04:19,530
But the reason I mention is just because typically all of their final code should be on the main branch.

57
00:04:20,490 --> 00:04:24,330
So let's talk about these other branches, though, we know that main branch is the one that should

58
00:04:24,330 --> 00:04:28,110
have all of the actual code, we want to be our final code.

59
00:04:28,290 --> 00:04:34,530
But let's say, for example, what happens is that you are working on your own code base, let's say

60
00:04:34,530 --> 00:04:35,640
not off this fork.

61
00:04:36,270 --> 00:04:39,570
And what happens as you're working on it is you make a mistake of some kind.

62
00:04:40,110 --> 00:04:44,730
Let's say for some reason, you can't figure out why your code is just not running anymore and you just

63
00:04:44,730 --> 00:04:49,560
want to get a specific version of the code base up to where we've done so that you can at least have

64
00:04:49,560 --> 00:04:51,180
a clean start moving forward.

65
00:04:51,750 --> 00:04:56,100
Let's say at that point, you check your resources folder and it says, Hey, I'm on lesson 12.

66
00:04:57,330 --> 00:05:01,320
Well, if you look at the branch itself, you'll see all of the code.

67
00:05:01,770 --> 00:05:05,670
But what you can do is you forked and then cloned this project down.

68
00:05:06,060 --> 00:05:12,690
You actually have access to all of these branches, so you can just say, Hey, get check out meta lessons.

69
00:05:12,690 --> 00:05:12,990
Well.

70
00:05:13,440 --> 00:05:20,460
And now this will have all of the code that you have up until this video, which is referencing lesson

71
00:05:20,460 --> 00:05:20,810
12.

72
00:05:21,600 --> 00:05:23,790
What you can do is you can code from Lesson 12.

73
00:05:23,790 --> 00:05:30,540
This branch directly or what I suggest you do is you branch off from this lesson to all branch.

74
00:05:31,020 --> 00:05:36,360
And what that does is it creates for you, your own branch that you can write code against without impacting

75
00:05:36,360 --> 00:05:38,370
or affecting all of these lesson branches.

76
00:05:38,850 --> 00:05:45,840
So if you were to say check out Dash B, so I want to say, Hey Git, I want you to make a new branch

77
00:05:45,840 --> 00:05:48,600
for me and I want you to use less than 12 as the basis.

78
00:05:48,600 --> 00:05:52,950
Just by doing this from Lesson 12, you're going to say, OK, create a new branch from this as well.

79
00:05:53,550 --> 00:05:54,960
I want to call it my main.

80
00:05:55,050 --> 00:05:57,220
For example, you can name it whatever you want.

81
00:05:57,240 --> 00:05:59,110
I just called it my dash main.

82
00:05:59,130 --> 00:06:06,750
Just so that it's clear that this is my code here, this code base now is the same as Lesson 12, so

83
00:06:06,750 --> 00:06:12,090
whatever changes you make are going to be made to my mate instead of being made to lesson 12.

84
00:06:13,100 --> 00:06:18,680
And when you get to certain sections inside of our code or inside of the course where we want it to

85
00:06:18,680 --> 00:06:25,460
make a deployment, you can now deploy from your own my main branch as long as you pushed this branch

86
00:06:25,460 --> 00:06:31,760
up onto GitHub in your forked repo so that GitHub actually knows that this branch exists because right

87
00:06:31,760 --> 00:06:34,550
now all of this is being done on our local computer.

88
00:06:35,660 --> 00:06:38,510
So a lot of this has to do with just very basic gate strategy.

89
00:06:38,990 --> 00:06:45,410
But now you have your own branch based on the code of a branch inside of my code base that you will

90
00:06:45,410 --> 00:06:48,620
see referenced throughout this capstone video course.

91
00:06:49,340 --> 00:06:50,270
And this is pretty much it.

92
00:06:50,750 --> 00:06:56,900
If that ever gets a little confusing, you can always check the Read B.S. down here, where I walk through

93
00:06:56,900 --> 00:07:01,700
all these steps, particularly down in the branching strategy, which will cover everything that we

94
00:07:01,700 --> 00:07:02,210
talk about.

95
00:07:02,960 --> 00:07:03,500
So that's it.

96
00:07:04,310 --> 00:07:10,430
Now that you know about how you can leverage this repository for your benefit, fork it, clone it and

97
00:07:10,430 --> 00:07:15,110
then work off of that using this branching strategy that we've discussed.

98
00:07:15,950 --> 00:07:19,640
And with that, let's get started with building out our project.

99
00:07:20,060 --> 00:07:21,110
I'll see you in the next video.
