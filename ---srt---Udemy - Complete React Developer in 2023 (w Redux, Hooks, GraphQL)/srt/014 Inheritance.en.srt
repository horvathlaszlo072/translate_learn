1
00:00:00,810 --> 00:00:01,410
Welcome back.

2
00:00:01,920 --> 00:00:10,770
Let's talk about inheritance, a core aspect of object oriented programming is inheritance, which means

3
00:00:11,010 --> 00:00:12,900
passing knowledge down.

4
00:00:13,650 --> 00:00:18,630
Remember, at the start of this journey, we decided that we want to create this game, this fairy tale

5
00:00:18,630 --> 00:00:20,850
game that had all these characters.

6
00:00:21,790 --> 00:00:26,350
And we started with else, just a couple of ETFs.

7
00:00:26,680 --> 00:00:34,870
But as you can see, our goal is to have many things we want to have maybe a dragon, a night, a king

8
00:00:34,870 --> 00:00:37,990
and queen, maybe some magicians.

9
00:00:38,380 --> 00:00:39,910
Yes, even Dracula.

10
00:00:40,600 --> 00:00:48,730
So using this object oriented programming principle of inheritance, how can we accomplish this with

11
00:00:48,730 --> 00:00:50,080
the work that we've already done?

12
00:00:50,710 --> 00:00:51,340
Let's have a look.

13
00:00:52,240 --> 00:00:53,920
We have our class here.

14
00:00:54,400 --> 00:01:00,760
Yes, we've seen it before, and it shouldn't be anything new, but let's say that I wanted to have

15
00:01:00,760 --> 00:01:05,980
a new player and this player is actually an ogre called Shrek.

16
00:01:06,850 --> 00:01:09,580
How would I go about creating this ogre?

17
00:01:10,420 --> 00:01:16,510
The one thing I could do is to copy and paste this code and create an ogre class.

18
00:01:17,020 --> 00:01:23,770
I mean, that's copying pasting dry code that eventually we want to avoid.

19
00:01:23,860 --> 00:01:29,800
Because as we keep copying, pasting, copying and pasting, we just have repeated code which gets messy.

20
00:01:30,190 --> 00:01:37,750
So one option that we might have here is, well, let's just copy the elf, and maybe we can extend

21
00:01:37,750 --> 00:01:37,870
it.

22
00:01:38,500 --> 00:01:43,510
So for example, if I want to copy Fiona, let's say Fiona over here.

23
00:01:43,630 --> 00:01:46,990
If I click Run, I have this elf class.

24
00:01:48,820 --> 00:01:52,520
For instance, with all these properties.

25
00:01:54,440 --> 00:01:57,320
Now, in order to copy while you already have.

26
00:01:57,740 --> 00:01:59,690
We can just do something like this.

27
00:01:59,810 --> 00:02:06,060
We can say Konst Ogre and ogre is going to equal.

28
00:02:06,920 --> 00:02:08,570
Well, let's clone Fiona.

29
00:02:09,830 --> 00:02:13,680
And as I've shown you before, we can do dot dot dot spread.

30
00:02:13,700 --> 00:02:16,100
Operator and then just do Fiona.

31
00:02:17,400 --> 00:02:22,800
If I do this, let's remove the spaces, and I look at what Olga is now.

32
00:02:23,130 --> 00:02:23,880
And I click Run.

33
00:02:25,230 --> 00:02:31,110
Look, that I've copied Fiona into the ogre variable.

34
00:02:32,160 --> 00:02:39,540
And the interesting thing here is, if I do yoga dot underscore, underscore, Prato underscore, underscore,

35
00:02:39,900 --> 00:02:40,470
what do I get?

36
00:02:41,160 --> 00:02:42,990
I get an empty object.

37
00:02:43,620 --> 00:02:44,850
What if I do, Fiona?

38
00:02:47,770 --> 00:02:48,760
I have health.

39
00:02:49,890 --> 00:03:01,140
So I've cloned the object, but OGA no longer has Elf as the class, the base class.

40
00:03:02,680 --> 00:03:07,930
So that if I do hear console dialogue, Fiona.

41
00:03:09,890 --> 00:03:10,520
Equals.

42
00:03:11,820 --> 00:03:13,200
Olga Clone.

43
00:03:15,060 --> 00:03:15,780
And I click run.

44
00:03:18,330 --> 00:03:20,940
Oh, and I don't need a clone here, it should just be OGA.

45
00:03:22,230 --> 00:03:23,220
I get false.

46
00:03:24,030 --> 00:03:29,280
These objects are not referencing the same place in memory.

47
00:03:29,710 --> 00:03:35,850
They're completely different things, but I've also lost this chain, this prototype or inheritance

48
00:03:35,850 --> 00:03:36,210
chain.

49
00:03:37,170 --> 00:03:40,170
I can't even do ogre dot attack.

50
00:03:43,810 --> 00:03:45,580
No, I don't have a tech.

51
00:03:46,300 --> 00:03:47,140
So that's a problem.

52
00:03:47,590 --> 00:03:52,900
How can we extend this, this work that we've currently had?

53
00:03:53,620 --> 00:03:58,750
And this is where inheritance comes in, and it used to be really difficult to do with JavaScript.

54
00:03:59,530 --> 00:04:10,600
Before we had this class syntax, it involved a lot of ugly prototype code that, luckily for us, is

55
00:04:10,600 --> 00:04:12,070
now a lot cleaner.

56
00:04:12,160 --> 00:04:12,940
So let's have a look.

57
00:04:13,630 --> 00:04:22,750
To start off to make naming a lot better, I'm going to change the class here to character because all

58
00:04:22,750 --> 00:04:27,730
characters in this game are going to have name and a weapon and they can attack.

59
00:04:28,120 --> 00:04:28,570
That's great.

60
00:04:29,440 --> 00:04:38,590
And now from this character, I'm going to create a class elf that extends, which is a key word.

61
00:04:39,190 --> 00:04:42,280
This character class.

62
00:04:43,790 --> 00:04:53,300
This is something called subclasses and object oriented programming that is we have a base class or

63
00:04:53,300 --> 00:05:01,220
a super class and a subclass that is we want to inherit from the character class.

64
00:05:02,000 --> 00:05:08,960
All these properties and methods and create something new out of it, extend it with health.

65
00:05:10,100 --> 00:05:10,820
Let's have a look.

66
00:05:11,690 --> 00:05:13,790
If I just do this and I click Run.

67
00:05:14,570 --> 00:05:15,800
All right, I get undefined.

68
00:05:16,010 --> 00:05:17,510
Let's see what Fiona is right now.

69
00:05:17,810 --> 00:05:19,520
If I do Fiona and click Run.

70
00:05:20,450 --> 00:05:20,900
All right.

71
00:05:21,260 --> 00:05:21,740
Look at that.

72
00:05:22,250 --> 00:05:24,710
Everything is still working.

73
00:05:25,370 --> 00:05:26,150
I have Elf.

74
00:05:27,200 --> 00:05:29,240
Name Fiona Weapons, Ninja.

75
00:05:30,510 --> 00:05:30,900
All right.

76
00:05:31,290 --> 00:05:31,680
Great.

77
00:05:32,160 --> 00:05:33,420
But you know what?

78
00:05:33,450 --> 00:05:35,310
Let's make this a little bit more interesting.

79
00:05:36,000 --> 00:05:45,270
Let's say that the Elf characters in this game, they also have an extra property that they can have.

80
00:05:45,780 --> 00:05:47,850
Maybe it's a type property.

81
00:05:48,780 --> 00:05:53,460
As to what type of health they are, so let's build, but how would we go about doing that?

82
00:05:53,770 --> 00:06:00,720
Well, in here, let's add the type property if I do a constructor here.

83
00:06:02,700 --> 00:06:06,840
And I do this that name or this type.

84
00:06:08,930 --> 00:06:15,140
Equals type, and let's say that we receive a type parameter in here.

85
00:06:17,330 --> 00:06:17,570
Hmm.

86
00:06:18,260 --> 00:06:19,490
How is this going to work?

87
00:06:20,300 --> 00:06:29,360
We have to instantiate the elf class and we give it the name and the weapon, but we also want to have

88
00:06:29,360 --> 00:06:29,840
the type.

89
00:06:30,320 --> 00:06:31,670
So maybe we'll do this.

90
00:06:31,670 --> 00:06:33,560
We'll say name and.

91
00:06:35,550 --> 00:06:36,060
Weapon.

92
00:06:36,330 --> 00:06:41,640
And the third parameter will be type, so I'll say that type of a self.

93
00:06:41,700 --> 00:06:46,730
I'm going to change the name from Fiona to Dobie.

94
00:06:48,030 --> 00:06:54,090
The name is going to be Dobey and the attack is going to be well.

95
00:06:55,760 --> 00:07:03,310
Or the weapon is just going to be a cloth and the type of elf, it's going to be a house elf.

96
00:07:04,920 --> 00:07:05,230
Right.

97
00:07:05,830 --> 00:07:07,870
If I do this, let's see what happens.

98
00:07:08,080 --> 00:07:08,920
I'm going to click run.

99
00:07:09,670 --> 00:07:09,930
Hmm.

100
00:07:10,720 --> 00:07:17,080
Reference here must call Super Constructor and draft class before accessing this or returning from derived

101
00:07:17,080 --> 00:07:17,710
constructor.

102
00:07:18,370 --> 00:07:19,150
Does that make sense?

103
00:07:20,440 --> 00:07:21,340
Not really, right?

104
00:07:21,730 --> 00:07:23,800
I mean, that's a pretty confusing error message.

105
00:07:24,580 --> 00:07:25,600
What is it saying?

106
00:07:26,920 --> 00:07:36,460
In order for us to have our constructor and be able to use this and know what this is referring to,

107
00:07:36,730 --> 00:07:43,480
which is Elf and not the character, because remember we have both name and weapon.

108
00:07:44,110 --> 00:07:53,110
We have this special keyword called Super for superclass and the superclass we call like this.

109
00:07:54,230 --> 00:08:02,870
And by doing inside of the constructor, the super call it says, Hey, call the superclass, what's

110
00:08:02,870 --> 00:08:04,160
the superclass of Elf?

111
00:08:04,640 --> 00:08:05,460
Well, that's character.

112
00:08:05,690 --> 00:08:12,920
It extends character, so it goes up and calls the constructor so that we create the same name and this

113
00:08:13,070 --> 00:08:14,200
dot weapon.

114
00:08:14,930 --> 00:08:19,910
So in here, we have to pass it name and weapon.

115
00:08:20,780 --> 00:08:23,180
Now I know this is a little bit confusing.

116
00:08:23,210 --> 00:08:30,410
This whole super thing is just a standard, especially with classic class based languages where Super

117
00:08:30,410 --> 00:08:32,270
is referring to the superclass.

118
00:08:34,070 --> 00:08:35,990
Let's have a look here if I click Run.

119
00:08:37,340 --> 00:08:37,790
Look at that.

120
00:08:38,270 --> 00:08:39,170
I got off.

121
00:08:40,070 --> 00:08:43,700
That is Doby weapon is a cloth and has a type.

122
00:08:44,000 --> 00:08:45,110
Well, it's a house off.

123
00:08:45,710 --> 00:08:47,840
And if I you Dalby dot attack.

124
00:08:50,690 --> 00:08:51,660
Attack with cloth.

125
00:08:51,680 --> 00:08:53,600
Not very effective, but it's working.

126
00:08:55,850 --> 00:09:00,720
Now, let's go over this one more time when we do Class Alpha extends character.

127
00:09:00,740 --> 00:09:05,960
It means, hey, extend and set the prototype.

128
00:09:06,110 --> 00:09:11,660
That is the underscore underscore prototype to point to character.

129
00:09:12,260 --> 00:09:16,640
So L'f now has a prototype chain up to character.

130
00:09:17,480 --> 00:09:24,860
It's saying, Hey, any time you run an instance of alpha like Dobie and uses a property or a method

131
00:09:24,860 --> 00:09:25,820
that I don't have.

132
00:09:26,060 --> 00:09:30,110
Well, then look up to character and tell me if character has.

133
00:09:31,330 --> 00:09:36,340
The constructor is our own constructor, just for the ALF class.

134
00:09:37,660 --> 00:09:42,070
This is something that only gets run with an elf, not with a character.

135
00:09:42,760 --> 00:09:43,840
And in here.

136
00:09:44,940 --> 00:09:47,730
We can't leave it as is.

137
00:09:48,990 --> 00:09:55,560
But if we want to set any sort of property that is used that this keyword, we have to call super and

138
00:09:55,560 --> 00:09:59,970
say, Hey, call the constructor of our superclass.

139
00:10:00,900 --> 00:10:05,310
And then after that, I'll know what to do with this keyword.

140
00:10:05,820 --> 00:10:12,450
Let me show you if I do console dot, log here and do this and I run.

141
00:10:14,890 --> 00:10:15,910
That gives an air.

142
00:10:17,170 --> 00:10:23,590
Because in order for us to use that, this keyword inside of the constructor, when we extend something

143
00:10:23,980 --> 00:10:32,650
we have to call super first so that if I move the console dialog to under the super call and I run.

144
00:10:34,290 --> 00:10:34,680
Look at that.

145
00:10:35,040 --> 00:10:40,470
I have Elf that has name and weapon attached to it.

146
00:10:40,980 --> 00:10:45,660
So this because we call the super runs the constructor.

147
00:10:45,990 --> 00:10:49,560
We now have a instance.

148
00:10:51,030 --> 00:10:58,620
Of character with these properties, and then we can use this Scott type two ad type to it so that by

149
00:10:58,620 --> 00:10:59,520
the very end.

150
00:11:01,290 --> 00:11:03,330
Of our construction process of Elf.

151
00:11:04,140 --> 00:11:07,350
We have all our properties set.

152
00:11:08,690 --> 00:11:09,800
Very, very cool.

153
00:11:10,430 --> 00:11:14,090
And remember, the this keyword simply says, who am I?

154
00:11:14,720 --> 00:11:15,650
Who's calling me?

155
00:11:16,070 --> 00:11:18,920
In this case, we use the new keyword.

156
00:11:18,950 --> 00:11:22,220
So this is going to be set to health.

157
00:11:23,400 --> 00:11:27,390
All right, but we started this video with us wanting to create an ogre.

158
00:11:27,690 --> 00:11:28,650
So let's do that.

159
00:11:28,830 --> 00:11:30,000
Let's continue on.

160
00:11:30,090 --> 00:11:38,610
Let's create another class that's going to be an ogre class that extends the character.

161
00:11:40,470 --> 00:11:46,230
We do the same thing now, let's say that our OGA has a constructor.

162
00:11:47,690 --> 00:11:54,380
And we want to pass in a few things, such as name, weapon and you know what, ogres have different

163
00:11:54,380 --> 00:11:54,800
colors.

164
00:11:55,010 --> 00:11:55,810
So let's do that.

165
00:11:55,830 --> 00:11:57,680
Let's add a color property.

166
00:11:58,790 --> 00:11:59,780
And what do we do here?

167
00:12:00,320 --> 00:12:08,300
Well, we're going to call the super class, which is character with name and weapon, so that now we

168
00:12:08,300 --> 00:12:12,620
can use this keyword to attach new properties to the yoga class.

169
00:12:13,280 --> 00:12:16,580
I'm going to add a color that equals whatever color we give it.

170
00:12:19,770 --> 00:12:22,660
And you know what, ogres, they have special powers.

171
00:12:22,680 --> 00:12:30,750
Let's say that ogres can also make forts, so we have a make for it because, you know, they're very

172
00:12:30,750 --> 00:12:42,450
powerful, obviously, and they'll just return, let's say strongest fought in the world, made nice

173
00:12:42,450 --> 00:12:43,470
and easy, just like that.

174
00:12:44,590 --> 00:12:45,670
Let's see if this works.

175
00:12:47,850 --> 00:12:53,070
If I create, let's say, Shrek and Shrek is a new ogre.

176
00:12:55,580 --> 00:13:00,170
With the name of Shrek, the weapon is going to be a club.

177
00:13:00,740 --> 00:13:02,240
And then finally, the color.

178
00:13:02,390 --> 00:13:03,470
Obviously green.

179
00:13:04,910 --> 00:13:10,550
If I do Shrek duct attack or lizards, do Shrek here to see what we get.

180
00:13:11,780 --> 00:13:15,560
Look at that, I have a new ogre that was just created for me.

181
00:13:15,830 --> 00:13:16,910
How awesome is that?

182
00:13:17,890 --> 00:13:23,620
And if I do make Ford here and run this, look at that.

183
00:13:24,590 --> 00:13:29,600
I'm able to use make Ford function or method on track.

184
00:13:30,500 --> 00:13:34,580
But if I go and do make fought to Dobie.

185
00:13:35,850 --> 00:13:37,420
No, Dobie can make for it.

186
00:13:37,440 --> 00:13:38,860
He's very, very weak.

187
00:13:39,120 --> 00:13:40,800
There's not much that he can do.

188
00:13:40,950 --> 00:13:42,090
He's just the house off.

189
00:13:42,780 --> 00:13:44,220
So let's go back to attack here.

190
00:13:47,320 --> 00:13:56,920
How cool was that we were able to keep our code nice and organized and extend our base class character

191
00:13:57,220 --> 00:14:00,280
to create all these different characters in our game?

192
00:14:00,550 --> 00:14:02,690
Elf, we have ogre.

193
00:14:02,800 --> 00:14:11,080
We can keep creating different things like night magicians, princesses, kings, queens and we can

194
00:14:11,080 --> 00:14:20,950
reuse code that we've written before, but also extend these classes to have their own individual unique

195
00:14:20,950 --> 00:14:25,990
things like properties like type or even methods like make fort.

196
00:14:27,370 --> 00:14:33,670
This is a simple example, but you can imagine the power of this as we get more and more properties

197
00:14:33,670 --> 00:14:35,830
and methods and bigger and bigger objects.

198
00:14:36,280 --> 00:14:39,130
Now let's take a break here and revisit this code in the next video.

199
00:14:40,170 --> 00:14:40,530
But by.
