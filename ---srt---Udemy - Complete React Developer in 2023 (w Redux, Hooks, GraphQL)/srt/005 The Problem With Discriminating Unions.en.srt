1
00:00:00,120 --> 00:00:01,160
Welcome back, everyone.

2
00:00:02,220 --> 00:00:08,130
In this video, I want to talk about this pattern that we implemented for our reducer using this discriminating

3
00:00:08,130 --> 00:00:12,840
union type in order to type this action that this reducer receives.

4
00:00:13,440 --> 00:00:19,890
Just to go over this discriminating union type is a union type of all of the different action types

5
00:00:20,160 --> 00:00:25,380
that can come in as the action argument that this reducer will respond to.

6
00:00:26,310 --> 00:00:30,150
The problem with doing this pattern and it's a very common pattern.

7
00:00:30,150 --> 00:00:34,980
You will see this throughout many different TypeScript enabled redux applications.

8
00:00:35,610 --> 00:00:43,950
The problem is that even though we as developers are saying, okay, this reducer only responds to these

9
00:00:43,950 --> 00:00:49,380
action types, redux doesn't only pass these action types to the reducer.

10
00:00:49,890 --> 00:00:54,570
Redux, as we know, passes every single action type to the reducer.

11
00:00:54,780 --> 00:00:59,220
Whenever an action dispatches, they go to every single reducer.

12
00:00:59,670 --> 00:01:08,070
So even though for us in our code, we know that for this reducer we only want to respond to these three

13
00:01:08,100 --> 00:01:09,090
different actions.

14
00:01:09,570 --> 00:01:15,930
In reality, when all of this compiles down to JavaScript, in the end, Redux is still going to dispatch

15
00:01:15,930 --> 00:01:20,880
all the actions, and there's no type cards that's preventing any of the actions that don't match this

16
00:01:20,880 --> 00:01:22,860
discriminating union from coming in.

17
00:01:23,490 --> 00:01:27,060
So we have an interesting path down this here.

18
00:01:27,480 --> 00:01:34,080
We know that there is value that we get from typing out this action because now we know that based on

19
00:01:34,080 --> 00:01:40,770
what code we're implementing inside this payload, for example, must be category, because by the time

20
00:01:40,770 --> 00:01:48,960
that our code can pass this case statement of fetch category success, the action must be fetch category

21
00:01:48,960 --> 00:01:49,530
success.

22
00:01:49,770 --> 00:01:53,850
We get that benefit through using our typescript types.

23
00:01:54,800 --> 00:01:59,990
But in order to retain that, we do lose some of the actual reality of our code.

24
00:02:00,230 --> 00:02:06,980
For example, if I were to comment out this default return state, first of all, you'll notice that

25
00:02:06,980 --> 00:02:08,330
this is not during an error.

26
00:02:09,110 --> 00:02:14,480
In fact, even if we explicitly tell this reducer to return category state.

27
00:02:16,710 --> 00:02:18,720
Notice how this is not an issue.

28
00:02:19,320 --> 00:02:26,730
We don't get this type error that we're not returning when any action does not pass these types.

29
00:02:27,180 --> 00:02:29,580
Now, you might be wondering while you are, why is that happening?

30
00:02:30,150 --> 00:02:38,100
The reason for this is that TypeScript is inferring that this reducer will only receive these three

31
00:02:38,100 --> 00:02:38,850
action types.

32
00:02:39,120 --> 00:02:45,570
And inside of your code, you have created a case for all three of these action types, and they're

33
00:02:45,570 --> 00:02:52,020
all returning a state object and they're still returning category state type out of this reducer.

34
00:02:52,530 --> 00:02:57,810
So TypeScript thinks that you've actually covered every possible case that this reducer can receive,

35
00:02:58,380 --> 00:02:59,550
but we know that's not true.

36
00:03:00,000 --> 00:03:05,730
There are a bunch of actions that fire, whether it be the ones that are not within category action

37
00:03:06,000 --> 00:03:11,100
or maybe it's the init action that dux actually fires on initialization.

38
00:03:11,490 --> 00:03:16,680
Maybe it's these different actions such as redux persist, rehydrate that we've seen before from our

39
00:03:16,680 --> 00:03:17,190
middleware.

40
00:03:17,610 --> 00:03:20,100
All of these actions pass through these reducers.

41
00:03:20,310 --> 00:03:25,890
And again, the way that redux determines that this does not need to be re rendered is through this

42
00:03:25,890 --> 00:03:26,730
default return.

43
00:03:27,150 --> 00:03:29,940
But now our code no longer is protected from it.

44
00:03:30,450 --> 00:03:36,660
And in fact, if we come here, what we see is that we do not have categories because it returned undefined.

45
00:03:37,410 --> 00:03:38,250
Ignore this for now.

46
00:03:38,250 --> 00:03:39,090
This is a type error.

47
00:03:39,450 --> 00:03:44,490
But here you'll notice that the error itself says the slice reducer for key categories returned undefined

48
00:03:44,490 --> 00:03:45,750
during initialization.

49
00:03:46,080 --> 00:03:50,370
And the reason for that is that init action got fired when redux first mounted.

50
00:03:50,700 --> 00:03:53,670
That init action passes in as an action.

51
00:03:53,910 --> 00:03:58,950
It sees that inside the switch statement there is no default author so nothing happens.

52
00:03:59,160 --> 00:04:04,440
Undefined gets return that becomes the state slice for this category is reducer.

53
00:04:05,310 --> 00:04:08,340
So this is where this code is problematic.

54
00:04:09,030 --> 00:04:15,930
So what we need to do is we actually need to modify our reducer utils with something that allows us

55
00:04:15,930 --> 00:04:19,080
to be more diligent in the actual matching.

56
00:04:19,560 --> 00:04:21,660
And this is known as type guards.

57
00:04:22,380 --> 00:04:26,730
So the way that we can do this is inside of our reducer utils.

58
00:04:27,240 --> 00:04:34,980
We need to create some way for us to actually match these actions directly on the type itself.

59
00:04:35,250 --> 00:04:41,820
So the type value needs to be something that we can leverage in order to check in our reducer rather

60
00:04:41,820 --> 00:04:45,420
than passing this discriminating union.

61
00:04:45,930 --> 00:04:47,880
So we know we can get any action.

62
00:04:48,450 --> 00:04:54,330
The thing, though, is that despite getting any action, we only want our code to respond to specific

63
00:04:54,360 --> 00:04:54,900
actions.

64
00:04:55,620 --> 00:04:57,060
So how do we do that?

65
00:04:57,930 --> 00:05:01,290
Well, this is where we're going to create something known as unmatchable.

66
00:05:02,320 --> 00:05:05,450
A manageable type is a type that we ourselves implement.

67
00:05:05,860 --> 00:05:12,820
And what this allows us to do is it allows us to extend all of these different action creator functions

68
00:05:13,540 --> 00:05:20,770
with an ability to match the received action by the type that this action creator is associated to.

69
00:05:21,430 --> 00:05:28,140
This action creator, we know returns back this specific type with this categories action type batch

70
00:05:28,180 --> 00:05:33,040
category start as the type that this action creator represents.

71
00:05:33,430 --> 00:05:34,690
So we'll receive an action.

72
00:05:34,690 --> 00:05:37,420
We want to leverage this function to do a check.

73
00:05:38,230 --> 00:05:45,040
And the way we do that is we're actually going to attach a method on this action creator.

74
00:05:46,100 --> 00:05:49,430
So what we're going to do first is let me show you what I mean.

75
00:05:50,990 --> 00:05:52,940
Any function, regardless of what it is.

76
00:05:52,940 --> 00:06:00,440
Let's say my func and this is equal to some function that runs console log hit.

77
00:06:02,490 --> 00:06:03,000
Here.

78
00:06:03,030 --> 00:06:08,900
You can run my funk and what you'll see is a console.log hit in JavaScript.

79
00:06:08,910 --> 00:06:14,190
Well, almost everything is a object, especially a function.

80
00:06:15,030 --> 00:06:18,450
That means that we can actually attach additional methods on here.

81
00:06:18,630 --> 00:06:24,690
I can say my function dot match is equal to a function that runs console dot log.

82
00:06:27,310 --> 00:06:31,330
And now I can still run my funk as a function by itself.

83
00:06:31,630 --> 00:06:32,800
You'll see that we log hit.

84
00:06:33,550 --> 00:06:37,930
But what I can also do is I can run my funk dot match.

85
00:06:39,270 --> 00:06:40,230
And in a log hat.

86
00:06:41,130 --> 00:06:44,100
So it does not stop my func from being a function.

87
00:06:44,700 --> 00:06:49,800
It just extends the ability for us to add different methods on top of it.

88
00:06:50,640 --> 00:06:52,020
And this is what we're going to do.

89
00:06:52,440 --> 00:06:57,630
We are going to leverage the fact that in JavaScript everything is an object to attach additional properties

90
00:06:57,630 --> 00:07:03,720
on our action creators so that they can behave also as action type guards.

91
00:07:04,200 --> 00:07:06,450
So I'm going to talk about how we do that in the next video.

92
00:07:06,810 --> 00:07:09,630
But the main idea I want you to understand is why we need it.

93
00:07:10,530 --> 00:07:16,320
And again, the reason why is because this reducer is assuming that all the actions coming through are

94
00:07:16,320 --> 00:07:17,850
going to be one of these three types.

95
00:07:18,210 --> 00:07:20,670
But in reality, it's actually not that case.

96
00:07:21,180 --> 00:07:26,130
As we saw redux, initialization, middleware passes, all these different actions.

97
00:07:26,400 --> 00:07:28,290
There's lots of different actions that might fire.

98
00:07:28,980 --> 00:07:34,380
And even though we might have this default return state, we still want TypeScript to be accurate,

99
00:07:34,680 --> 00:07:39,900
meaning that if this gets removed, we want there to be an actual error of some kind, meaning that

100
00:07:39,900 --> 00:07:41,070
we haven't handled anything.

101
00:07:41,700 --> 00:07:42,750
So that's what we need to do.

102
00:07:43,140 --> 00:07:44,340
And let's do that in the next video.
