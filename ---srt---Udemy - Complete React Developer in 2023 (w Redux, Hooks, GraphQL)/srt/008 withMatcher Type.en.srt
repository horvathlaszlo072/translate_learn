1
00:00:00,520 --> 00:00:01,450
Welcome back, everyone.

2
00:00:01,990 --> 00:00:04,300
In our last video, we created our Mashable type.

3
00:00:04,720 --> 00:00:11,590
Now we need to create the actual with match or utility function that receives some action creator in

4
00:00:11,590 --> 00:00:16,900
order to create a new Mashable type out of that action creator.

5
00:00:17,680 --> 00:00:22,150
So first, we need to define this function with matcher.

6
00:00:23,070 --> 00:00:27,190
So this with matter is going to be exactly that function definition.

7
00:00:27,210 --> 00:00:31,140
So we're going to overload this function with what kinds of action creators will receive.

8
00:00:31,530 --> 00:00:41,010
We might receive an action creator that has no parameters and it returns back and action any action.

9
00:00:42,010 --> 00:00:47,890
And for us, we know that this any actions type value is always going to be a string.

10
00:00:47,890 --> 00:00:50,110
As far as we're concerned, we're using strings.

11
00:00:50,260 --> 00:00:54,850
So we're just going to say, hey, what you're going to give me is going to have type string.

12
00:00:55,730 --> 00:00:58,610
Then what we're going to say is that we.

13
00:00:59,680 --> 00:01:06,250
Are going to receive the action creator function as the literal parameter for this with matcher function.

14
00:01:06,520 --> 00:01:14,530
So essentially if we had this fetch category start, we would be saying with matcher receives fetch

15
00:01:14,530 --> 00:01:19,420
category start and we want to return back this modified version of fetch category star function.

16
00:01:19,600 --> 00:01:22,420
But it has the match method and it has the type on it.

17
00:01:23,390 --> 00:01:24,560
So that's really what we're saying.

18
00:01:24,920 --> 00:01:31,370
So of course, that means that with matter must receive action creator and this action creator is going

19
00:01:31,370 --> 00:01:34,760
to be of that ac generic that we pass into it.

20
00:01:36,910 --> 00:01:43,390
And what we're going to get back is a mashable object of that type a C.

21
00:01:45,220 --> 00:01:51,160
So here, of course, that AC that we passed is also the AC that we're giving to the Mashable type.

22
00:01:51,940 --> 00:01:55,860
And Mashable, of course, will reach in, get the type off of the return type of AC.

23
00:01:56,320 --> 00:02:01,090
And then similarly, we will create a new match function for it with this with match.

24
00:02:01,150 --> 00:02:02,800
But for now we're just overloading this function.

25
00:02:02,800 --> 00:02:05,920
We're defining all the different types of action creators we may receive.

26
00:02:06,610 --> 00:02:12,460
We know we can receive one with no parameters, and we also know we can receive one with parameters.

27
00:02:13,030 --> 00:02:18,130
If you think about our action creator, we have this one that receives a category categories array as

28
00:02:18,130 --> 00:02:18,730
the parameter.

29
00:02:19,120 --> 00:02:20,710
We have this one that receives an error.

30
00:02:21,190 --> 00:02:25,830
In fact, all of our action creators can receive any plethora of arguments.

31
00:02:25,840 --> 00:02:28,450
That's not the purpose of what we care about.

32
00:02:28,690 --> 00:02:32,140
All we care is that we would turn back in action from each of these action creators.

33
00:02:32,140 --> 00:02:32,890
That's their purpose.

34
00:02:33,730 --> 00:02:39,070
So here we need to account for these action creators that could receive any number of arguments.

35
00:02:39,280 --> 00:02:45,550
And the way that you type that is you accumulate all the arguments like so and you say that they are

36
00:02:45,580 --> 00:02:50,620
anything when you accumulate them with the triple ellipses, essentially we're saying, hey, this is

37
00:02:50,620 --> 00:02:51,790
going to be a raid.

38
00:02:51,820 --> 00:02:54,310
I'm going to concatenate them all into an array.

39
00:02:55,470 --> 00:02:56,910
So they can be anything.

40
00:02:56,940 --> 00:02:58,080
I don't really know what they are.

41
00:02:58,110 --> 00:03:01,890
So this is the one place where a casting out as any is actually saying.

42
00:03:01,920 --> 00:03:03,630
It could be anything because it's true.

43
00:03:03,630 --> 00:03:04,350
It can be anything.

44
00:03:04,350 --> 00:03:05,280
We don't know what it might be.

45
00:03:06,390 --> 00:03:08,400
And what we're going to do is we're going to say, okay.

46
00:03:10,260 --> 00:03:14,550
This function still gives us back any action.

47
00:03:15,700 --> 00:03:19,870
And at the same time, we also know that the type is going to be a strength.

48
00:03:20,560 --> 00:03:22,030
So really, that's all we're doing.

49
00:03:22,030 --> 00:03:25,720
We're just essentially saying, hey, I might receive a.

50
00:03:25,750 --> 00:03:27,400
Action created that gets no parameters.

51
00:03:27,820 --> 00:03:30,910
I might receive an action creator that has parameters.

52
00:03:31,920 --> 00:03:41,430
And here again, what we're going to do is that we are going to receive some action creator of type

53
00:03:41,430 --> 00:03:44,250
AC and we return back Mashable.

54
00:03:45,820 --> 00:03:46,990
Of that same AC type.

55
00:03:47,740 --> 00:03:48,370
And that's it.

56
00:03:48,610 --> 00:03:50,170
That's all we're really typing here.

57
00:03:51,350 --> 00:03:56,480
And now what we need to do is write the actual function itself of with matcher.

58
00:03:56,480 --> 00:04:00,860
And what it does now with matcher receive some action creator.

59
00:04:01,310 --> 00:04:08,450
This action creator is a function and we're using a generic function here because we know that our action

60
00:04:08,450 --> 00:04:12,650
creator can be any type of function, any kind of arguments return, any kind of action.

61
00:04:12,860 --> 00:04:17,480
So we're going to use a generic function because we've already got some of our safeguards up here extending

62
00:04:17,480 --> 00:04:18,710
what this function will be.

63
00:04:18,950 --> 00:04:23,330
Remember, this typing is just the implementation of the function in JavaScript.

64
00:04:23,630 --> 00:04:27,140
These others are type overloading for the function that we've already done.

65
00:04:27,710 --> 00:04:29,780
So we don't need to go that intense with this one.

66
00:04:30,530 --> 00:04:35,360
So here I'm going to say, okay, what this with matcher function does is it receives this action creator.

67
00:04:35,690 --> 00:04:40,130
And what it does is it gets the type value off of action creator.

68
00:04:43,710 --> 00:04:44,660
Being invoked.

69
00:04:44,670 --> 00:04:47,880
So we get the action and then we get the type value.

70
00:04:48,720 --> 00:04:53,340
The reason why we know there must be a type value is because these action create our functions, return

71
00:04:53,340 --> 00:04:54,200
back actions.

72
00:04:54,210 --> 00:04:55,370
That's exactly what they do.

73
00:04:55,380 --> 00:05:01,080
They always return back some action, and every action must have a type value.

74
00:05:01,350 --> 00:05:07,530
So we're invoking the creator, we're getting the action object, and then we're getting the type value

75
00:05:07,530 --> 00:05:09,450
on it, and we're setting it to this variable.

76
00:05:10,020 --> 00:05:15,150
And then what we're going to do now is we are going to create the actual map of the object.

77
00:05:15,750 --> 00:05:19,800
So we're going to say object, assign on the action creator.

78
00:05:20,520 --> 00:05:26,620
And what we're going to do is we are going to give it the type value as well as the match function.

79
00:05:27,030 --> 00:05:31,440
So the match function receives an action that can be of any action.

80
00:05:32,770 --> 00:05:40,780
And what it does is it does the check it checks that action type of this past in action is equal or

81
00:05:40,780 --> 00:05:42,610
not to the type itself.

82
00:05:43,330 --> 00:05:47,530
Now, remember this match definition we've already defined up here or received some action.

83
00:05:47,770 --> 00:05:52,000
And what it does is it type narrows down this argument.

84
00:05:52,600 --> 00:06:00,310
If this passes, meaning that this is true, then this action received narrows itself from any action

85
00:06:00,310 --> 00:06:06,820
to the return type of our action creator, which of course is our action create our function type value

86
00:06:06,970 --> 00:06:08,110
that we just got here.

87
00:06:08,920 --> 00:06:13,810
So it's a lot of steps, but what we're doing is we're essentially now creating this generic function

88
00:06:14,080 --> 00:06:19,060
that is overloaded and allows us to receive any kind of action creator, but essentially be able to

89
00:06:19,060 --> 00:06:21,760
check the type against it, which is very powerful.

90
00:06:22,270 --> 00:06:26,800
Now, we've done a lot of this with matcher is not easy to understand.

91
00:06:27,250 --> 00:06:34,030
The main idea, though, is that we are just trying to extract the type off of the action that comes

92
00:06:34,030 --> 00:06:35,150
out of this action creator.

93
00:06:35,500 --> 00:06:41,680
And we're using these to do double duty so that these action creator functions can also match actions

94
00:06:41,830 --> 00:06:43,090
inside of our reducer.

95
00:06:44,020 --> 00:06:47,710
So I want you to look at this, really understand what's happening before we move on.

96
00:06:47,710 --> 00:06:49,960
Actually use this with match or utility function.

97
00:06:50,290 --> 00:06:54,970
Just really absorb what it is that we wrote and all of this type of definition.

98
00:06:56,110 --> 00:07:01,240
Once we move on to the next video, we're going to use them and hopefully it'll all clear up and that's

99
00:07:01,240 --> 00:07:02,240
all we're going to do in the next video.

100
00:07:02,260 --> 00:07:07,390
But before moving on, I just want you to understand the typing here, maybe not necessarily the full

101
00:07:07,390 --> 00:07:11,620
purpose, but at the very least understand what the typescript code is doing.

102
00:07:12,620 --> 00:07:17,300
So once you feel like you have a good handle on it, move on to the next video where we'll utilize this

103
00:07:17,300 --> 00:07:18,470
with Match Your Function.

104
00:07:18,800 --> 00:07:19,850
I'll see you in the next video.
