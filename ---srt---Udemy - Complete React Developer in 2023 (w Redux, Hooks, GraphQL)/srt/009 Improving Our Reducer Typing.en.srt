1
00:00:00,150 --> 00:00:01,050
Welcome back, everyone.

2
00:00:01,710 --> 00:00:07,800
In the last video we finished updating our width matcher function that takes some action creator function

3
00:00:08,130 --> 00:00:14,250
and adds an additional functionality of them so that they can determine if a past action has the same

4
00:00:14,250 --> 00:00:17,970
type as the corresponding action that they create.

5
00:00:18,660 --> 00:00:22,320
We are now going to use them so that we can understand what this is doing.

6
00:00:23,040 --> 00:00:29,190
So inside of Category Action, let's import it in and then what we're going to do is use with matcher

7
00:00:29,190 --> 00:00:34,110
and wrap around each and every one of these different action creators.

8
00:00:34,890 --> 00:00:40,920
So these action creators we've made so far are going to be the argument that gets passed to with matcher.

9
00:00:41,850 --> 00:00:46,680
And now what happens is that each of these are Mashable action creators.

10
00:00:47,100 --> 00:00:50,040
They now have that extended dot match method.

11
00:00:50,370 --> 00:00:52,950
So here, if I show you that category, start.

12
00:00:55,810 --> 00:00:56,200
Type.

13
00:00:57,010 --> 00:00:57,910
What do you think this will be?

14
00:00:58,720 --> 00:01:01,090
This will be that categories, action type.

15
00:01:01,090 --> 00:01:02,200
That's category start.

16
00:01:02,740 --> 00:01:09,040
Because remember type inside of our Mashable reaches into the return type of that action creator and

17
00:01:09,040 --> 00:01:10,270
gets the actual type.

18
00:01:10,810 --> 00:01:14,560
So here this is an action of the type categories.

19
00:01:15,010 --> 00:01:15,820
Fetch, action, start.

20
00:01:16,180 --> 00:01:24,010
So we're reaching into this function, getting this action type, and then getting the actual type from

21
00:01:24,010 --> 00:01:30,370
the enum and setting that to some type value at the top level of the actual function itself.

22
00:01:32,500 --> 00:01:39,190
Similarly, if you check the match function, it is also a faction that receives some action of any

23
00:01:39,190 --> 00:01:39,640
action.

24
00:01:40,060 --> 00:01:45,550
And what it does is it types that predicate to fetch category start if it passes the match.

25
00:01:46,660 --> 00:01:48,430
So that's really all we're doing here.

26
00:01:49,150 --> 00:01:51,730
Now we're going to use these inside of the reducer.

27
00:01:52,810 --> 00:01:54,400
So now that's category start.

28
00:01:54,820 --> 00:01:55,860
Fetch categories.

29
00:01:55,870 --> 00:01:56,530
Success.

30
00:01:56,950 --> 00:01:57,250
Fetch.

31
00:01:57,250 --> 00:01:57,730
Categories.

32
00:01:57,730 --> 00:01:58,110
Failed.

33
00:01:59,480 --> 00:02:04,340
So remember, the original problem we're aiming to solve is that we want to make it so that this reducer

34
00:02:04,340 --> 00:02:07,130
is way more accurate to what's going to actually happen.

35
00:02:07,910 --> 00:02:13,010
Essentially, each of these actions that come in can be any action at all.

36
00:02:13,580 --> 00:02:16,100
So let's import in any action from Redux.

37
00:02:19,200 --> 00:02:25,890
So instead of selling this to this discriminating union of category action, we know it can be any action.

38
00:02:27,350 --> 00:02:33,500
So now what we're going to do instead of using this switch statement is we're going to say, okay,

39
00:02:33,500 --> 00:02:38,740
if the action that you give me matches fetch category start.

40
00:02:38,810 --> 00:02:41,390
So I'm say if that's category start match the action.

41
00:02:42,360 --> 00:02:46,500
If it matches, if you hover over this action now, what do you see?

42
00:02:47,070 --> 00:02:49,020
You see that the action has been narrowed.

43
00:02:49,020 --> 00:02:51,390
It must be of fetch category start.

44
00:02:51,870 --> 00:02:52,950
That's what we're doing here.

45
00:02:53,760 --> 00:02:55,920
If it matches, it must be of this type.

46
00:02:56,310 --> 00:03:03,270
So now what we're going to do is return back to this category state except is loading is true.

47
00:03:04,020 --> 00:03:08,610
So instead of using switch in cases where literally saying in with if statements.

48
00:03:10,230 --> 00:03:12,210
Alternatively, if.

49
00:03:13,010 --> 00:03:15,170
Fetch categories success.

50
00:03:16,220 --> 00:03:17,060
On this action.

51
00:03:17,980 --> 00:03:18,370
Then what?

52
00:03:18,370 --> 00:03:19,330
We're going to return.

53
00:03:20,890 --> 00:03:21,610
Is this?

54
00:03:23,790 --> 00:03:27,270
Where the categorise goes to the payload is loading goes to false.

55
00:03:27,690 --> 00:03:32,760
Again, if you check the action, you'll notice that for it to match it must be type narrowed down to

56
00:03:32,760 --> 00:03:34,800
fetch category success in order for that to work.

57
00:03:35,820 --> 00:03:44,190
Similarly, if fetch categories failed matches on the action, then we're going to return back.

58
00:03:46,400 --> 00:03:47,630
This corresponding.

59
00:03:48,560 --> 00:03:49,280
State block.

60
00:03:54,500 --> 00:04:00,560
Now what you'll see, though, is that we still have an error inside of category state.

61
00:04:01,340 --> 00:04:07,490
The reason why when you hover over it, it says function lacks ending return statement and return type

62
00:04:07,490 --> 00:04:09,830
does not include undefined.

63
00:04:10,610 --> 00:04:18,230
So here we've explicitly stated that this function always returns you back some category state, but

64
00:04:18,230 --> 00:04:20,120
clearly that is not what's happening.

65
00:04:20,570 --> 00:04:23,570
So in order for this to work, we must explicitly return.

66
00:04:23,570 --> 00:04:31,550
If none of these actions match any of our corresponding action creators, then what we do is we return

67
00:04:31,550 --> 00:04:32,270
the default state.

68
00:04:33,310 --> 00:04:37,420
And now our categories reducer is fully type safe.

69
00:04:38,170 --> 00:04:41,890
So this is the whole thing that we were gunning to do in the end.

70
00:04:42,760 --> 00:04:49,630
We wanted to create all of these different action creator mashable's so that they can correspondingly

71
00:04:49,630 --> 00:04:55,960
match the actions against the actions that they create if they create an action that matches.

72
00:04:56,230 --> 00:04:59,680
And it actually derives the correct action.

73
00:05:00,250 --> 00:05:02,230
Then we'll update the state accordingly.

74
00:05:02,440 --> 00:05:05,950
So instead of using a switch statement, we now use this magical pattern.

75
00:05:06,790 --> 00:05:08,710
And here now this is very clear.

76
00:05:08,980 --> 00:05:13,690
We know as redux developers reducers can receive any action at all.

77
00:05:14,380 --> 00:05:17,020
How we respond them now is much clearer.

78
00:05:17,380 --> 00:05:20,560
And now our code is expecting us to always return back.

79
00:05:20,560 --> 00:05:21,340
Category state.

80
00:05:21,910 --> 00:05:28,720
So this is a much more accurate and much more reflective of reality version of the categories reducer,

81
00:05:28,730 --> 00:05:30,610
but it's entirely type safe.

82
00:05:31,450 --> 00:05:38,500
So that was the whole idea around why we were trying to create this match able type so we can get rid

83
00:05:38,500 --> 00:05:40,780
of these variables that we're now no longer using.

84
00:05:41,710 --> 00:05:44,800
And we can even get rid of this discriminating union type.

85
00:05:46,310 --> 00:05:51,200
And now, again, I want you to really think about what we did here.

86
00:05:51,920 --> 00:05:53,020
Look at these functions.

87
00:05:53,030 --> 00:05:54,290
Look at this match ball type.

88
00:05:54,320 --> 00:05:57,200
Think about the flow and the justification around why we did it all.

89
00:05:57,650 --> 00:06:02,870
Because this is probably one of the most complicated parts of TypeScript, which was typing Redux,

90
00:06:02,870 --> 00:06:07,940
as I mentioned, because essentially Redux is a very flexible service.

91
00:06:08,330 --> 00:06:10,550
It receives any kind of action.

92
00:06:10,820 --> 00:06:16,280
But in order for our code to actually be TypeScript and for us to expectedly do what we need to do,

93
00:06:16,700 --> 00:06:23,600
we had to extend out some type of functionality that will do this type of type narrowing for us so that

94
00:06:23,600 --> 00:06:29,090
we know for sure if we get the correct action, then we respond accordingly in kind.

95
00:06:29,960 --> 00:06:35,270
Now there are some arguments by some in the TypeScript redux world that this is a little overkill.

96
00:06:36,150 --> 00:06:38,780
But honestly, it's just the way that TypeScript works.

97
00:06:38,790 --> 00:06:43,890
If you want all the benefits of TypeScript and you want that type narrowing and that static type analysis,

98
00:06:44,370 --> 00:06:47,160
then you have to commit and you got to commit fully.

99
00:06:48,270 --> 00:06:53,250
And in order to commit fully, you got to learn about all of these different techniques function overloading,

100
00:06:53,520 --> 00:07:00,210
intersection types, union types, discriminating unions and the advantages and disadvantages that come

101
00:07:00,210 --> 00:07:02,820
with them inside of this context of Redux.

102
00:07:03,210 --> 00:07:05,910
We had to learn about this return type.

103
00:07:06,420 --> 00:07:10,650
We also had to learn about these type predicate functions and type narrowing.

104
00:07:11,160 --> 00:07:15,690
We've learned so many new things about TypeScript, and I'm hoping that through this you're starting

105
00:07:15,690 --> 00:07:17,460
to see that TypeScript itself.

106
00:07:17,820 --> 00:07:25,110
While Complex is really learnable, it's just it takes a long time and a lot of practice, but much

107
00:07:25,110 --> 00:07:32,010
of typescript advantages is that when you learn this, a lot of languages actually have these functionalities.

108
00:07:32,020 --> 00:07:34,950
They're just come with a statically type language.

109
00:07:35,220 --> 00:07:42,690
And TypeScript is trying to make JavaScript into as type safe and statically typed as possible.

110
00:07:43,320 --> 00:07:48,630
It's not all the way there, but it does really try to and are afraid to do so.

111
00:07:48,630 --> 00:07:53,700
You got to break the way that you think about JavaScript, because a lot of our JavaScript best practices

112
00:07:54,180 --> 00:07:58,770
come from thinking about the fact that JavaScript is not typed like that.

113
00:07:59,430 --> 00:08:02,460
Whereas with TypeScript, it's really trying to get that benefit.

114
00:08:02,460 --> 00:08:09,210
And the main advantage that comes with utilizing TypeScript in this context is that you really, really

115
00:08:09,210 --> 00:08:13,620
absorb and get the type safety that comes with it.

116
00:08:13,650 --> 00:08:21,480
You're really making your code a lot more predictable because you're narrowing down as much of the types

117
00:08:21,480 --> 00:08:25,920
as possible and you're narrowing down the actual functionality of the code that you've written.

118
00:08:27,290 --> 00:08:34,160
So with this, we've probably learned honestly 90 to 95% of what we need to do in order to type the

119
00:08:34,160 --> 00:08:35,930
rest of our application.

120
00:08:36,380 --> 00:08:39,320
The only thing that we haven't done is we have not typed the sagas.

121
00:08:40,070 --> 00:08:48,260
But what I want you to try is I want you to type all the remaining files inside of these store folders.

122
00:08:48,740 --> 00:08:54,060
So try and type the cart and try and type the user in the next video.

123
00:08:54,080 --> 00:08:54,950
We'll do it together.

124
00:08:54,950 --> 00:09:00,380
But I just want you to practice first and then we'll continue typing out the rest of our middleware.

125
00:09:00,410 --> 00:09:02,720
We'll type our store, our route reducer.

126
00:09:03,080 --> 00:09:08,840
And from there, we'll finally type our sagas and we'll see all of our code run with our redux now fully

127
00:09:08,840 --> 00:09:09,230
typed.

128
00:09:10,340 --> 00:09:13,440
So try that for me and then join me in the next video.

129
00:09:13,460 --> 00:09:14,450
We'll do it together.
