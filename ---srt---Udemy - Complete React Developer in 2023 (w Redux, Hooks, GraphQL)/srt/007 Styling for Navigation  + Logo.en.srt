1
00:00:00,180 --> 00:00:01,290
Welcome back, everyone.

2
00:00:01,800 --> 00:00:08,220
In the last video, we learned about implementing our navigation component, as well as utilizing this

3
00:00:08,220 --> 00:00:10,350
link component we get from RAC Router Dot.

4
00:00:10,950 --> 00:00:15,030
In this video, we're going to actually replace this logo with an actual logo.

5
00:00:15,300 --> 00:00:20,050
And we're also going to implement some styling for this navigation bar to begin with.

6
00:00:20,070 --> 00:00:23,880
We need to bring in an SPG that provided you for this logo.

7
00:00:24,330 --> 00:00:28,950
So first, what you're going to do is you're going to make a new folder and you can call it assets at

8
00:00:28,950 --> 00:00:29,670
the top level.

9
00:00:30,270 --> 00:00:33,330
Inside of this assets folder is where you're going to place your SPG.

10
00:00:34,080 --> 00:00:41,100
So inside, if you open up your resources folder, you should find this Crown SVG file and I want you

11
00:00:41,100 --> 00:00:45,240
to drag that, download it and put it into your assets folder.

12
00:00:45,960 --> 00:00:49,020
Here, you'll see that this is what the actual logo looks like.

13
00:00:49,410 --> 00:00:55,200
And what you'll also notice is that if you look in the actual file itself, it's a bunch of HTML.

14
00:00:55,800 --> 00:01:02,250
SPG is a scalable vector, which means that no matter how big or how small you make it, it will always

15
00:01:02,250 --> 00:01:04,500
have these crisp, clean lines.

16
00:01:04,830 --> 00:01:11,700
There will not be any of that pixelation that you see with PNG and JPEGs as you scale and reduce them.

17
00:01:12,000 --> 00:01:13,380
So that's why they're great for logos.

18
00:01:14,160 --> 00:01:16,590
So once you have it in, you need to actually use it.

19
00:01:16,980 --> 00:01:21,600
And the great thing about React is that we can actually import these as components.

20
00:01:22,080 --> 00:01:25,350
So here I'm going to say import react components.

21
00:01:29,990 --> 00:01:35,870
I'm going to say that this is as the Crown logo, and I'm going to import this from.

22
00:01:40,120 --> 00:01:41,320
Our assets folder.

23
00:01:43,560 --> 00:01:48,210
And you can just directly use this like, so it'll be a component.

24
00:01:49,230 --> 00:01:52,980
And the other thing we want to do is give it a class name of logo.

25
00:01:54,210 --> 00:01:57,510
And now, if we save this and we go back to application.

26
00:01:59,070 --> 00:02:01,860
We see that we have our Crown logo now.

27
00:02:02,430 --> 00:02:03,120
We've got a shop.

28
00:02:03,330 --> 00:02:04,950
There's the sharp edge and we click it.

29
00:02:05,190 --> 00:02:07,110
It behaves the way we expected it to.

30
00:02:07,890 --> 00:02:09,510
So this is everything that we wanted to do.

31
00:02:10,260 --> 00:02:12,930
The next thing we want to do is we want to implement the styling.

32
00:02:13,260 --> 00:02:17,330
So what you should do is open up navigation dot styles.

33
00:02:17,590 --> 00:02:18,620
That's yes.

34
00:02:18,630 --> 00:02:19,930
And that's your navigation.

35
00:02:19,950 --> 00:02:25,170
Just like we always do, and what we're going to do now is you're going to go again into your resource

36
00:02:25,180 --> 00:02:29,010
folder, download the navigation styles, file and then paste it in.

37
00:02:29,820 --> 00:02:32,900
Now, once you've pasted it in, just save your styles.

38
00:02:32,910 --> 00:02:37,590
File and remember to import this star file into your navigation component.

39
00:02:38,310 --> 00:02:43,260
So let's just import the relative route, as we've always done importing navigation styles that says,

40
00:02:43,800 --> 00:02:46,590
Let's save this and let's go back to our application.

41
00:02:47,310 --> 00:02:51,660
And here we see that our bar and our styling has been implemented.

42
00:02:52,350 --> 00:02:56,400
Now, one thing you might notice is that the shop link has this underline.

43
00:02:56,880 --> 00:03:01,290
This is because the default styling that browsers apply on our anchor links.

44
00:03:01,500 --> 00:03:05,460
So we don't want this and we want to change this behavior across all of our anchor links.

45
00:03:05,970 --> 00:03:11,950
So let's go back into our application and we're actually going to make a couple tweaks to our index

46
00:03:11,970 --> 00:03:12,870
dot SAS file.

47
00:03:13,560 --> 00:03:19,620
So this indexed, not SAS file is the default applicable styles that we want inside of our application.

48
00:03:19,710 --> 00:03:25,230
This essentially is styling that we want to do when we need to reset things or when we want it to apply

49
00:03:25,230 --> 00:03:28,780
across everything, which is why that's where we put our font family.

50
00:03:29,430 --> 00:03:30,730
There's two things I want to do.

51
00:03:30,750 --> 00:03:33,300
The first is I want to modify our anchor tags.

52
00:03:33,780 --> 00:03:38,490
And here I want to make it so that there's no text decoration, text decoration, none.

53
00:03:39,060 --> 00:03:43,860
This will, first of all, get rid of that underline when you've got a link that's been visited.

54
00:03:44,160 --> 00:03:46,770
And then I want to change the color to black.

55
00:03:47,220 --> 00:03:52,740
And here, if we save this now and we go back, we see that our length behaves the way that we expect

56
00:03:52,740 --> 00:03:56,820
it to in our final application, where it just looks like a black text.

57
00:03:57,790 --> 00:04:03,490
Now, there is one more thing that I want to modify and to modify, I need to show you something.

58
00:04:04,360 --> 00:04:06,690
Let's first inspect our element of shop.

59
00:04:07,550 --> 00:04:15,920
Looking at this div here, let's say that inside of our styles, let's just imagine that what we did

60
00:04:15,920 --> 00:04:20,840
is we added some hard with value of 50 pixels.

61
00:04:21,970 --> 00:04:28,090
So here we see that this has a 50 by 70 dimension.

62
00:04:28,630 --> 00:04:30,330
So 50 with 78.

63
00:04:31,150 --> 00:04:38,830
If I were to add padding twenty five pixels now, if you highlight it, you see that the actual dimension

64
00:04:38,830 --> 00:04:41,680
has gone up to 100 by 120.

65
00:04:41,980 --> 00:04:48,130
So the overall width and height of our element has increased by twenty five pixels on each side.

66
00:04:48,850 --> 00:04:54,850
If you scroll down, you actually directly will see a visual representation of this, so you'll actually

67
00:04:54,850 --> 00:05:00,040
notice that border and padding will both increase the width of your element.

68
00:05:00,910 --> 00:05:02,680
This is not intuitive.

69
00:05:03,340 --> 00:05:10,990
What we actually want is for the panning to be accounted for inside of the actual width and height of

70
00:05:10,990 --> 00:05:12,460
the elements that we have.

71
00:05:13,030 --> 00:05:17,010
You don't want to add padding and add borders that will modify these values.

72
00:05:17,020 --> 00:05:22,450
It just seems unintuitive because if I say that the width of this element is 50 pixels, the width should

73
00:05:22,450 --> 00:05:23,230
never change.

74
00:05:23,950 --> 00:05:30,700
The way that we're going to do this is we're actually going to say that I want this box sizing to be

75
00:05:30,700 --> 00:05:31,780
border box.

76
00:05:32,380 --> 00:05:38,380
This now instead, if you hover, you'll see that because of our padding, it's kind of thrown off the

77
00:05:38,380 --> 00:05:41,230
placement of it in terms of where it's being highlighted.

78
00:05:41,590 --> 00:05:44,020
But you'll notice that the width and height is still 50 70.

79
00:05:44,380 --> 00:05:48,640
So this just means that if we actually add padding, we just need to make sure there are realistic values

80
00:05:48,640 --> 00:05:51,070
something like five pixels, for example for this component.

81
00:05:51,940 --> 00:05:55,420
But what we still want to do is make it more intuitive for us.

82
00:05:55,450 --> 00:06:01,510
So we want all of our elements of box signing Border Box and remember all that does is it just makes

83
00:06:01,510 --> 00:06:06,460
it so that you're padding and your borders don't throw off the dimensions of your component that you've

84
00:06:06,460 --> 00:06:06,940
defined.

85
00:06:07,420 --> 00:06:14,380
And to do this inside of our index assets SAS, we're also going to do star and then box sizing border

86
00:06:14,380 --> 00:06:14,800
box.

87
00:06:15,190 --> 00:06:21,160
This star matcher is a selector that matches everything, so anything that we can match will be matched

88
00:06:21,160 --> 00:06:21,940
and it will apply.

89
00:06:22,000 --> 00:06:26,950
Box signing bought a box on all of them, and that is the changes that we want to make.

90
00:06:27,370 --> 00:06:30,580
And now we have pretty much our navigation component.

91
00:06:30,820 --> 00:06:36,970
We can now easily add any new nav links into it by generating new links and putting them inside of our

92
00:06:36,970 --> 00:06:40,240
nav links container and then our logo is done for our homepage.

93
00:06:40,510 --> 00:06:45,030
And here now we see that this behaves exactly how we expected to.

94
00:06:45,550 --> 00:06:49,240
This now is already starting to look much closer to our final application.

95
00:06:49,480 --> 00:06:55,360
So now that we have this in the next video, let's actually start building out more of our application

96
00:06:55,360 --> 00:06:57,640
and filling in more of these links.

97
00:06:58,000 --> 00:06:58,960
I'll see in the next video.
