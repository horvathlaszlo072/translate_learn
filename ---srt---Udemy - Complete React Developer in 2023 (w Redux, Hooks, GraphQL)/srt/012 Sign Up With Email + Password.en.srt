1
00:00:00,490 --> 00:00:01,450
Welcome back, everyone.

2
00:00:02,200 --> 00:00:06,880
And the last video I issued a challenge to try and create this handle submit method yourself.

3
00:00:07,330 --> 00:00:11,620
Hopefully it worked out and you now are able to sign up users using email and password.

4
00:00:12,040 --> 00:00:13,100
It's really cool if you did.

5
00:00:13,120 --> 00:00:14,890
If not, let's do this together.

6
00:00:14,920 --> 00:00:15,760
No worries at all.

7
00:00:16,660 --> 00:00:22,180
So here are what we know is that for signing up a user, the first step we need to confirm is whether

8
00:00:22,180 --> 00:00:23,650
or not their passwords match.

9
00:00:24,190 --> 00:00:29,680
So here I want to say that if password does not equal, confirm password.

10
00:00:31,110 --> 00:00:37,830
Then what I want to do is I want to alert them that your passwords do not match.

11
00:00:39,400 --> 00:00:42,730
And then I just want to exit because I don't want to proceed any further.

12
00:00:42,820 --> 00:00:45,640
I've already told them they need to now update their passwords.

13
00:00:46,390 --> 00:00:51,340
There's actually another way that you can add additional checks to this password and confirm password

14
00:00:51,640 --> 00:00:56,440
by adding additional length checks inside of the input fields themselves.

15
00:00:57,040 --> 00:01:04,360
I'm going to link for you the input documentation for this HDMI element, so if you wanted to add more

16
00:01:04,360 --> 00:01:09,010
functionality yourself, such as adding requirements of length and such.

17
00:01:09,160 --> 00:01:10,180
You can do that yourself.

18
00:01:10,570 --> 00:01:16,270
I'm not going to add any of that just because for me, this is enough for me to get the idea of what

19
00:01:16,270 --> 00:01:17,440
I'm trying to build with this form.

20
00:01:18,510 --> 00:01:24,210
And the other thing I want to do now is once I've made sure that passwords and confirm password match,

21
00:01:24,600 --> 00:01:28,980
I need to continue and actually attempt to create this user.

22
00:01:29,460 --> 00:01:36,570
So as we did before, we're going to try and catch because when we try and call our Firebase server,

23
00:01:36,570 --> 00:01:37,560
we might fail.

24
00:01:38,220 --> 00:01:42,810
And if we fail, we want to be able to catch that error here inside of the try.

25
00:01:42,840 --> 00:01:51,120
What I'm going to do is I am going to make sure to call this method that we just created, which is

26
00:01:51,120 --> 00:01:53,520
create a user with email and password.

27
00:01:54,880 --> 00:02:00,940
And here's what I'm going to do is I'm going to pass it the email value and the password value.

28
00:02:01,810 --> 00:02:05,380
These are the two values that we've structured off from our form fields.

29
00:02:06,870 --> 00:02:14,040
Then what I'm going to do is I'm going to make sure that I know what it is, that this response is first

30
00:02:14,070 --> 00:02:16,620
before I start working with anything else.

31
00:02:17,220 --> 00:02:20,760
So in this particular case, let's say we get an error as well.

32
00:02:20,770 --> 00:02:25,560
Let's just catch the error and let's just console error the error.

33
00:02:26,670 --> 00:02:28,260
We can also console log the error.

34
00:02:29,100 --> 00:02:36,690
Maybe that's a little bit more clear for us right now, and we can just say user created encountered

35
00:02:37,440 --> 00:02:38,160
an error.

36
00:02:39,200 --> 00:02:40,320
Or user creation?

37
00:02:40,340 --> 00:02:41,810
Let's be more grammatically correct.

38
00:02:42,290 --> 00:02:45,560
User creation encountered an error and will log their.

39
00:02:47,430 --> 00:02:51,840
And this is enough for us to at least get started and see what's happening.

40
00:02:52,230 --> 00:02:56,460
So let's pass our handle, submit into our on submit handler here.

41
00:02:59,510 --> 00:03:00,830
And now let's save this.

42
00:03:02,020 --> 00:03:04,390
And let's go back to our application.

43
00:03:05,700 --> 00:03:07,770
And let's actually try it out.

44
00:03:08,550 --> 00:03:12,450
So here I'm going to say that my display name is Mike.

45
00:03:12,720 --> 00:03:19,200
My email is Mike at Gmail and my password is one two three four one two three four one two three four

46
00:03:19,200 --> 00:03:19,980
one two three four.

47
00:03:20,820 --> 00:03:21,890
So I know I'm logging this.

48
00:03:21,900 --> 00:03:26,430
Typically you don't want to do this, but I'm just logging it for our own benefit right now.

49
00:03:26,970 --> 00:03:29,100
And if I had sign up, let's see what happens.

50
00:03:29,730 --> 00:03:35,670
We get back a user credential and inside we see we get a user object.

51
00:03:36,060 --> 00:03:38,040
And here we get an access token.

52
00:03:38,580 --> 00:03:44,220
We didn't pass a display name because we have not actually done this inside of our code.

53
00:03:44,490 --> 00:03:46,530
So this is a very key point that I want you to notice.

54
00:03:47,010 --> 00:03:51,740
The display name here is not coming back to us inside of this user.

55
00:03:52,440 --> 00:03:53,190
But how could it?

56
00:03:53,490 --> 00:03:54,930
We just created this user.

57
00:03:55,170 --> 00:04:00,150
So of course, there's no display name, but the reason why this user object is the same is because

58
00:04:00,510 --> 00:04:08,280
Firebase is making sure that across all of its different ways that you can authenticate, you're expecting

59
00:04:08,280 --> 00:04:13,770
the same shape, whether or not there's a value or not, that's entirely up to the authentication method

60
00:04:13,770 --> 00:04:14,160
itself.

61
00:04:14,610 --> 00:04:19,470
The reason why for Google there's a display name is because in Google, when you set up your user,

62
00:04:19,500 --> 00:04:21,150
you have to tell Google what your name is.

63
00:04:21,540 --> 00:04:26,070
In our particular case, we did not do that in the actual authentication method.

64
00:04:26,340 --> 00:04:32,160
We did it in our form, but we don't actually do it in our authentication with it, and there's no real

65
00:04:32,160 --> 00:04:34,440
need to in this particular case.

66
00:04:34,440 --> 00:04:39,150
What we're going to do, though, is we are going to use this and store inside of our database since

67
00:04:39,150 --> 00:04:39,360
that.

68
00:04:39,780 --> 00:04:45,840
So this is an important distinction is that now display name is not coming from this user object display

69
00:04:45,840 --> 00:04:51,210
name is going to be coming from, ah, sign up form instead.

70
00:04:51,960 --> 00:04:53,030
So how are we going to do this?

71
00:04:54,200 --> 00:05:01,280
So here, let's go back into our application as we saw we are getting back this user, which is good

72
00:05:01,430 --> 00:05:02,690
because we want that user.

73
00:05:03,260 --> 00:05:10,790
But what we're going to do with this user is we are now going to have to pass this value that we have,

74
00:05:10,790 --> 00:05:13,160
which is the email and password confirmation.

75
00:05:14,380 --> 00:05:17,500
Into the actual final.

76
00:05:18,890 --> 00:05:22,700
Document that we're trying to generate, but let's look at this method right now.

77
00:05:23,300 --> 00:05:31,880
Our method infers from this user off the display name, the email and the creative that these were just

78
00:05:31,880 --> 00:05:39,480
assuming comes off of that user object because it did when we signed up before here.

79
00:05:39,500 --> 00:05:41,540
We're not going to be able to do that anymore.

80
00:05:42,260 --> 00:05:47,640
So in order for us to extend this functionality, we may sometimes get this value.

81
00:05:47,660 --> 00:05:49,160
We may, sometimes not.

82
00:05:50,090 --> 00:05:56,570
So what I'm going to do is I'm just going to say that, OK, in the cases where there's not, let's

83
00:05:56,570 --> 00:06:04,460
say we get some additional information and this additional information I'm just going to say is an object.

84
00:06:05,270 --> 00:06:13,100
And what I'll do is I will spread this object in at the end, after all of these fields have been filled

85
00:06:13,370 --> 00:06:16,340
from any previous variable setting that we've done.

86
00:06:17,090 --> 00:06:23,510
So if display name exists on use or off, then it will get spread through and we're not going to pass

87
00:06:23,510 --> 00:06:28,910
any additional information, meaning that this will probably by default, be just an empty object,

88
00:06:28,910 --> 00:06:29,600
for example.

89
00:06:30,350 --> 00:06:35,600
But let's say in our current example, display name, there's no value here.

90
00:06:35,990 --> 00:06:37,250
It was null, as we saw.

91
00:06:38,060 --> 00:06:40,940
So what's going to happen is display name is going to get set to null.

92
00:06:41,480 --> 00:06:46,550
But then because what we're going to do is we are going to add the additional information ourselves,

93
00:06:47,300 --> 00:06:54,200
then what will happen is that this is instead going to be passed in like this where we will have a string

94
00:06:54,230 --> 00:06:54,830
ourselves.

95
00:06:55,100 --> 00:06:57,230
So it'll be Mike, for example.

96
00:06:57,650 --> 00:07:03,290
And then this is going to overwrite that null value so that we do actually have a final display name

97
00:07:03,530 --> 00:07:05,330
inside of our user document.

98
00:07:06,230 --> 00:07:15,410
And now what we can do is we can just say that after we get back this user off object, I want to now

99
00:07:15,410 --> 00:07:19,300
call in that method that generates this create user.

100
00:07:20,330 --> 00:07:24,550
So I'm going to say, what is the method name again?

101
00:07:24,560 --> 00:07:26,030
Create user document from off.

102
00:07:28,630 --> 00:07:32,140
And down here, after we get back, I'm going to await.

103
00:07:33,150 --> 00:07:40,800
Create document from off, I'm going to pass it the user off, but I'm also going to pass it this object

104
00:07:41,100 --> 00:07:47,370
with the display name value that we have expected them to fill out inside of their form.

105
00:07:49,930 --> 00:07:55,990
And then after this, if it's succeeded, we'll figure out what to do to confirm to them that they've

106
00:07:55,990 --> 00:07:59,860
successfully signed up, but for now, this is enough for our form field.

107
00:08:00,400 --> 00:08:04,750
The only other thing we need to do is make sure that we clear out the sign up field.

108
00:08:05,350 --> 00:08:07,460
But before we do that, let's just make sure this is working.

109
00:08:07,480 --> 00:08:08,770
Let's take this one step at a time.

110
00:08:09,460 --> 00:08:16,510
So here I have all the same code in, and now I'm going to refresh.

111
00:08:19,190 --> 00:08:20,540
And let's just keep typing.

112
00:08:20,840 --> 00:08:30,590
Mike Mike at gmail.com one two three four one two three four one two three four one two three four.

113
00:08:31,310 --> 00:08:32,600
And if we hit, sign up now.

114
00:08:34,160 --> 00:08:40,580
Oh, we see we get an error, we see that we get the air Firebase Air off email already in use.

115
00:08:41,450 --> 00:08:47,570
So this is actually very helpful because earlier when we logged out the sign up for the first time,

116
00:08:47,930 --> 00:08:54,590
it actually already created a user for us for this email and Firebase won't allow you to make the same

117
00:08:54,860 --> 00:08:56,480
email for multiple users.

118
00:08:56,750 --> 00:09:03,380
So this is really great for us because now what we can do is we can capture this error and we can alert

119
00:09:03,380 --> 00:09:07,040
to the user even more specificity on why the error failed.

120
00:09:07,550 --> 00:09:13,520
So here what we can do is we can actually leverage the error code and this particular error code was

121
00:09:13,520 --> 00:09:16,400
the off email already in use, Erica.

122
00:09:17,000 --> 00:09:19,790
So we can say if error code.

123
00:09:21,640 --> 00:09:23,380
Is equal to this.

124
00:09:25,120 --> 00:09:33,640
Then what we can do is we can cancel or actually let's alert to them instead that they failed because

125
00:09:33,640 --> 00:09:41,080
they have the same email, cannot create user email already in use.

126
00:09:42,090 --> 00:09:43,770
And now if we save this.

127
00:09:45,120 --> 00:09:48,270
And we can do else console.log this error.

128
00:09:50,490 --> 00:09:58,050
And now, if we clear out the console and we sign up again, we see that we get the proper alert.

129
00:09:58,830 --> 00:09:59,550
So this is great.

130
00:10:00,420 --> 00:10:05,310
We've added more functionality in now and there's more ways that we can make this look prettier, but

131
00:10:05,310 --> 00:10:06,420
we'll talk about that after.

132
00:10:07,020 --> 00:10:10,080
For now, what we want to do is we want to properly create this user, though.

133
00:10:10,680 --> 00:10:13,020
So what we can do is we can delete this user.

134
00:10:15,240 --> 00:10:22,140
From our authentication and if we go back now and we try this sign up again, what will happen?

135
00:10:23,910 --> 00:10:25,320
Is now if we come back in here.

136
00:10:26,400 --> 00:10:27,240
Let's refresh.

137
00:10:27,330 --> 00:10:28,320
We didn't get the air.

138
00:10:30,310 --> 00:10:37,180
We see that we have this user and inside of our fire stored database, we see that we have our new user

139
00:10:37,960 --> 00:10:38,320
great.

140
00:10:38,350 --> 00:10:40,180
So everything is working as expected.

141
00:10:40,870 --> 00:10:47,440
The only last thing we need to do is after we successfully actually fire off this successful creation.

142
00:10:47,440 --> 00:10:55,000
We want to clear out these fields and that we can just do by creating a another method called reset

143
00:10:55,090 --> 00:11:02,560
form fields, which is just going to be a function that calls set form fields with our default form

144
00:11:02,560 --> 00:11:04,660
fields, which are the empty states.

145
00:11:05,860 --> 00:11:12,910
And then let's just append this to the end of after we've successfully created the user document from

146
00:11:12,910 --> 00:11:13,300
the off.

147
00:11:14,520 --> 00:11:19,620
And now, if we save this in order to properly do this will have to delete the user again.

148
00:11:20,130 --> 00:11:22,710
So here, let me just go in here.

149
00:11:23,460 --> 00:11:24,990
Let me delete both these users.

150
00:11:25,500 --> 00:11:30,330
So I'm going to delete both the documents as well as the authentication because we're going to have

151
00:11:30,330 --> 00:11:31,740
to go through this step again.

152
00:11:32,670 --> 00:11:34,350
In fact, I could have just created another user.

153
00:11:34,470 --> 00:11:35,700
I don't even know why I'm doing this.

154
00:11:35,940 --> 00:11:38,880
This is really just a bit of hindsight in my end.

155
00:11:39,570 --> 00:11:40,650
But let's refresh.

156
00:11:42,680 --> 00:11:49,580
And let's just make sure that everything works like like gmail.com one two three four one two three

157
00:11:49,580 --> 00:11:52,130
four one two three four one two three four.

158
00:11:52,760 --> 00:11:53,450
Hit the sign up.

159
00:11:54,720 --> 00:12:00,480
We see that our field successfully cleared out, which means that we probably successfully created our

160
00:12:00,480 --> 00:12:07,020
user, so if we refresh, we see our user and inside of our database, we also see that we've generated

161
00:12:07,020 --> 00:12:08,250
the user successfully.

162
00:12:09,450 --> 00:12:10,650
So everything here is working.

163
00:12:11,100 --> 00:12:13,710
So our code is working as we expect.

164
00:12:13,870 --> 00:12:18,600
We've now properly integrated in sign up using this email password.

165
00:12:19,860 --> 00:12:26,190
So now that we have this, let's finish styling up our sign up and then what we can do is we can figure

166
00:12:26,190 --> 00:12:31,560
out whether or not we can successfully sign in with this newly authenticated email password user.

167
00:12:31,800 --> 00:12:32,820
So I'll see you in the next video.
