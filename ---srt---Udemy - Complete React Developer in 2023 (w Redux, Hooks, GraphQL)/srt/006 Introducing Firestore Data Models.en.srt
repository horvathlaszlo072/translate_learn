1
00:00:00,600 --> 00:00:01,740
Welcome back, everyone.

2
00:00:02,340 --> 00:00:09,060
In the last video, we learn about setting up our Google sign in authentication into our application.

3
00:00:10,020 --> 00:00:16,410
However, there's one thing I want to make very clear if you look inside of your authentication tab

4
00:00:16,980 --> 00:00:19,830
here, you'll see your user that you signed in with.

5
00:00:20,640 --> 00:00:26,910
The one thing, though, is that this user list that you'll get whenever you do sign in with these different

6
00:00:26,910 --> 00:00:32,610
authentication services, whether it be Google, sign in or any of these other sign in methods that

7
00:00:32,610 --> 00:00:34,080
are available that you can add.

8
00:00:34,830 --> 00:00:40,230
We earlier added in Google, but you can do Facebook sign in GitHub sign and Twitter sign and email

9
00:00:40,230 --> 00:00:41,130
password signing.

10
00:00:41,700 --> 00:00:47,730
All of these different authentication provider services they all add to your user list inside of the

11
00:00:47,730 --> 00:00:48,750
authentication tab.

12
00:00:49,350 --> 00:00:54,540
But these are not necessarily users that are accessible within your Firestar database.

13
00:00:54,900 --> 00:00:55,920
So this is an important thing.

14
00:00:55,920 --> 00:01:02,700
I want to make clear the authentication service that you have here is a separate service from the Fire

15
00:01:02,700 --> 00:01:03,630
Store database.

16
00:01:04,080 --> 00:01:10,500
Fire Store is the actual database that we're going to be leveraging and inside of Firebase.

17
00:01:10,740 --> 00:01:16,340
This is pretty much like a schema less database, so schema.

18
00:01:16,350 --> 00:01:19,110
This just really means that it's pretty much a JSON object.

19
00:01:19,380 --> 00:01:22,290
You can store whatever fields that are values that you want.

20
00:01:23,250 --> 00:01:30,420
Of course, generally you want this to be more consistent so that your data is consistent across users,

21
00:01:30,930 --> 00:01:36,210
meaning that if you get user one versus user a thousand, you can trust that the shape of the data is

22
00:01:36,210 --> 00:01:38,490
the same, meaning that they have the same fields.

23
00:01:38,490 --> 00:01:43,440
Maybe they have the same first name field and the last name field with whatever the value of those users

24
00:01:43,440 --> 00:01:43,890
will be.

25
00:01:44,220 --> 00:01:45,900
But you want that consistency.

26
00:01:46,820 --> 00:01:52,670
Here, look inside and you'll notice that even though we've authenticated our user, we actually don't

27
00:01:52,670 --> 00:01:55,730
have any users inside of our fire store.

28
00:01:56,480 --> 00:02:02,360
So what we're going to do now is we are going to make sure that whenever a user authenticates, we also

29
00:02:02,360 --> 00:02:06,500
create a record of them inside of Firestorm.

30
00:02:07,400 --> 00:02:12,440
So now we're going to start actually storing that user's information inside of our database.

31
00:02:12,770 --> 00:02:14,930
So we're going to start working with fire stored database.

32
00:02:15,910 --> 00:02:20,560
Now, before we start working with us, there's a couple of things we need to understand about Firestorm

33
00:02:21,220 --> 00:02:26,740
that's got kind of an interesting structure, and it takes a little bit of time to get used to the way

34
00:02:26,740 --> 00:02:27,430
to work with it.

35
00:02:27,850 --> 00:02:29,320
But we're going to walk through that in this video.

36
00:02:29,620 --> 00:02:31,960
So first, I got to show you a slideshow.

37
00:02:32,950 --> 00:02:35,500
So let's talk about fire based data model.

38
00:02:36,480 --> 00:02:40,620
Inside, Firestorm is really comprising data of three things.

39
00:02:40,860 --> 00:02:46,980
There is the collection, there is the document, and then there's the data.

40
00:02:47,550 --> 00:02:54,270
So this visual is very good because it's kind of like looking about a folder inside a folder.

41
00:02:54,270 --> 00:02:57,360
You might have multiple documents on each document.

42
00:02:57,360 --> 00:03:01,050
The data related to that document is what's written on that document.

43
00:03:01,860 --> 00:03:08,790
So you can imagine that if we had a collection of users, we would make a separate folder with users

44
00:03:08,790 --> 00:03:15,090
on it so that we know that inside of that folder, it's all of our data related to every instance of

45
00:03:15,090 --> 00:03:17,610
user that is inside of our database.

46
00:03:18,700 --> 00:03:25,390
Each separate document represents a individual piece of data, so an independent user.

47
00:03:26,050 --> 00:03:29,860
Now the actual information relates that user is going to be the data.

48
00:03:30,100 --> 00:03:31,000
So let's walk through this.

49
00:03:32,190 --> 00:03:33,720
Let's talk about the document model first.

50
00:03:34,500 --> 00:03:38,880
The document model is really the smallest units inside a firestorm.

51
00:03:39,660 --> 00:03:45,060
So here imagine we had a shoe because we are crown clothing, meaning that we sell clothing.

52
00:03:45,360 --> 00:03:53,400
So imagine that we had some unique I.D. for this specific shoe document and its Nike Air Max.

53
00:03:53,430 --> 00:03:54,510
It's just a unique strength.

54
00:03:55,780 --> 00:04:02,770
This Nike Air Max inside, we'll have data that tells you what the information regarding the shoe will

55
00:04:02,770 --> 00:04:03,040
be.

56
00:04:03,520 --> 00:04:05,950
So the name will be Air Max as a string.

57
00:04:06,220 --> 00:04:08,980
The brand is Nike and then the image URL.

58
00:04:08,980 --> 00:04:11,680
Imagine that points to some URL of the actual image.

59
00:04:12,340 --> 00:04:13,750
This is a data shape.

60
00:04:14,260 --> 00:04:19,300
This is a JSON object that kind of holds the information that is relevant to shoes.

61
00:04:20,430 --> 00:04:28,130
Now, if you look inside of this model, maybe sometimes so far, some of these fields may be nested,

62
00:04:28,140 --> 00:04:31,290
so cost might actually be another JSON object.

63
00:04:32,070 --> 00:04:36,840
So far, what we saw with name, brand and image URL, it's a single level meaning that it just points

64
00:04:36,840 --> 00:04:39,870
to one value in this case being strings.

65
00:04:40,350 --> 00:04:48,300
Whereas cost here is perhaps a JSON object that has two fields on it a price which might be a number

66
00:04:48,600 --> 00:04:50,880
and then the currency that this price is in.

67
00:04:50,880 --> 00:04:52,380
So USD, which is a string.

68
00:04:52,890 --> 00:04:58,560
So this is something interesting that you want to know about documents is that they're pretty much JSON

69
00:04:58,560 --> 00:05:04,650
objects, but this is really just the majority of how our individual pieces of data is going to get

70
00:05:04,650 --> 00:05:05,130
stored.

71
00:05:05,940 --> 00:05:12,390
So if you were to look at the model Nike Air Max here, that unique string with no spaces, that would

72
00:05:12,390 --> 00:05:15,300
be the name of this document or the idea of this document.

73
00:05:15,960 --> 00:05:19,980
Whereas down here, all of this information inside one, that's the data.

74
00:05:19,980 --> 00:05:23,970
So I'm matching the grey to the data and then the blue to the document.

75
00:05:24,690 --> 00:05:29,760
So that's one thing that you want to know about when you want to access the information related to a

76
00:05:29,760 --> 00:05:30,300
document.

77
00:05:30,540 --> 00:05:34,170
Remember that what you're trying to get is the data for that document.

78
00:05:35,130 --> 00:05:38,760
Now, let's talk about collections, so we know we're talking about shoes.

79
00:05:39,180 --> 00:05:43,380
So here, imagine that we had a shoes collection inside of that shoes, a collection.

80
00:05:43,560 --> 00:05:51,030
We might have our Nike Air Max example, which is just a document of a shoe living inside our shoes

81
00:05:51,030 --> 00:05:51,540
collection.

82
00:05:52,260 --> 00:05:58,740
But then we might also have Adidas NMD, which is another document that's for another specific shoe.

83
00:05:58,920 --> 00:06:01,440
And you'll notice that the shape again looks very similar.

84
00:06:01,680 --> 00:06:07,980
They all have name, brand, image, URL and cost, which is an object that points to price and currency.

85
00:06:08,670 --> 00:06:12,420
So you'll see here that the structure is the same, but the values are different.

86
00:06:12,750 --> 00:06:18,450
And that's because, again, shoes is the collection Nike Air Max and Adidas NMD.

87
00:06:18,450 --> 00:06:23,250
Those are unique strings that represent the idea of these individual separate documents.

88
00:06:24,030 --> 00:06:28,350
And then the values inside is the data respective for those documents.

89
00:06:29,160 --> 00:06:35,130
So any data that we're going to store in Firebase is going to generally fit inside this model of collections,

90
00:06:35,310 --> 00:06:37,620
documents and then their respective data.

91
00:06:38,010 --> 00:06:43,890
So now that we have a rough High-Level idea of these, let's actually start implementing and working

92
00:06:43,890 --> 00:06:46,530
with Firestar, store our database with these in mind.

93
00:06:46,830 --> 00:06:48,780
So I'll see you in the next video where we'll start doing that.
