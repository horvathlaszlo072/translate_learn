1
00:00:00,420 --> 00:00:01,260
Welcome back, everyone.

2
00:00:02,260 --> 00:00:05,650
In this video, we are going to discuss the use callback hook further.

3
00:00:06,280 --> 00:00:10,090
In order for us to do that, we're going to have to modify this a little bit.

4
00:00:11,380 --> 00:00:15,520
So in order for us to modify this component, I want to duplicate this button.

5
00:00:15,760 --> 00:00:20,800
And what I'm going to do is I'm just going to say that this button has the text update.

6
00:00:22,020 --> 00:00:29,820
What happens here is that we know our component will essentially rerun and render every time items updates.

7
00:00:30,180 --> 00:00:34,620
So we're going to rely on that in order to make sure that we understand when our functional component

8
00:00:34,920 --> 00:00:36,150
is being rerun.

9
00:00:37,350 --> 00:00:39,090
Inside of go to check out handler.

10
00:00:39,120 --> 00:00:40,320
I'm going to change this function.

11
00:00:40,530 --> 00:00:46,710
And what I'm going to do is I want to log out some value that we store inside of you state.

12
00:00:47,680 --> 00:00:51,670
So I'm going to bring in the U.S. and I'm just going to call this temp value.

13
00:00:54,530 --> 00:00:57,050
And I'm going to initialize it with the value a.

14
00:00:58,840 --> 00:01:02,680
What I'm going to do inside of this callback is just console.log the temp value.

15
00:01:03,490 --> 00:01:10,510
And then what I'm going to do on this button is that whenever you click this button, I'm going to set

16
00:01:10,510 --> 00:01:11,620
temp to be.

17
00:01:12,820 --> 00:01:14,380
And that's all I'm going to do.

18
00:01:15,960 --> 00:01:17,040
Now what's going to happen?

19
00:01:18,150 --> 00:01:19,350
Well, let's save our coat.

20
00:01:20,310 --> 00:01:21,840
And let's come back to our application.

21
00:01:23,170 --> 00:01:24,220
Here's an application.

22
00:01:25,000 --> 00:01:27,040
What I want to do is click, go to checkout.

23
00:01:27,610 --> 00:01:30,850
As we know, we are console logging out our temp value.

24
00:01:32,440 --> 00:01:32,950
Here.

25
00:01:32,950 --> 00:01:37,000
What's going to happen is that when I run this function.

26
00:01:38,160 --> 00:01:39,900
And add a bunch of items.

27
00:01:40,320 --> 00:01:46,350
What's happening again is that our application is re rendering, not our application, but our component.

28
00:01:47,330 --> 00:01:50,540
Go to check out what's still log a nothing change there.

29
00:01:51,450 --> 00:01:52,710
If I hit update, though.

30
00:01:53,710 --> 00:02:00,430
Now I know that temp has been updated to beat, but every time I click go to checkout it's still logging

31
00:02:00,460 --> 00:02:00,850
a.

32
00:02:01,570 --> 00:02:07,990
And the reason for this, despite all of these changes, is because the function is memorized, meaning

33
00:02:07,990 --> 00:02:15,610
that the scope of all of the values inside of this function are all being kept and memorized.

34
00:02:15,910 --> 00:02:20,740
React doesn't know that it needs to update this because temp on the outside has changed.

35
00:02:21,310 --> 00:02:26,770
Even though we called Septem, a React has re rendered this component every time in the re render cycle.

36
00:02:26,770 --> 00:02:33,070
It sees this call and it says, Oh, this is a memoirs callback because it used the use callback hook.

37
00:02:33,460 --> 00:02:36,100
I don't need to re initialize this function ever.

38
00:02:37,000 --> 00:02:41,530
The only way that that can happen is when you add that to the dependency array.

39
00:02:42,130 --> 00:02:46,690
Now if we save this and when we come back to the application, if we refresh.

40
00:02:49,810 --> 00:02:51,880
Now on initialization.

41
00:02:52,420 --> 00:02:57,670
When I click the go to checkout, I get a when I click update and then I click go to checkout.

42
00:02:57,970 --> 00:02:59,710
Now notice that it says be.

43
00:03:00,680 --> 00:03:06,260
So this is an important error that you want to understand about your dependency array with use callback.

44
00:03:07,230 --> 00:03:13,140
If you anticipate anything inside of this function that it needs to rely on in order to run the purpose

45
00:03:13,140 --> 00:03:18,690
of this actual function, make sure you include it inside of your dependency array, because if you

46
00:03:18,690 --> 00:03:22,020
don't, then react simply, just memorizes the value.

47
00:03:22,620 --> 00:03:25,050
And that is how this you'd call that works.

48
00:03:25,230 --> 00:03:29,700
I hope now through this example, you get a better idea of what it is that's actually happening under

49
00:03:29,700 --> 00:03:32,250
the hood with this use callback hook.

50
00:03:32,850 --> 00:03:36,140
So now let's just revert our code back and now we've got idea.

51
00:03:36,150 --> 00:03:41,640
At the very least, you can now go through your application and you can wrap these inside of a use callback

52
00:03:41,640 --> 00:03:46,560
if you want to, just to see and just to work with it to understand how to add things to the dependency

53
00:03:46,560 --> 00:03:48,360
array and get your code to work consistently.

54
00:03:48,870 --> 00:03:49,920
But it's very straightforward.

55
00:03:49,930 --> 00:03:54,780
The main idea is that you're memorizing the function, not the output of the function, but the function.

56
00:03:55,860 --> 00:03:56,340
So that's it.

57
00:03:56,730 --> 00:03:59,160
Now that we get that, let's move on to the next video.
