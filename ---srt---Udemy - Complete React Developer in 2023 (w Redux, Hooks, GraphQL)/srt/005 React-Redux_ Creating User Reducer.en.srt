1
00:00:00,530 --> 00:00:01,460
Welcome back, everyone.

2
00:00:02,400 --> 00:00:08,550
So in the last video we generated our store and we're also now passing it into this provider that we

3
00:00:08,550 --> 00:00:09,870
use to wrap our application.

4
00:00:10,170 --> 00:00:14,880
This provider, of course, we get from React Redux, which behaves just like the providers that we

5
00:00:14,910 --> 00:00:15,810
have used so far.

6
00:00:16,590 --> 00:00:22,290
Speaking of providers, what we need to do is we need to now figure out how to replace our user provider

7
00:00:22,590 --> 00:00:27,870
utilizing the reducer that now lives inside of our root reducer in Redux.

8
00:00:28,910 --> 00:00:30,120
So it's going to be very similar.

9
00:00:30,140 --> 00:00:34,040
We know that there's a dispatch and we know that we need to get the current user object.

10
00:00:34,370 --> 00:00:39,380
It's just that now, instead of coming from use reducer, it comes from two different hooks inside of

11
00:00:39,380 --> 00:00:40,100
React Redux.

12
00:00:40,790 --> 00:00:46,790
First and foremost, we are no longer using a user provider, which means we need to get this value

13
00:00:46,790 --> 00:00:50,840
somehow from our actual application in another way.

14
00:00:51,350 --> 00:00:57,380
The main thing is that currently inside of our user provider, we actually fire off this user effect

15
00:00:57,380 --> 00:01:04,760
which subscribes to our on auth state change listener depending on this is how we actually update using

16
00:01:04,760 --> 00:01:07,730
effects to get this actual value we need.

17
00:01:08,360 --> 00:01:09,260
So how do we do this?

18
00:01:09,830 --> 00:01:12,500
Well, we actually want to move this into our app.

19
00:01:12,510 --> 00:01:15,530
JS Because prior, when you think about the index.

20
00:01:15,530 --> 00:01:19,150
JS The first thing that mounts is actually the user provider.

21
00:01:19,190 --> 00:01:22,340
So the moment the user provider mounts, it fires off the effect.

22
00:01:22,670 --> 00:01:25,150
We no longer are relying on this provider anymore.

23
00:01:25,160 --> 00:01:31,190
In fact, we might as well just remove it so that we can be very clear that this is no longer something

24
00:01:31,190 --> 00:01:32,090
that we're using.

25
00:01:35,190 --> 00:01:41,040
What we're going to do is we are instead going to rely on the part of our application that mounts first

26
00:01:41,040 --> 00:01:43,260
that cares about the user.

27
00:01:43,740 --> 00:01:46,590
In fact, the entire application, we need to make sure that we have our user.

28
00:01:46,590 --> 00:01:48,630
It's a very top level thing that matters.

29
00:01:49,110 --> 00:01:54,480
So what we're going to do is we're going to paste in that use effect code that we had from our user

30
00:01:54,480 --> 00:01:55,050
context.

31
00:01:55,830 --> 00:01:59,190
We also need to make sure we bring in all these dependencies that we need.

32
00:01:59,670 --> 00:02:01,920
So we know that we need use effect.

33
00:02:02,130 --> 00:02:05,490
We also know that we need all of these different libraries.

34
00:02:06,000 --> 00:02:10,980
So actually, let me just copy this over because chances are we're going to need a lot of it.

35
00:02:11,930 --> 00:02:13,700
So I'm just going to copy this over.

36
00:02:14,240 --> 00:02:19,670
I'm going to move this down to where we have our own internal imports.

37
00:02:20,120 --> 00:02:24,020
And then I just want to make sure whether or not these are actually pointing to the correct thing.

38
00:02:24,770 --> 00:02:31,130
So here, I believe that we need to reduce this relative root because essentially we're at the root

39
00:02:31,130 --> 00:02:34,730
folder and now we're pointing to the correct files.

40
00:02:35,680 --> 00:02:43,600
So we need access also to this set current user value that we had before inside of our user context.

41
00:02:45,480 --> 00:02:48,120
This is the last thing that seemingly has not been imported.

42
00:02:48,960 --> 00:02:53,700
So let me also get rid of this use reducer and this create context.

43
00:02:55,260 --> 00:02:59,750
So what is the current user inside of user context set?

44
00:02:59,780 --> 00:03:09,420
Current user is this action creator function that we made that dispatches an action inside of our provider.

45
00:03:10,380 --> 00:03:18,180
So now we still want this action creator, but because this is getting called in abg's, we don't want

46
00:03:18,180 --> 00:03:21,270
to localise this selector inside of Abg's.

47
00:03:21,270 --> 00:03:27,780
Instead, we want it to be potentially available to anyone that wants to set current user, even though

48
00:03:27,780 --> 00:03:29,580
we only use it inside of us.

49
00:03:29,640 --> 00:03:31,590
That doesn't mean that will always be the case.

50
00:03:32,250 --> 00:03:37,980
So this is where we're going to make a new file inside of our store user folder called User dot Action

51
00:03:37,990 --> 00:03:38,760
Docs.

52
00:03:39,510 --> 00:03:46,560
And what this action is going to be is pretty much the exact same thing as this action creator right

53
00:03:46,560 --> 00:03:46,860
here.

54
00:03:47,810 --> 00:03:53,780
So let's actually copy this over like so it's current user is a function, it receives the user and

55
00:03:53,780 --> 00:04:02,090
what it will do is instead of dispatching here, it's just going to create and return us back to the

56
00:04:02,090 --> 00:04:03,260
action object.

57
00:04:04,580 --> 00:04:09,350
So the action object is generated using our create action helper function.

58
00:04:09,800 --> 00:04:11,420
So let's first import that in.

59
00:04:20,320 --> 00:04:23,080
The other thing is we need our user action types.

60
00:04:23,680 --> 00:04:27,700
So this user action types is living currently in our user reducer.

61
00:04:28,270 --> 00:04:35,320
So what I like to do is move this up into its own file, again called user archetype such as.

62
00:04:36,070 --> 00:04:40,030
And here this will be an export by doing this.

63
00:04:40,030 --> 00:04:46,600
Now it's at the root folder level of this user because inside is where it's primarily getting called.

64
00:04:46,990 --> 00:04:50,860
So I want this to be shared between all of the files in this folder.

65
00:04:52,100 --> 00:04:56,360
And it's very clear what lives inside this, which is everything related to our types.

66
00:04:57,020 --> 00:05:03,800
Because sometimes as you add more actions and you add more kosher reducer, this grows to a point where

67
00:05:03,800 --> 00:05:05,240
it becomes really hard to read.

68
00:05:05,630 --> 00:05:08,060
So we might as well do a lot of the separation.

69
00:05:08,570 --> 00:05:14,870
These are just scalable techniques that we've learned throughout the years of building scalable React

70
00:05:14,870 --> 00:05:16,370
applications using Redux.

71
00:05:17,300 --> 00:05:17,930
So this is it.

72
00:05:18,500 --> 00:05:24,350
We also need to export out this action creator and now that current user is pretty much the exact same

73
00:05:24,350 --> 00:05:24,890
as you see.

74
00:05:25,280 --> 00:05:26,990
It's just now redux ified.

75
00:05:27,290 --> 00:05:29,750
So it's just a function that receives a user object.

76
00:05:29,750 --> 00:05:37,580
And then what it will do is it will create and return back a object where the type is this user action

77
00:05:37,580 --> 00:05:40,880
string and then the value is the user for payload.

78
00:05:42,290 --> 00:05:45,050
So now that we have this, let's go back to our ABCs.

79
00:05:46,560 --> 00:05:49,350
So that we can bring this in for that current user call.

80
00:05:50,100 --> 00:05:55,530
So here I also want to get rid of this create action because the action is getting generated inside

81
00:05:55,530 --> 00:05:57,030
of our action creator now.

82
00:05:58,130 --> 00:06:03,230
So first, what I'm going to do is I'm going to import in this set current user.

83
00:06:04,110 --> 00:06:04,560
From.

84
00:06:06,330 --> 00:06:12,900
Our store folder, our user folder, and then our user action creator.

85
00:06:13,320 --> 00:06:14,490
Now, here's another thing.

86
00:06:15,520 --> 00:06:19,960
As we know, our user set current user is no longer dispatching.

87
00:06:20,860 --> 00:06:25,210
This is now just creating an object for us, which is our action object.

88
00:06:25,420 --> 00:06:27,550
We actually still need to dispatch this.

89
00:06:27,880 --> 00:06:33,460
And to do that we need to bring in dispatch from use dispatch hook.

90
00:06:34,270 --> 00:06:40,030
Now this use dispatch hook is what we get back from React Redux.

91
00:06:40,870 --> 00:06:46,660
As I mentioned, React Redux is the library that gives us React bindings, which are hooks really that

92
00:06:46,660 --> 00:06:48,610
allow us to interact with the Redux store.

93
00:06:49,420 --> 00:06:52,570
So we can say, Hey, content dispatch is going to be the method.

94
00:06:52,570 --> 00:06:54,850
We get back from the use dispatch up.

95
00:06:55,180 --> 00:07:00,280
And this dispatch works exactly the same way as our user context dispatch.

96
00:07:00,610 --> 00:07:06,730
But as I mentioned, this dispatch dispatches actions to the root reducer, which in turn passes the

97
00:07:06,730 --> 00:07:09,460
action to every single reducer function.

98
00:07:10,270 --> 00:07:14,170
So here there's only one dispatch from React Redux.

99
00:07:14,350 --> 00:07:15,850
There's only ever one instance of it.

100
00:07:16,480 --> 00:07:20,860
In fact, if you have over this warning here, you'll see that there's a missing dependency for dispatch.

101
00:07:21,310 --> 00:07:25,910
The thing is that dispatch here coming from used dispatch never updates.

102
00:07:25,930 --> 00:07:27,880
It's always going to be the same reference.

103
00:07:28,270 --> 00:07:30,490
So here, really, dispatch will never change.

104
00:07:30,700 --> 00:07:33,290
You don't have to pass it if you don't want to.

105
00:07:33,310 --> 00:07:36,640
But if you want the lint error to go away, you can pass it as well.

106
00:07:37,000 --> 00:07:41,740
The reason why this complains is because React does not know that this dependency that it's getting

107
00:07:41,740 --> 00:07:44,470
from a hook, this dispatch doesn't change.

108
00:07:44,800 --> 00:07:49,780
We know this because we know that the way that React Redux works is that it only generates one dispatch

109
00:07:49,780 --> 00:07:51,610
for us, and it will never change that reference.

110
00:07:52,060 --> 00:07:56,980
But because the hook doesn't know, it's going to complain and send you a warning because we are using

111
00:07:56,980 --> 00:07:57,940
this dispatch inside.

112
00:07:59,060 --> 00:08:00,440
This is just one of those things.

113
00:08:00,590 --> 00:08:05,840
It varies honestly from teams to team, whether or not they add or not, because this kind of is misguided

114
00:08:05,840 --> 00:08:06,560
in some way.

115
00:08:06,920 --> 00:08:12,890
This implies that this effect will rerun every single time that this dispatch changes.

116
00:08:13,520 --> 00:08:15,800
But in reality, this dispatch is not going to change.

117
00:08:15,860 --> 00:08:17,690
You can see where this confusion might lie.

118
00:08:17,930 --> 00:08:18,740
So it's really up to you.

119
00:08:19,160 --> 00:08:22,310
Personally, I like to get rid of it because I know for sure.

120
00:08:22,310 --> 00:08:27,410
Anyways, this effect is only running on initialization in order to set up this listener anyways.

121
00:08:28,100 --> 00:08:29,750
So we can just set it up like this.

122
00:08:30,050 --> 00:08:33,140
Some of these warnings you really do need to use your own judgment.

123
00:08:33,290 --> 00:08:39,200
Unfortunately, the listing is a little aggressive and this is a very contentious topic.

124
00:08:39,410 --> 00:08:42,020
But that's another conversation for now.

125
00:08:42,380 --> 00:08:43,880
What we have is set up our code.

126
00:08:44,360 --> 00:08:46,310
So let's go back to our application and see what happens.

127
00:08:47,580 --> 00:08:50,280
Here we see these new locks.

128
00:08:50,850 --> 00:08:52,500
These laws are what I was talking about.

129
00:08:52,770 --> 00:08:56,500
Essentially, this is what tells us the previous state and the current state.

130
00:08:56,820 --> 00:08:58,620
So let me just refresh so we can see a live.

131
00:09:00,480 --> 00:09:07,080
So we see one action via this action virus when our code initializes.

132
00:09:07,620 --> 00:09:09,840
And then we see that this is our initial state.

133
00:09:10,110 --> 00:09:11,340
Current user equals null.

134
00:09:11,550 --> 00:09:14,250
We remember this inside of our new user reducer.

135
00:09:14,250 --> 00:09:16,110
Where state is the default state?

136
00:09:16,110 --> 00:09:16,740
The initial state.

137
00:09:17,840 --> 00:09:22,910
Then what happens is that because our author, listener, we're already signed in for our application.

138
00:09:23,570 --> 00:09:27,590
Our author listener is aware, oh, let me get that user.

139
00:09:27,800 --> 00:09:30,110
And then what happens is our code triggers.

140
00:09:30,560 --> 00:09:34,130
So it fires that new action that we dispatch the set current user.

141
00:09:34,730 --> 00:09:38,900
And what happens here, you'll see that there's the type set current user, but there's also this payload.

142
00:09:39,650 --> 00:09:42,350
So here, all of this is working.

143
00:09:43,130 --> 00:09:48,920
And then in the next day, of course, our user reducer is going to respond and it's going to update

144
00:09:48,920 --> 00:09:52,940
current user with that new user object that we got as the payload.

145
00:09:53,900 --> 00:09:58,070
So this is really handy because every time an action fires, you see what was the previous state?

146
00:09:58,250 --> 00:10:01,610
What's the next state of the entire Redux state?

147
00:10:02,090 --> 00:10:03,460
Right now we'll have one reducers.

148
00:10:03,470 --> 00:10:08,180
You only see the one value, but as the scales you will see all of your state.

149
00:10:08,660 --> 00:10:14,210
So again, you have one centralized state rather than multiple contexts that have different reducers

150
00:10:14,510 --> 00:10:14,930
here.

151
00:10:15,050 --> 00:10:18,410
It's all in one location now, and this is the redux flow.

152
00:10:19,360 --> 00:10:25,480
So now that we understand how to create and dispatch actions in the next video, what we are going to

153
00:10:25,480 --> 00:10:31,630
do is learn how to actually pull these values off state and then use them in our application.

154
00:10:32,260 --> 00:10:33,310
I'll see you in the next video.
