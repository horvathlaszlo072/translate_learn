1
00:00:00,090 --> 00:00:00,990
Welcome back, everyone.

2
00:00:01,500 --> 00:00:08,640
In this video, let's improve upon this add to car item functionality that allows us to take in a array

3
00:00:08,640 --> 00:00:15,390
of cart items, which, as we discussed, is just a product with an additional quantity field, as well

4
00:00:15,390 --> 00:00:20,670
as some product object that we're trying to add into this cart items array.

5
00:00:21,660 --> 00:00:28,080
So as I mentioned, what we need to do is find the car item to see if there is one that matches inside

6
00:00:28,200 --> 00:00:33,390
based on the product that we're trying to add, and if it exists, then we increase the quantity.

7
00:00:33,870 --> 00:00:39,900
Otherwise, we just return back a array with the modified car items or a new car item.

8
00:00:40,470 --> 00:00:45,930
So because we haven't really tinkered around with cart items, let's just imagine from the empty case,

9
00:00:46,440 --> 00:00:48,120
we have a completely empty cart.

10
00:00:48,360 --> 00:00:50,340
We're adding a product for the first time.

11
00:00:50,640 --> 00:00:57,390
What we want to end up with is a cart with the object that has all of the fields from our product to

12
00:00:57,390 --> 00:01:02,550
add, but also an additional quantity field that is equal to one.

13
00:01:02,850 --> 00:01:08,010
Because what we're saying is that, hey, I'm essentially creating a new cart item, all of the same

14
00:01:08,010 --> 00:01:11,430
fields as product to add, except there's a quantity of one so far.

15
00:01:12,060 --> 00:01:13,480
So that's what we want to end up with.

16
00:01:13,500 --> 00:01:14,580
So let's talk about this.

17
00:01:15,240 --> 00:01:24,420
What we want to do is we want to say, OK, if this cart doesn't have an existing car item with the

18
00:01:24,420 --> 00:01:32,580
same ID as product, and then we know for sure it is a new product, but we want all the existing car

19
00:01:32,580 --> 00:01:34,210
items as well that are in here.

20
00:01:34,260 --> 00:01:36,450
It just means that we have a new cart item to make.

21
00:01:36,660 --> 00:01:41,820
So what we'll do is we'll create a new array and we'll spread through all of the existing cart items

22
00:01:41,820 --> 00:01:42,330
that we have.

23
00:01:42,960 --> 00:01:50,070
But what we're going to add as an additional is we are going to say, OK, I know for sure I need a

24
00:01:50,070 --> 00:01:56,190
new product to add, except we're also going to add this quantity of one.

25
00:01:56,520 --> 00:01:57,030
That's it.

26
00:01:57,510 --> 00:01:58,530
This is all we're saying.

27
00:01:59,220 --> 00:02:04,800
So whether or not cart items has anything in it or has other stuff, we're already saying that by the

28
00:02:04,800 --> 00:02:10,390
time we make it to this line, we know for sure that all of these cart items don't match the product

29
00:02:10,390 --> 00:02:10,860
to add.

30
00:02:11,220 --> 00:02:15,270
So I want to make a new car item, which is just all the fields of product to add.

31
00:02:15,540 --> 00:02:17,790
But with an additional quantity field of one.

32
00:02:19,480 --> 00:02:23,110
So this handles the case where it's a new product.

33
00:02:23,470 --> 00:02:25,510
But what about finding an existing product?

34
00:02:25,540 --> 00:02:26,350
How do we do that?

35
00:02:26,980 --> 00:02:33,550
So here's what I'm going to say is that Konst existing cart item is equal to a searching through the

36
00:02:33,910 --> 00:02:39,280
items array using the Find method, which is very similar to Dot Map.

37
00:02:39,790 --> 00:02:44,270
What you do to find is you pass it some callback.

38
00:02:44,860 --> 00:02:49,480
And in this callback, it receives each element inside of the array.

39
00:02:49,490 --> 00:02:51,190
So we're going to get each car item.

40
00:02:52,030 --> 00:02:59,050
Then what happens is that we're expected to return a Boolean value, and if this Boolean value is true,

41
00:02:59,410 --> 00:03:05,380
then this method will exit, giving you back the cart item that returned the true Boolean based on the

42
00:03:05,380 --> 00:03:05,860
callback.

43
00:03:06,340 --> 00:03:11,470
So what we want to say is that only return us back true and return us back to the car item.

44
00:03:12,010 --> 00:03:19,570
If this specific car item has an I.D. value that's equal to the product to adds ID value.

45
00:03:20,140 --> 00:03:27,190
So here that's how we're able to track whether or not the cart item matches one that we're trying to

46
00:03:27,190 --> 00:03:30,250
add because they'll be the exact same product.

47
00:03:30,700 --> 00:03:35,770
The only thing is that we just added additional quantity, but the I.D. values are going to be the same.

48
00:03:36,340 --> 00:03:37,450
So that's what we're going off them.

49
00:03:38,070 --> 00:03:46,570
Now, if this existing car item has been found, then what we're going to do is we want to return from

50
00:03:46,570 --> 00:03:49,300
this method, meaning that we don't want to make it here.

51
00:03:49,600 --> 00:03:54,550
We want to modify the existing cart items, but we still want to return back a new array because we

52
00:03:54,550 --> 00:03:56,020
don't want to mutate our code.

53
00:03:56,410 --> 00:03:58,720
Remember, with our code, we don't do mutations.

54
00:03:58,720 --> 00:04:05,020
We always return a new array with new objects or only a new object if the field is different, meaning

55
00:04:05,020 --> 00:04:08,380
the quantity is incremented so that only then do we return a new item.

56
00:04:08,650 --> 00:04:10,090
Otherwise, we keep the old one.

57
00:04:10,600 --> 00:04:15,160
So here what we're going to say is that we return items that map.

58
00:04:15,430 --> 00:04:17,290
So we're mapping through the cart items.

59
00:04:18,430 --> 00:04:22,450
And what we're going to do is take the car item and we're going to say, OK.

60
00:04:23,410 --> 00:04:29,480
In this particular case, again, we need to match, does the car item I.D., is it equal?

61
00:04:29,570 --> 00:04:31,210
So the product adds ID.

62
00:04:33,030 --> 00:04:41,820
If it is, then what we do, so meaning that there's a match is we want to return a new car item object.

63
00:04:42,090 --> 00:04:48,990
So let's spread through all of the values on this card item, except the quantity value is going to

64
00:04:48,990 --> 00:04:51,090
be the item quantity.

65
00:04:52,610 --> 00:04:53,300
Plus one.

66
00:04:55,100 --> 00:04:59,840
If this is not the case, then just return back the original item.

67
00:05:01,290 --> 00:05:05,820
So let's walk through this logic, because this part is a little bit convoluted, so we're saying,

68
00:05:05,820 --> 00:05:08,780
OK, let's say we found a match in our car items.

69
00:05:08,790 --> 00:05:12,690
If we do, then we want to return a new array of card items.

70
00:05:13,290 --> 00:05:18,930
And here we're just saying, Hey, is this car item the same one that we're trying to add if it is returned

71
00:05:18,930 --> 00:05:20,310
a new card item?

72
00:05:20,370 --> 00:05:25,800
This means that we're doing a brand new object, but we're spreading through all of the old properties

73
00:05:25,800 --> 00:05:28,430
of that card item, except now the quantity.

74
00:05:28,440 --> 00:05:30,450
We're just adding one to that quantity.

75
00:05:31,290 --> 00:05:37,020
If this doesn't match meaning that it's an item that is not related to our product to add, then just

76
00:05:37,020 --> 00:05:38,010
return the car item.

77
00:05:38,010 --> 00:05:39,300
We don't really care to improve it.

78
00:05:39,900 --> 00:05:42,210
That is what this function does.

79
00:05:43,050 --> 00:05:50,010
So this function now will allow us to essentially add new products in and keep track of the quantity

80
00:05:50,010 --> 00:05:50,700
appropriately.

81
00:05:51,120 --> 00:05:56,490
And because we're calling it whenever we call this add item to cart method with the product that we're

82
00:05:56,490 --> 00:05:58,170
trying to add into our car items.

83
00:05:58,620 --> 00:06:04,020
This will then give us back the appropriate array that we want to update for our cart items.

84
00:06:04,620 --> 00:06:10,080
And now I just want to add this to our value because that's what we want exposed in the context.

85
00:06:10,530 --> 00:06:13,590
And we're also going to expose cart items as well.

86
00:06:14,340 --> 00:06:20,460
So now with this in mind, we can go back to our cart dropdown and we can use this context.

87
00:06:20,940 --> 00:06:29,190
I'm going to import in the use context hook from React, and I'm also going to import in the actual

88
00:06:29,700 --> 00:06:30,570
cart context.

89
00:06:30,690 --> 00:06:31,800
So I'm going to import.

90
00:06:33,010 --> 00:06:34,300
Cart context.

91
00:06:36,000 --> 00:06:36,990
From car context.

92
00:06:38,170 --> 00:06:41,770
And then what I'm going to do is I'm going to pull off this value now.

93
00:06:42,010 --> 00:06:48,460
So before we were just mapping over that empty array, now we want a map over our contexts.

94
00:06:49,450 --> 00:06:53,980
So our car items equals use context, passing in car context.

95
00:06:54,640 --> 00:06:57,670
And here now I want to map over.

96
00:06:58,630 --> 00:06:59,260
Car items.

97
00:07:02,190 --> 00:07:11,580
I also want to make sure that we add the key, so Item I.D. also is allowing react to properly map these

98
00:07:11,580 --> 00:07:12,240
key values.

99
00:07:13,410 --> 00:07:19,140
Now that we have our cart, what we need to do is make sure that we also are able to add these products.

100
00:07:19,470 --> 00:07:23,430
So let's go to our shop page, not actually our shop page.

101
00:07:23,460 --> 00:07:25,200
We need to go into our product cart component.

102
00:07:26,510 --> 00:07:31,580
Inside of product card, whenever we click this button is where we add that product to our cart.

103
00:07:32,150 --> 00:07:36,350
So let's once again import in used context from React.

104
00:07:37,010 --> 00:07:40,850
And we also need to import in the correct components.

105
00:07:41,810 --> 00:07:47,360
So here let's import in our context now component, but the actual cart context.

106
00:07:57,270 --> 00:07:57,750
There we go.

107
00:07:58,530 --> 00:08:07,230
So now that I have context, I want to use it, and the way to use it is we need to get the ad item

108
00:08:07,230 --> 00:08:08,610
to cart method.

109
00:08:09,240 --> 00:08:13,200
So I'm going to say use context passing in the car context.

110
00:08:16,370 --> 00:08:17,180
Add items to cart.

111
00:08:18,320 --> 00:08:24,980
And then whenever this button gets clicked, I'm going to call add item to cart as a function.

112
00:08:25,930 --> 00:08:28,000
Except I'm passing the product through.

113
00:08:29,030 --> 00:08:35,080
So let's actually make this a function defined up inside of our function definition.

114
00:08:36,150 --> 00:08:40,920
Like so and I'm going to call this one ad product to cart.

115
00:08:47,880 --> 00:08:50,040
And then I'm just going to pass this through here.

116
00:08:51,090 --> 00:08:56,820
Now, you might be wondering, why do we define this function up here instead of inside of the definition?

117
00:08:57,510 --> 00:09:02,100
I'm going to explain this to you a little later when we start talking about optimizations.

118
00:09:02,640 --> 00:09:04,200
One benefit is readability.

119
00:09:04,200 --> 00:09:08,310
It's easy to look through this part rather than inside of all this nested GSX code.

120
00:09:08,880 --> 00:09:13,650
But the other is it's easier to optimize, and I'll talk about that again much later.

121
00:09:14,190 --> 00:09:16,530
But for now, let's test that everything here works.

122
00:09:17,340 --> 00:09:18,630
So let's go back to our application.

123
00:09:20,220 --> 00:09:26,340
Here we seem to have everything hooked up, and let's start adding there we see our blue beanie is being

124
00:09:26,340 --> 00:09:26,700
added.

125
00:09:27,150 --> 00:09:31,980
Our brown cowboy hat is being added and our red beanie is being added.

126
00:09:32,550 --> 00:09:33,090
There we go.

127
00:09:33,120 --> 00:09:36,030
Everything is working as expected.

128
00:09:37,200 --> 00:09:37,890
So awesome.

129
00:09:38,220 --> 00:09:44,730
Our code is working as we want and really the key thing here that was challenging was really thinking

130
00:09:44,730 --> 00:09:53,490
about a way to keep track and update this cart inside of our context because the really challenging

131
00:09:53,490 --> 00:10:00,000
thing is this function and thinking about this function where we know that we want to manufacture a

132
00:10:00,000 --> 00:10:03,270
new array of car items that are based off products.

133
00:10:03,480 --> 00:10:08,700
The only thing is that if an existing one is found for the product that we're trying to add in, then

134
00:10:08,700 --> 00:10:10,360
we just want to increase the quantity.

135
00:10:10,380 --> 00:10:13,290
Otherwise, we just want to keep it the same.

136
00:10:14,070 --> 00:10:19,230
This is the biggest challenging part and requires the most thought when it comes to composing this feature.

137
00:10:20,200 --> 00:10:25,300
So if there's this challenging, I suggest you actually get rid of this code and try it again yourself,

138
00:10:25,690 --> 00:10:30,070
because only by practicing and really thinking about how this is done, are you going to get a better

139
00:10:30,070 --> 00:10:32,020
grasp of why this all works.

140
00:10:32,830 --> 00:10:39,190
So now that we have our cart and our car items, let's start styling our car items in the next video.
