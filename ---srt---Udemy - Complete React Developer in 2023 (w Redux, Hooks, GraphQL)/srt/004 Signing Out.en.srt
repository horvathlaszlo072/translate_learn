1
00:00:00,180 --> 00:00:01,260
Welcome back, everyone.

2
00:00:02,100 --> 00:00:07,350
In this video, we are continuing to store this user object that we get back from authenticating our

3
00:00:07,350 --> 00:00:10,980
user throughout our application inside of the user context.

4
00:00:11,400 --> 00:00:17,250
So here we are inside of our signup form, where we will be indeed storing the user object that we get

5
00:00:17,250 --> 00:00:20,220
back from, create off the user with email and password.

6
00:00:20,760 --> 00:00:25,980
One thing I want you to notice, though, is that inside of this component, we are actually also taking

7
00:00:25,980 --> 00:00:30,630
this user off object and building out a user document from this off.

8
00:00:31,080 --> 00:00:36,900
So some of you might wonder, why are we storing this user off object instead of the actual document

9
00:00:36,930 --> 00:00:39,690
object that we have in our Firestar database?

10
00:00:40,260 --> 00:00:42,020
In this particular case, you're actually correct.

11
00:00:42,030 --> 00:00:43,740
We will be doing that later.

12
00:00:43,950 --> 00:00:49,890
But right now, what I'm practicing is really just storing this one user so that we get familiar with

13
00:00:49,890 --> 00:00:54,420
context before we actually start extrapolating out into the actual document.

14
00:00:54,720 --> 00:00:59,010
Because in order to do so, we have to create a new method for our sign and form so that when we get

15
00:00:59,010 --> 00:01:05,370
this object, we also make sure that we from this object batch the user doc from the authentication.

16
00:01:06,470 --> 00:01:11,390
So before we do any of that, we just want to make sure that we do that in our sign up first.

17
00:01:12,370 --> 00:01:13,540
So one important thing.

18
00:01:14,950 --> 00:01:19,810
Is that we have already pulled in our user context and our use context.

19
00:01:20,410 --> 00:01:25,180
What we're going to do is we are going to pull off that same set current user.

20
00:01:25,750 --> 00:01:30,310
So I want to pull this off of used context from user context.

21
00:01:32,180 --> 00:01:35,690
This is pretty much just a repeat of what we have already done.

22
00:01:37,350 --> 00:01:39,540
Inside of our sign in for him anyways.

23
00:01:41,220 --> 00:01:43,890
And here I'm just going to call set current user.

24
00:01:44,800 --> 00:01:50,740
So now, whenever a user signs up for the first time, they're also going to have their user set inside

25
00:01:50,740 --> 00:01:52,060
of our user context.

26
00:01:52,840 --> 00:01:58,390
Now what we want to do in order to test this is also build out what we're going to do with this current

27
00:01:58,390 --> 00:01:58,720
user.

28
00:01:59,820 --> 00:02:07,230
So here with current user, the primary thing we want to Cota is that we want to be able to display

29
00:02:07,230 --> 00:02:12,840
a sign out link instead of a sign in link when a user is actually signed in.

30
00:02:13,740 --> 00:02:21,240
So here I'm going to say when there is a current user, then what I want you to render is a different

31
00:02:21,420 --> 00:02:21,840
link.

32
00:02:22,410 --> 00:02:28,260
So here I'm just going to use a span and the span is going to have the class name of nav link.

33
00:02:28,620 --> 00:02:34,440
This way inherits all the styling of all of our links, and I'm just going to say that this is a sign

34
00:02:34,440 --> 00:02:34,890
out.

35
00:02:36,900 --> 00:02:43,260
If the current user does not exist, then what we'll do is we will render our sign in link.

36
00:02:50,290 --> 00:02:58,930
Here I see that I have made a mistake like so my brackets are off.

37
00:02:58,960 --> 00:02:59,350
There we go.

38
00:02:59,590 --> 00:02:59,920
OK.

39
00:03:00,730 --> 00:03:06,370
So as I was saying, if current user, then we show a sign out that if there is no current user, then

40
00:03:06,370 --> 00:03:07,450
we show the sign in.

41
00:03:08,230 --> 00:03:09,730
So let's go back to our application.

42
00:03:10,120 --> 00:03:13,540
We see that we haven't signed in a user, so we have our sign in.

43
00:03:13,930 --> 00:03:18,730
But once we sign in with this sign in, then we see the sign out button.

44
00:03:19,510 --> 00:03:22,030
So let's refresh earlier, as we know.

45
00:03:22,330 --> 00:03:26,410
We also linked our creation account to this sign up.

46
00:03:26,740 --> 00:03:31,780
And when a user signs up, we will also store that user inside of our context.

47
00:03:31,930 --> 00:03:32,980
So let's test that as well.

48
00:03:33,550 --> 00:03:38,980
Here, I want to make a new user called Mike, and I'm going to use Mike to at gmail.com.

49
00:03:39,310 --> 00:03:41,480
Password is one two three four one two three four.

50
00:03:41,920 --> 00:03:47,140
Just as we had before and once I hit sign up, this signing should also change the sign out.

51
00:03:47,680 --> 00:03:48,400
So I sign up.

52
00:03:48,850 --> 00:03:49,330
There we go.

53
00:03:50,050 --> 00:03:56,230
I see that we are properly working context to storing this user, so everything is working as expected.

54
00:03:57,360 --> 00:04:02,970
Now, what we want to do is allow this sign up to actually sign a user out, so in order to do that,

55
00:04:02,970 --> 00:04:07,260
we need to go back to our Firebase Utils file here.

56
00:04:07,260 --> 00:04:10,980
What we need to do is import in the sign out method.

57
00:04:11,850 --> 00:04:17,340
This sign out method, we want to create yet another interface layer function.

58
00:04:17,850 --> 00:04:25,950
So I'm going to say this is a sign out user and this is a function that calls sign out.

59
00:04:26,370 --> 00:04:33,120
And what sign out takes is, as you guessed it, the actual auth singleton, which is what informs the

60
00:04:33,120 --> 00:04:37,980
Firebase sign out method, which user to find on the off.

61
00:04:38,280 --> 00:04:42,630
Because remember the authors also keeping track of what users are signed in right now?

62
00:04:43,640 --> 00:04:46,850
So here we just copy our sign out user method.

63
00:04:47,270 --> 00:04:52,430
And what we're going to do is go back to our navigation component and let's import this method in so

64
00:04:52,430 --> 00:04:53,270
that we can use it.

65
00:04:53,750 --> 00:04:58,370
So I want to go import, sign out user from.

66
00:04:59,670 --> 00:05:01,230
The utils file.

67
00:05:03,850 --> 00:05:04,540
Firebase.

68
00:05:04,950 --> 00:05:12,220
Firebase utils and then all we need to do now is that whenever you click, sign out, we'll just say

69
00:05:12,220 --> 00:05:14,230
on click sign out user.

70
00:05:15,220 --> 00:05:21,280
So what should happen here with sign out user, so I don't user will sign this user out.

71
00:05:21,580 --> 00:05:28,360
The problem, though, is that when this user signs out, we don't actually know whether or not the

72
00:05:28,360 --> 00:05:33,310
user is signed out based on our context because our context has not hooked up to it yet.

73
00:05:34,280 --> 00:05:40,250
So what we should do is actually create yet another method, we'll call it a sign out handler.

74
00:05:41,720 --> 00:05:48,020
And here this is just a function, this function is what we're going to pass into the end click instead

75
00:05:48,020 --> 00:05:53,750
of the sign out user, because what needs to happen is let's make this an async function.

76
00:05:54,530 --> 00:05:58,400
What we want to do is we want to await what sign out user does.

77
00:05:58,850 --> 00:06:01,070
Sign out, user returns back, sign up.

78
00:06:01,820 --> 00:06:07,890
So this we can also make an async function because what we want to return is the promise of whatever

79
00:06:07,910 --> 00:06:09,230
sign out returns back to us.

80
00:06:09,830 --> 00:06:11,420
In this particular case, we don't know yet.

81
00:06:11,450 --> 00:06:12,080
So let's see.

82
00:06:12,980 --> 00:06:17,240
So I want to await and I want to set this value as response.

83
00:06:18,170 --> 00:06:19,670
I want to await sign out user.

84
00:06:20,800 --> 00:06:23,890
So sign out, user is a function that's just returning us back.

85
00:06:24,250 --> 00:06:25,690
Whatever sign out gives us back.

86
00:06:25,930 --> 00:06:30,520
And because this method is most likely asynchronous, we get it as a promise.

87
00:06:31,510 --> 00:06:35,140
So we just want to get that value and then let's just console.log it.

88
00:06:36,380 --> 00:06:37,490
So now I want to save this.

89
00:06:38,060 --> 00:06:45,980
I want to go back, I want to open up my console and here I see that we have our sign up, so we know

90
00:06:45,980 --> 00:06:47,660
that our user is still authenticated.

91
00:06:47,960 --> 00:06:51,440
If I click sign up, what we get back is undefined.

92
00:06:53,040 --> 00:06:58,410
So what we can do then knowing that if we have successfully called our sign out user, we've probably

93
00:06:58,410 --> 00:07:05,520
succeeded, then we don't need the value, but we can simply call set current user to null.

94
00:07:06,450 --> 00:07:07,230
And now.

95
00:07:08,920 --> 00:07:11,410
If I save this and I go back.

96
00:07:12,930 --> 00:07:13,830
Let's refresh.

97
00:07:16,030 --> 00:07:17,920
We have no initial value.

98
00:07:19,330 --> 00:07:23,170
I'm going to say, Mike, at gmail.com one two three four one two three four.

99
00:07:23,680 --> 00:07:24,550
I'm going to sign in.

100
00:07:25,090 --> 00:07:27,790
We see that we have successfully stored our user.

101
00:07:28,210 --> 00:07:33,730
And now if I click sign out, what we notice is that I've signed out the user and I've also reset the

102
00:07:33,730 --> 00:07:34,330
context.

103
00:07:35,200 --> 00:07:41,530
So here we are, leveraging this context in order to store our user, but also track the authentication

104
00:07:41,530 --> 00:07:42,280
state of our user.

105
00:07:42,670 --> 00:07:48,220
So hopefully you can see how easy it is to leverage this context in order for us to keep track of some

106
00:07:48,220 --> 00:07:52,570
value that we get from an API and then use it internally in our application.

107
00:07:53,350 --> 00:07:54,310
So here though.

108
00:07:55,240 --> 00:08:01,510
We know how context works, but we can actually optimize our code for Firebase a little bit because

109
00:08:01,510 --> 00:08:06,730
what we're doing here, as you'll notice, is that we're relying on code that's spread out throughout

110
00:08:06,730 --> 00:08:13,900
multiple parts of our application, the sign in form, the sign up form, as well as the navigation

111
00:08:13,900 --> 00:08:18,610
component in order to track this user authentication state.

112
00:08:19,580 --> 00:08:26,960
Luckily for us, we can actually consolidate all of this in one place, and this is using a new method

113
00:08:27,170 --> 00:08:34,220
that we get back from Firebase, which allows us to actually observe whenever authentication changes.

114
00:08:34,520 --> 00:08:39,920
So when a new user signs in or whatever user signs out, we can actually track all of that in one place,

115
00:08:40,310 --> 00:08:42,650
and I'll show you how that works in the next video.

116
00:08:43,010 --> 00:08:44,120
So I'll see you in the next video.
