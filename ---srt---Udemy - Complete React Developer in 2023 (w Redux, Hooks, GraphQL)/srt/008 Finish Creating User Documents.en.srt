1
00:00:00,480 --> 00:00:01,350
Welcome back, everyone.

2
00:00:02,130 --> 00:00:06,390
In this video, we are going to leverage the pieces of information that we've just learned, we have

3
00:00:06,390 --> 00:00:10,770
this user document reference and from this user document reference, we got a snapshot.

4
00:00:11,100 --> 00:00:16,530
The snapshot allows us to check whether or not there's an instance of it that exists inside of a database,

5
00:00:16,530 --> 00:00:19,020
and it also allows us to access the data.

6
00:00:20,130 --> 00:00:21,330
So how do we do this?

7
00:00:21,840 --> 00:00:23,010
How are we going to set up our code?

8
00:00:23,610 --> 00:00:25,530
Well, let's write some pseudocode first.

9
00:00:26,220 --> 00:00:32,370
What I want to do is I want to first check if user data exists.

10
00:00:32,880 --> 00:00:35,700
If it does, then I don't want to do anything.

11
00:00:35,730 --> 00:00:40,200
I just want to return back this user document reference.

12
00:00:42,440 --> 00:00:48,590
If the data does not exist, though, so let's say if user data does not exist.

13
00:00:49,810 --> 00:00:54,680
So here this is what happens if user data exists, have user data does not exist.

14
00:00:54,730 --> 00:01:05,260
What I want to do is I want to create a set the document with the data from User Auth in my collection,

15
00:01:05,740 --> 00:01:10,600
and I want to set it using this user snapshot because remember, it's already pointing to a specific

16
00:01:10,600 --> 00:01:13,300
place in the collection for the data that we want.

17
00:01:13,900 --> 00:01:15,910
So to do this, I'm going to say first.

18
00:01:15,910 --> 00:01:20,860
If so, I'm going to use the bhang operator, which means that if the snapshot.

19
00:01:23,040 --> 00:01:26,100
Exists, so remember, it gives us a Boolean.

20
00:01:26,460 --> 00:01:31,690
So if it exists, that it'll return true, if it doesn't exist, it gives us false and with the bang.

21
00:01:31,710 --> 00:01:32,670
I'm reversing it.

22
00:01:33,060 --> 00:01:38,190
So that means that if it doesn't exist, this will return true if it does not exist, because if it

23
00:01:38,190 --> 00:01:40,920
does not exist, then I want to create and set the document.

24
00:01:41,520 --> 00:01:45,060
So to do that, I need to pull off the display name.

25
00:01:46,370 --> 00:01:53,120
And I want the email from art user off object, if you remember those are fields that is on this object

26
00:01:53,120 --> 00:01:54,620
alongside with our unity.

27
00:01:56,020 --> 00:02:02,560
And then what I also want to do is I want to make just a creative that so this is just going to be a

28
00:02:02,560 --> 00:02:04,510
new date object.

29
00:02:05,050 --> 00:02:08,380
This way, we know when these users are signing in.

30
00:02:09,470 --> 00:02:13,370
Then in order to set this document, we need a try catch block.

31
00:02:14,240 --> 00:02:18,830
If you don't know what track fetches, essentially this just means I want you to try something asynchronous.

32
00:02:19,430 --> 00:02:23,660
If whatever you try and here throws an error, then you're going to catch that error and you're going

33
00:02:23,660 --> 00:02:25,580
to do something with it within this block.

34
00:02:26,330 --> 00:02:29,900
So what we're going to try is we are going to try to set the document.

35
00:02:30,260 --> 00:02:35,720
So as we know, if get doc gets us the document, then set doc allows us to set the document.

36
00:02:36,320 --> 00:02:43,100
And similarly, what we're going to pass it is a user doc reference that we just got back using the

37
00:02:43,100 --> 00:02:46,850
doc and then we're going to pass on the data we want to set up with.

38
00:02:47,390 --> 00:02:49,550
So here we want to set a display name.

39
00:02:50,120 --> 00:02:52,440
We want to set a email.

40
00:02:52,880 --> 00:02:55,220
And we want to set a created at date.

41
00:02:56,300 --> 00:02:58,430
And this is pretty much all we need.

42
00:03:00,020 --> 00:03:01,490
Beyond that, what about the air?

43
00:03:02,510 --> 00:03:08,000
Well, what I'm going to do is I'm just going to console log that there was an error creating the user,

44
00:03:08,150 --> 00:03:12,440
and I'm also going to log the error message that comes from the error.

45
00:03:13,780 --> 00:03:17,950
So this is all that's going to happen if our user snapshot does not exist.

46
00:03:18,970 --> 00:03:22,420
But what happens if the user data exists?

47
00:03:22,870 --> 00:03:28,540
So if it exists, then this is not even going to run because this is going to return true, right?

48
00:03:28,570 --> 00:03:34,610
User snapshot exists, which the bang will flip, so it evaluates the false meaning this whole settings

49
00:03:34,780 --> 00:03:35,860
that is going to skip.

50
00:03:36,520 --> 00:03:40,300
So we can just return user doc reference.

51
00:03:43,950 --> 00:03:44,820
Just to be sure.

52
00:03:45,900 --> 00:03:48,210
Let's just save this code and see what happens.

53
00:03:48,510 --> 00:03:49,770
So let's just walk through this again.

54
00:03:50,220 --> 00:03:52,050
We checked to see if this snapshot exists.

55
00:03:52,530 --> 00:03:57,580
If it does not exist, then we want to set it inside of our database.

56
00:03:57,810 --> 00:04:00,480
So we're just saying, Yo, set the doc with this object.

57
00:04:02,900 --> 00:04:09,770
So what we're going to do here is we are just going to also in here cost.

58
00:04:11,020 --> 00:04:16,690
User doc reference, because now we know no matter what happens, we should get back a doc reference.

59
00:04:19,000 --> 00:04:22,430
And I want to await this, because, again, this is an asynchronous step.

60
00:04:23,660 --> 00:04:25,760
In fact, we don't even need to do any of this yet.

61
00:04:26,090 --> 00:04:28,490
We can actually see it directly in our collection if it works.

62
00:04:29,180 --> 00:04:30,260
So let's just test that.

63
00:04:30,980 --> 00:04:32,210
So let me refresh this.

64
00:04:34,680 --> 00:04:35,850
Let me trigger the pop up.

65
00:04:39,140 --> 00:04:40,820
Let me sign into my Google account.

66
00:04:42,540 --> 00:04:46,800
And now again, we see that it's false, of course, because we just wrote the code for our collection

67
00:04:46,800 --> 00:04:47,550
for the first time.

68
00:04:48,270 --> 00:04:52,800
And now if we go into our database and we refresh.

69
00:05:00,220 --> 00:05:05,800
We see we now have a user's collection, and there it is, there is our user created today.

70
00:05:06,670 --> 00:05:10,120
So this is really great because that's all we really need.

71
00:05:10,600 --> 00:05:18,730
We can now authenticate our users allowed them to come in, but also now we can just simply update our

72
00:05:18,730 --> 00:05:22,270
database with all of these authenticated users and their relevant data.

73
00:05:22,900 --> 00:05:26,290
So we have now created a way to create users.

74
00:05:27,460 --> 00:05:32,950
So this is really handy because using this system, we now have authentication as well as storage of

75
00:05:32,950 --> 00:05:40,750
these users inside of our application authentication and users is typically a very complicated feature

76
00:05:40,750 --> 00:05:43,570
to built because it involves servers, back ends and all that.

77
00:05:43,930 --> 00:05:49,300
But here we achieved it using Firebase, and we just had to learn a little bit of firebase along the

78
00:05:49,300 --> 00:05:49,570
way.

79
00:05:50,740 --> 00:05:51,370
So this is it.

80
00:05:52,060 --> 00:05:53,680
We're now creating user documents.

81
00:05:53,920 --> 00:05:56,320
We now have those documents and references.

82
00:05:56,590 --> 00:05:58,960
We can use them for signing in and signing out users.

83
00:05:59,620 --> 00:06:01,000
This is pretty good now.

84
00:06:01,300 --> 00:06:04,480
We can start utilizing this inside of our application.

85
00:06:05,840 --> 00:06:10,760
Before we do any of that, though, let's just make sure that we also commit our changes.

86
00:06:11,510 --> 00:06:14,660
So what we want to do is we want to get ahead.

87
00:06:15,680 --> 00:06:24,080
Let's just get commit our message, which is that we have added our sign in component as well as firebase

88
00:06:24,080 --> 00:06:29,180
utils and brought in Firebase libraries.

89
00:06:31,090 --> 00:06:32,380
And then we can push this up.

90
00:06:34,630 --> 00:06:35,620
And that's it.

91
00:06:36,430 --> 00:06:42,900
So now that we're at the stage, we have in some Firebase utility functions, we brought in Firebase,

92
00:06:42,910 --> 00:06:44,860
we have our sign up component starting out.

93
00:06:45,550 --> 00:06:46,990
Let's move on to the next video.

94
00:06:47,020 --> 00:06:48,490
Well, we'll continue fleshing this out.
