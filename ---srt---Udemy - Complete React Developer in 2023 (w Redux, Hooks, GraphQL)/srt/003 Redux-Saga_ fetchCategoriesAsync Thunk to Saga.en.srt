1
00:00:00,710 --> 00:00:01,640
Welcome back, everyone.

2
00:00:02,510 --> 00:00:05,120
In this video, we are going to write our first saga.

3
00:00:05,540 --> 00:00:08,270
And the saga we're going to make is the category saga.

4
00:00:09,050 --> 00:00:14,030
This saga is primarily going to replace our fetched categories, async thunk.

5
00:00:14,900 --> 00:00:20,270
So what we want to do first is we want to create a new file inside of categories.

6
00:00:21,570 --> 00:00:24,990
I'm going to call it Category dot saga, dot us.

7
00:00:25,830 --> 00:00:29,670
And inside, what I need to replicate is this method.

8
00:00:29,970 --> 00:00:35,880
So I'm going to copy over our fetch categories async func just to use as a reference because we're really

9
00:00:35,880 --> 00:00:37,440
moving from thanks to sagas here.

10
00:00:38,670 --> 00:00:43,890
What I need to import are going to be first for of the saga based effect generators.

11
00:00:44,490 --> 00:00:51,390
So these are very similar to the different methods that we use inside of actual generator functions.

12
00:00:51,900 --> 00:00:56,840
However, Saga does have Redux bindings on them, meaning that we're able to access the Redux store,

13
00:00:56,850 --> 00:01:00,120
we're able to dispatch to it, and we do so through these methods.

14
00:01:00,960 --> 00:01:08,160
So first, what I'm going to do is import from Redux Saga slash effects, and that effects pretty much

15
00:01:08,160 --> 00:01:10,290
tells you these are side effect generators.

16
00:01:10,950 --> 00:01:12,360
I need to take latest.

17
00:01:13,400 --> 00:01:14,330
I need all.

18
00:01:14,630 --> 00:01:17,180
I need a call and I need put.

19
00:01:17,750 --> 00:01:21,690
So I'm going to discuss what each of them do when we use them.

20
00:01:21,710 --> 00:01:23,420
For now, we just need to import them in.

21
00:01:24,530 --> 00:01:24,830
Next.

22
00:01:24,830 --> 00:01:28,610
What we need is we need this get categories and documents.

23
00:01:31,950 --> 00:01:36,660
What we also need is we need are actual action creators.

24
00:01:37,170 --> 00:01:43,370
So what I want is the fetch categories success and I need fetch categories failed.

25
00:01:44,710 --> 00:01:47,370
And why we don't need fetch category start.

26
00:01:47,380 --> 00:01:54,160
I'm going to talk about in a little bit once we actually start writing our saga and the last thing we

27
00:01:54,160 --> 00:01:56,740
need is the categories action type.

28
00:01:59,640 --> 00:02:00,840
So now to I have this.

29
00:02:01,470 --> 00:02:08,010
The first thing I want to do is I need to set up the actual export from this service file.

30
00:02:08,460 --> 00:02:13,890
This is pretty much an accumulator that holds all of your sagas that are related to the category.

31
00:02:14,640 --> 00:02:22,260
So here I'm going to generate this generator function, so export function with the star and then I'm

32
00:02:22,260 --> 00:02:24,110
going to say categories.

33
00:02:24,180 --> 00:02:29,040
Saga is equal to our function and it yields.

34
00:02:30,250 --> 00:02:39,280
The all call now, all is essentially an effect that says, Hey, run everything inside and only complete

35
00:02:39,280 --> 00:02:40,600
when all of it is done.

36
00:02:41,050 --> 00:02:47,470
So remember, with yield, at this point, it's going to execute this and any further calls that we

37
00:02:47,470 --> 00:02:51,130
have down here don't happen until this finishes.

38
00:02:51,400 --> 00:02:58,570
So it's a pause essentially for this level until everything on this line following the yield is finished.

39
00:02:59,170 --> 00:03:06,160
All says that you can give me an array of different things that you are calling or different functions,

40
00:03:06,160 --> 00:03:07,240
different generators, whatever.

41
00:03:07,960 --> 00:03:12,670
And what it will do is it will wait until all of them completes before we continue.

42
00:03:13,630 --> 00:03:19,630
Now inside of this array is where we are going to add our generators when we write them.

43
00:03:20,530 --> 00:03:28,960
So the first generator I want to write is something that triggers when we call fetch category start.

44
00:03:29,830 --> 00:03:35,590
So generators respond to actions the same way that reducers do inside of their switch.

45
00:03:36,160 --> 00:03:40,360
With a switch statement, we say, Hey, whenever I hear this action, I'm going to return something

46
00:03:40,360 --> 00:03:41,050
from my function.

47
00:03:41,680 --> 00:03:43,420
With sagas, it's similar.

48
00:03:43,420 --> 00:03:47,710
Whenever an action happens and I hear it, I want to do something with it.

49
00:03:48,400 --> 00:03:52,090
So this is where we first write our generator function.

50
00:03:52,390 --> 00:03:58,450
So this is going to be function start and I'm going to say on fetch categories.

51
00:04:00,600 --> 00:04:09,120
So this just means, hey, the moment I hear the action category action types that start so before are

52
00:04:09,120 --> 00:04:14,670
async was the thing that actually fired off the actual action.

53
00:04:14,670 --> 00:04:18,420
But now instead we are responding to category start.

54
00:04:19,540 --> 00:04:24,520
So here, what I'm going to do is say, hey, I want a yield and I want to call, take latest.

55
00:04:25,150 --> 00:04:28,210
So take is where we receive actions.

56
00:04:29,110 --> 00:04:30,280
Take latest means.

57
00:04:30,280 --> 00:04:33,880
If you hear a bunch of the same action, give me the latest one.

58
00:04:35,070 --> 00:04:39,390
All the previous ones that heard let's say we heard the same action five times in a row.

59
00:04:39,390 --> 00:04:42,120
Back to back to back to back before the generator finished.

60
00:04:42,480 --> 00:04:43,940
Cancel the previous one.

61
00:04:43,950 --> 00:04:46,290
Just restart with the latest one again.

62
00:04:46,290 --> 00:04:49,020
That will make more sense once we write these actual sagas out.

63
00:04:50,090 --> 00:04:52,340
So take latest gets two arguments.

64
00:04:52,730 --> 00:04:56,690
The first is the actual action type that you want to respond to.

65
00:04:56,930 --> 00:05:00,500
So here I want to respond to fetch category start.

66
00:05:01,460 --> 00:05:05,090
The next argument is what you want to actually happen.

67
00:05:05,840 --> 00:05:12,200
So this is where we are going to create this batch categories async saga.

68
00:05:12,560 --> 00:05:14,990
It's essentially all the code inside of our tribe.

69
00:05:15,410 --> 00:05:20,480
So we're saying the moment we hear a category start, run all the code that you had in here.

70
00:05:21,640 --> 00:05:26,020
So here, let's make a export function.

71
00:05:28,100 --> 00:05:33,260
Fetch categories async now of course will clash because we already have a function definition here,

72
00:05:33,270 --> 00:05:34,670
but we're going to get rid of it anyways.

73
00:05:36,200 --> 00:05:42,860
And inside of fetch categorize async is where we are going to pretty much do everything we were doing

74
00:05:42,860 --> 00:05:43,820
inside of the try.

75
00:05:45,920 --> 00:05:52,130
The only thing is we need to modify this so that it works within the generator because you cannot have

76
00:05:52,130 --> 00:05:53,660
async await in the generator.

77
00:05:53,870 --> 00:05:57,770
Again, the generator is actually the basis for async await.

78
00:05:58,640 --> 00:06:01,280
And here instead of await, we need to yield.

79
00:06:02,720 --> 00:06:07,820
Any time you call a function, what is happening with this function is that this is an asynchronous

80
00:06:07,970 --> 00:06:12,890
event that happens and a wait is saying, Hey, I want you to wait until this comes back with something.

81
00:06:13,190 --> 00:06:14,180
Yield is very similar.

82
00:06:14,190 --> 00:06:16,070
I want you to wait until this comes back with something.

83
00:06:16,430 --> 00:06:20,300
But this needs to be a generator effect, which is where you use call.

84
00:06:20,900 --> 00:06:24,260
Anywhere you have a function and you want to turn it into an effect.

85
00:06:24,410 --> 00:06:26,810
You essentially use the call keyword.

86
00:06:27,410 --> 00:06:33,020
The way that call works is you pass it a variable, which is a callable method.

87
00:06:33,050 --> 00:06:38,330
So for us it's the get categories and documents method and then what you pass to it are going to be

88
00:06:38,330 --> 00:06:39,470
the parameters for this.

89
00:06:39,860 --> 00:06:44,690
So get categories and documents receives a string if you remember, and we're passing it the category

90
00:06:44,690 --> 00:06:45,080
string.

91
00:06:45,230 --> 00:06:49,580
So by calling it like this we're saying, hey, this is the method, call it with these parameters.

92
00:06:50,330 --> 00:06:57,320
And now that we have this, what we need to do after is we need to actually dispatch out fetch category

93
00:06:57,320 --> 00:06:59,450
success when categories array comes back.

94
00:06:59,930 --> 00:07:04,100
But we don't actually call dispatch inside of a generator we call put.

95
00:07:04,880 --> 00:07:07,580
So here we're going to say I want you to yield put.

96
00:07:08,760 --> 00:07:14,540
And then we're going to call our first category success with the categories array.

97
00:07:15,300 --> 00:07:20,700
And then we're going to do the same thing with fetch categories failed in case we actually fail.

98
00:07:26,160 --> 00:07:26,730
And that's it.

99
00:07:26,760 --> 00:07:28,770
This is our fetch categories async saga.

100
00:07:29,460 --> 00:07:34,590
We then take this and we pass it as the second argument of our on fetch categories.

101
00:07:34,590 --> 00:07:35,370
Take latest.

102
00:07:35,970 --> 00:07:41,760
And now the way that the code will flow is that essentially we're saying whenever we take the latest

103
00:07:42,480 --> 00:07:47,640
fetch category start action, what we're going to do is we're going to initialize the fetch categories

104
00:07:47,650 --> 00:07:48,630
async saga.

105
00:07:49,110 --> 00:07:53,700
This saga is going to attempt to fetch our categories array from Firebase.

106
00:07:54,060 --> 00:08:02,040
And if that's successful, then we are going to put, which is the generator version of dispatch this

107
00:08:02,040 --> 00:08:05,340
fetch category success action with the categories array.

108
00:08:05,970 --> 00:08:10,920
If this fails meaning to fetch firebase never fails then instead we're going to take that error and

109
00:08:10,920 --> 00:08:13,890
we are going to dispatch a fetch category failed error.

110
00:08:14,340 --> 00:08:20,400
Both of these actions that get generated go back into the redux flow and in turn we'll update the reducers

111
00:08:20,610 --> 00:08:25,170
or any sagas that are listening for these actions that what we're going to do is going to take this

112
00:08:25,170 --> 00:08:31,860
on fetch category saga and we are going to listen to it inside of our category saga aggregator.

113
00:08:32,280 --> 00:08:37,470
So here I'm going to say all is going to get the call with on fetch categories.

114
00:08:38,400 --> 00:08:43,740
Similarly, we need to take this category saga and import it into the root saga.

115
00:08:44,340 --> 00:08:51,630
And here this is coming from our categories category saga and what we're going to do very similar with

116
00:08:51,630 --> 00:08:57,690
our root saga as we have with our other aggregator sagas, we're going to yield the all call with an

117
00:08:57,690 --> 00:09:00,870
array parsing call category saga.

118
00:09:01,860 --> 00:09:08,130
The last step that we need to do is that inside of our shop component, we need to stop dispatching

119
00:09:08,130 --> 00:09:09,780
fetch categories async.

120
00:09:10,290 --> 00:09:16,440
If you remember inside of this category action, this is no longer necessary because we no longer work

121
00:09:16,440 --> 00:09:17,040
with thunk.

122
00:09:18,000 --> 00:09:23,490
Instead, what we're going to use is we are just going to say, hey, fetch category start, because

123
00:09:23,490 --> 00:09:26,160
that's what this category saga is listening for.

124
00:09:26,190 --> 00:09:27,270
That's category start.

125
00:09:27,870 --> 00:09:32,850
So that is going to be what we dispatch out from our shop component on Mount.

126
00:09:33,480 --> 00:09:40,290
And now if we go back to our application and we restart, what we see is that we see our fetch category

127
00:09:40,290 --> 00:09:47,730
start and then what we see after we get the start is our fetch category success, which is a redux saga

128
00:09:47,730 --> 00:09:48,150
action.

129
00:09:48,570 --> 00:09:54,600
And inside of here you'll notice that we have indeed our categories payload and of course our status

130
00:09:54,600 --> 00:10:00,330
updates appropriately and the rest of our application works, hence why we can see these products.

131
00:10:00,930 --> 00:10:01,560
So this is it.

132
00:10:01,950 --> 00:10:06,350
This is our category saga migration from a category.

133
00:10:06,360 --> 00:10:06,800
Thank.

134
00:10:07,750 --> 00:10:11,830
So right now you may not realize why this pattern seems so powerful.

135
00:10:12,070 --> 00:10:17,050
What was the point of switching to the thunk to a saga when it really just seemed we had more boilerplate

136
00:10:17,050 --> 00:10:17,740
code added?

137
00:10:18,490 --> 00:10:22,630
This becomes much more powerful once we need to start calling multiple async events.

138
00:10:22,960 --> 00:10:26,950
And that's what we're going to do with the user actions and user.

139
00:10:26,950 --> 00:10:27,400
Thanks.

140
00:10:28,510 --> 00:10:31,510
So join me in the next video where we will tackle that together.

141
00:10:32,080 --> 00:10:33,340
I'll see you in the next video.
