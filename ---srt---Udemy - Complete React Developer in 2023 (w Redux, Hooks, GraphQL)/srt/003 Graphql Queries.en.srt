1
00:00:00,300 --> 00:00:01,320
Welcome back, everyone.

2
00:00:01,950 --> 00:00:05,220
In this video, we are going to actually start working with queries.

3
00:00:05,910 --> 00:00:10,890
Now, queries, again, is when you ask GraphQL for some data.

4
00:00:12,140 --> 00:00:14,030
Inside on the right hand here.

5
00:00:14,870 --> 00:00:19,640
The great thing about the playground is it will offer some autocomplete features, meaning that as you

6
00:00:19,640 --> 00:00:23,180
start typing, it will tell you what options are available to you.

7
00:00:23,870 --> 00:00:31,790
The format that we define our graph cool always comes in the form of either asking for a mutation or

8
00:00:32,000 --> 00:00:32,630
a query.

9
00:00:33,530 --> 00:00:40,850
So to begin, when we're asking for data with a query, there are only the ones available to you inside

10
00:00:40,850 --> 00:00:43,700
of this section of query on your schema.

11
00:00:44,540 --> 00:00:50,990
Because somebody who wrote the GraphQL server needs to define to you explicitly what you can ask for

12
00:00:50,990 --> 00:00:52,400
and how you can ask for it.

13
00:00:53,000 --> 00:00:58,270
So here, if you ask for collections, then it will give you back an array of collections.

14
00:00:59,000 --> 00:01:05,330
So I need to start by saying, I'm going to give you a query and this query is going to request from

15
00:01:05,330 --> 00:01:06,860
you collections.

16
00:01:07,610 --> 00:01:13,250
Now, as you type, you will notice that GraphQL will give you hints, meaning that these are the only

17
00:01:13,250 --> 00:01:14,460
things that you can ask for.

18
00:01:14,480 --> 00:01:18,560
This is what you'll get back if you query depending on the one that you ask for.

19
00:01:18,980 --> 00:01:25,160
Collection Singular is asking for one collection, which we'll talk about after collections array gives

20
00:01:25,160 --> 00:01:29,870
you back all of the collections that match and then get collection by title.

21
00:01:29,900 --> 00:01:34,790
You get back a single collection, but you have to tell it the title of the collection you're looking

22
00:01:34,790 --> 00:01:35,060
for.

23
00:01:36,340 --> 00:01:40,780
Now let's talk about the first one collections, because I don't want to talk about variables yet before

24
00:01:40,780 --> 00:01:41,740
we even work with everything.

25
00:01:42,670 --> 00:01:43,090
Here.

26
00:01:44,100 --> 00:01:46,410
Collections matches the one that you see here.

27
00:01:46,650 --> 00:01:48,000
But you saw this warning.

28
00:01:48,480 --> 00:01:51,900
Collections of type collection must have selection subfields.

29
00:01:52,170 --> 00:01:57,540
So this is telling us, hey, you can't ask for this query unless you tell me what subfield you want

30
00:01:57,570 --> 00:01:58,380
on this collection.

31
00:01:58,980 --> 00:01:59,970
What are the subfields?

32
00:02:00,120 --> 00:02:05,190
Well, those are going to be those keys on the actual type that I want to include.

33
00:02:05,700 --> 00:02:11,520
So to begin, let's say I want the ID and I also want the title.

34
00:02:13,420 --> 00:02:17,470
So by typing it out like this, if I now make a request.

35
00:02:18,580 --> 00:02:20,590
I get back this object.

36
00:02:21,040 --> 00:02:22,780
So this is the structure.

37
00:02:22,780 --> 00:02:27,640
As I mentioned, it looks object like, but there's no fields to it.

38
00:02:27,640 --> 00:02:28,750
It's just the keys.

39
00:02:29,140 --> 00:02:30,340
There's also no commas.

40
00:02:30,880 --> 00:02:34,030
So I'm saying, hey, give me a query on the collection query.

41
00:02:34,390 --> 00:02:38,440
And when you give me back the data, I want the ID and the title on that data.

42
00:02:39,340 --> 00:02:44,590
Now here, once we hit play, you'll see that this is a top level JSON object.

43
00:02:45,430 --> 00:02:52,420
So it's an object where inside it contains a field data that contains all of our data, again, as an

44
00:02:52,420 --> 00:02:52,930
object.

45
00:02:53,500 --> 00:02:55,900
And inside is the name of our query.

46
00:02:56,770 --> 00:03:03,760
That name is going to correspond to an array which contains all of our different collections with an

47
00:03:03,760 --> 00:03:06,700
ID and also with the title.

48
00:03:07,930 --> 00:03:10,870
If I wanted more, let's say I wanted the items as well.

49
00:03:12,110 --> 00:03:17,570
You'll notice now that there's this little red signature on the side here, because this, again, represents

50
00:03:17,570 --> 00:03:18,980
that there's an air that we have.

51
00:03:19,520 --> 00:03:25,730
And similarly to what we had before, I have to give it a subfield meaning that if I'm asking for items,

52
00:03:25,730 --> 00:03:29,150
what are the fields I want from the items now?

53
00:03:29,150 --> 00:03:30,110
From the items.

54
00:03:30,680 --> 00:03:32,630
Again, we can open up the schema.

55
00:03:34,170 --> 00:03:39,820
And let's say that for now, I just want the name because I need this schema in order for me to reference.

56
00:03:39,840 --> 00:03:41,520
It's hard to remember what everything will be.

57
00:03:41,760 --> 00:03:44,400
So always jump between the schema and your actual query.

58
00:03:44,940 --> 00:03:47,130
And let's say I just want the name from the items.

59
00:03:47,610 --> 00:03:56,250
Now, if I rerun my request for each of my collections, I get back the array on the items where I just

60
00:03:56,250 --> 00:03:56,760
have the name.

61
00:03:57,480 --> 00:04:02,820
If I also wanted the ID and I also wanted the price, I can easily add those in.

62
00:04:03,150 --> 00:04:05,400
And once again, I get back my values.

63
00:04:06,180 --> 00:04:07,110
Checking the schema.

64
00:04:07,190 --> 00:04:09,330
Are there any other values that I might want?

65
00:04:10,050 --> 00:04:11,340
There might be the image URL.

66
00:04:12,060 --> 00:04:20,010
So again, it's very easy to forget what kind of values you have on your data and always, always use

67
00:04:20,040 --> 00:04:26,370
the playground when you're composing and writing out your queries and your mutations or anything inside

68
00:04:26,370 --> 00:04:27,030
of GraphQL.

69
00:04:27,240 --> 00:04:30,990
Because when you're trying to do it inside your application, you're not going to have the schema.

70
00:04:31,170 --> 00:04:33,420
You're not going to be able to test out your calls.

71
00:04:33,900 --> 00:04:38,700
That's the beautiful thing about the playground is that this is essentially where you build out your

72
00:04:38,700 --> 00:04:40,650
asks from GraphQL.

73
00:04:41,520 --> 00:04:45,180
So far our query has been made to all of the collections.

74
00:04:45,690 --> 00:04:51,920
But we can also when you look at my schema here, you'll notice that I created another query for you

75
00:04:51,930 --> 00:04:54,180
where you can get back a singular collection.

76
00:04:54,630 --> 00:05:00,990
Looking at this signature, you can assume that because I'm asking for an ID, you're going to get back

77
00:05:00,990 --> 00:05:03,660
a singular collection that matches that ID.

78
00:05:04,740 --> 00:05:07,410
So let's test out this new query.

79
00:05:08,310 --> 00:05:13,200
First of all, looking at the signature, you can tell that I'm asking you for what looks like a parameter

80
00:05:13,200 --> 00:05:16,380
of ID that must be of the ID type.

81
00:05:16,710 --> 00:05:20,340
And it's necessary that you give me that ID, hence the exclamation mark.

82
00:05:21,030 --> 00:05:22,140
So how do we write this out?

83
00:05:22,830 --> 00:05:26,880
Well, first off, in order to get the ID, we have to pass this in as a variable.

84
00:05:27,150 --> 00:05:31,410
And as I mentioned down here, you'll notice that it says query variables.

85
00:05:32,010 --> 00:05:35,700
So as a pass at a variable, you pass it as a JSON object.

86
00:05:36,030 --> 00:05:37,530
So there's an outer object.

87
00:05:37,530 --> 00:05:38,520
And what do we need?

88
00:05:38,850 --> 00:05:40,650
We need an I.D..

89
00:05:41,190 --> 00:05:48,330
So here you're just going to state this is an ID and the ID value that we're going to give it is going

90
00:05:48,330 --> 00:05:51,360
to be of one of these IDs.

91
00:05:51,840 --> 00:05:54,390
So I want to use this one for the hats.

92
00:05:54,750 --> 00:05:57,090
So I'm going to copy this top level.

93
00:05:58,820 --> 00:06:00,710
I'd love for the collection.

94
00:06:00,830 --> 00:06:05,630
Make sure you don't get one for the item, and then we're going to pass it as a string.

95
00:06:11,700 --> 00:06:17,280
And now when you hover over, it says variable ID does not appear in any GraphQL query.

96
00:06:17,610 --> 00:06:19,470
So again, the playground is trying to help us.

97
00:06:19,770 --> 00:06:23,460
It's true we have not actually used this variable inside our query.

98
00:06:24,000 --> 00:06:30,090
So to do this, let's go back into our schema so that we can understand how to build out this query.

99
00:06:31,280 --> 00:06:38,270
To begin with at this top level, any of these variables you want to pass at that top query level to

100
00:06:38,270 --> 00:06:43,280
tell it, these are going to be the variables that are referenced inside of the query.

101
00:06:43,850 --> 00:06:48,290
To begin with, you are going to put a dollar sign for all of these parameters.

102
00:06:48,740 --> 00:06:51,930
So for us, we only have one parameter, so it's going to be dollar ID.

103
00:06:52,490 --> 00:06:53,870
And then you're going to tell it the type.

104
00:06:54,290 --> 00:06:55,890
The type is going to be.

105
00:06:55,910 --> 00:06:58,070
And I see like this.

106
00:06:59,160 --> 00:07:01,790
And now if you hover over it, there's another error.

107
00:07:01,800 --> 00:07:03,570
It says variable idea is not used.

108
00:07:03,990 --> 00:07:07,320
So this is where you define the entry point for your variables.

109
00:07:07,800 --> 00:07:14,940
Down here is where you define the usage of those variables inside of the actual specific where you're

110
00:07:14,940 --> 00:07:15,330
making.

111
00:07:15,510 --> 00:07:20,850
Because again, right now, the things that we're still trying to make a collection query, if I call

112
00:07:20,880 --> 00:07:29,130
this one collection, I can now open this up, pass it an ID parameter, and then I'm going to put Colon

113
00:07:29,130 --> 00:07:33,150
to tell it which variable to use and the variable is dollar ID.

114
00:07:33,420 --> 00:07:37,020
Now here you'll notice that we are still getting an error.

115
00:07:37,440 --> 00:07:38,220
If you hover over it.

116
00:07:38,220 --> 00:07:44,310
It says variable dollar ID of type ID used in position expecting ID exclamation.

117
00:07:44,940 --> 00:07:52,470
The reason for this is because GraphQL, inside of this query, we're saying that this ID you must receive

118
00:07:52,950 --> 00:07:56,430
meaning that there must be a matching variable being passed in.

119
00:07:57,180 --> 00:07:58,710
So this cannot be optional.

120
00:07:58,720 --> 00:08:06,030
So you have to similarly make sure that you identify that this type for this ID variable is also mandatory,

121
00:08:06,270 --> 00:08:07,710
and now you'll see the error go away.

122
00:08:08,340 --> 00:08:11,520
So again, the query top level is where you identify.

123
00:08:11,820 --> 00:08:16,860
I am going to give you some parameter from a variable which is down here.

124
00:08:17,460 --> 00:08:22,320
Once it's inside, it has this type and this ID you can now use.

125
00:08:22,440 --> 00:08:28,710
Similarly inside of your corresponding query so that you can pass that value into it.

126
00:08:29,190 --> 00:08:35,310
And here you will now see that when we make this request, we get back just a singular collection.

127
00:08:36,090 --> 00:08:37,740
Again, we still have the same shape.

128
00:08:37,770 --> 00:08:40,560
There is a data and then there is a collection key.

129
00:08:40,920 --> 00:08:48,810
And on the collection key is the JSON object of our matching ID, which was the hats collection with

130
00:08:48,810 --> 00:08:51,390
all of the same items because we've kept the same shape.

131
00:08:51,840 --> 00:08:58,680
Now, one thing I do want to mention is that the reason why on the data this is under this key collection

132
00:08:59,190 --> 00:09:04,170
is because technically speaking, you can make multiple requests.

133
00:09:04,980 --> 00:09:10,110
We're only requesting one collection here, but we can actually request for multiple collections or

134
00:09:10,110 --> 00:09:12,660
completely different queries altogether.

135
00:09:13,260 --> 00:09:17,790
We can make that same request we had earlier for collections.

136
00:09:18,600 --> 00:09:24,720
And inside of collections we can actually copy the exact same structure that we had for our data.

137
00:09:25,890 --> 00:09:27,570
This is a valid query.

138
00:09:27,960 --> 00:09:33,270
If you ask for it now, you'll notice that still we have our data, we have the collection that we asked

139
00:09:33,270 --> 00:09:34,020
for up here.

140
00:09:34,590 --> 00:09:38,880
But if you reduce this, notice that we're also now getting all of our collections.

141
00:09:39,090 --> 00:09:41,100
So just something that I wanted to point out.

142
00:09:42,020 --> 00:09:44,180
But here we have both of our queries.

143
00:09:44,660 --> 00:09:50,660
So now that we know how to play around with a graphical library, you can go free and try out the playground

144
00:09:50,660 --> 00:09:53,890
yourself, make some requests, see how it works.

145
00:09:53,900 --> 00:09:54,950
Look at the structure.

146
00:09:55,340 --> 00:10:00,020
Because this structure is going to be identical to the ones that we need to make inside of our React

147
00:10:00,020 --> 00:10:00,590
application.

148
00:10:01,070 --> 00:10:06,140
And now that all of our libraries are finished installing, let's go back in the next video and actually

149
00:10:06,140 --> 00:10:06,980
work with the library.

150
00:10:07,250 --> 00:10:08,360
I'll see you in the next video.
