1
00:00:00,750 --> 00:00:01,680
Welcome back, everyone.

2
00:00:02,600 --> 00:00:07,760
In the last video we learned about the differences in reducers inside of Redux versus context.

3
00:00:08,150 --> 00:00:11,960
We also learned about how to create our root reducer in this video.

4
00:00:11,960 --> 00:00:18,120
Now we're going to take this root reducer and we are going to bring it into our storage s so far.

5
00:00:18,130 --> 00:00:22,880
So what we're going to do is just import root reducer from our root reducer file.

6
00:00:23,790 --> 00:00:28,590
And now what we want to do is we want to finish building out this store object.

7
00:00:29,130 --> 00:00:35,670
So in order to do this, what we need to do is we need to understand what fundamentally creates a store.

8
00:00:36,360 --> 00:00:42,450
So I want to say export concept store is equal to calling this create store method.

9
00:00:43,230 --> 00:00:47,310
So when we create a store, this store takes three arguments.

10
00:00:48,290 --> 00:00:54,680
The first one is really actually the only one that is necessary, and that is the root reducer.

11
00:00:55,400 --> 00:00:56,210
So it's really simple.

12
00:00:56,390 --> 00:00:59,150
You need a root reducer in order to generate the store.

13
00:00:59,510 --> 00:01:00,220
It's that simple.

14
00:01:00,230 --> 00:01:03,710
It just all of these reducers, as we know, are pure function.

15
00:01:04,130 --> 00:01:05,930
They're functions that receive a state and an action.

16
00:01:05,930 --> 00:01:10,400
And in turn, they return you back some object that represents the values in the state.

17
00:01:11,440 --> 00:01:18,220
This store is just in order to facilitate the movement and passing of actions through these reducers.

18
00:01:18,910 --> 00:01:23,740
So all a store really needs is just the root reducer in order to be created.

19
00:01:24,720 --> 00:01:29,190
But in order for this to be useful, we also want to pass it.

20
00:01:29,310 --> 00:01:36,570
This logger and this logger is essentially something that allows us to see what the state looks like

21
00:01:36,570 --> 00:01:45,000
before an action is dispatched, what the action is, and then how the state, in turn, looks after

22
00:01:45,000 --> 00:01:45,540
the action.

23
00:01:46,740 --> 00:01:48,990
So it's very good in order to help us see that.

24
00:01:49,800 --> 00:01:54,980
In order to do that, we actually need to create this thing called middleware.

25
00:01:55,980 --> 00:02:05,520
Middleware, as are kind of like little library helpers that run before an action hits the reducer.

26
00:02:06,240 --> 00:02:14,370
So whenever you dispatch an action before that action hits the reducers, it hits the middleware first.

27
00:02:16,010 --> 00:02:23,660
So here what's going to happen is our middleware is just going to be including our logger.

28
00:02:25,900 --> 00:02:31,930
The only thing, though, is that in order for our middleware to be passed in to create store, we actually

29
00:02:31,930 --> 00:02:33,700
have to pass it as the third argument.

30
00:02:34,240 --> 00:02:40,750
The second argument is, if you want to add any additional default states here, this is added so that

31
00:02:40,750 --> 00:02:42,830
we can actually make it easier to test.

32
00:02:42,850 --> 00:02:45,200
But we'll talk about that much later for now.

33
00:02:45,220 --> 00:02:48,970
I just want you to pass undefined because it's an optional second parameter.

34
00:02:50,530 --> 00:02:55,510
The only other thing as well is that in order for these middleware to actually work, we have to call

35
00:02:55,510 --> 00:02:56,470
apply middleware.

36
00:02:57,280 --> 00:03:04,660
So what we can do here is we can say, hey, these middleware are actually something like enhancers.

37
00:03:05,140 --> 00:03:09,220
So in order for this to work, you have to generate it using compose.

38
00:03:09,730 --> 00:03:17,470
So I want to say composed enhancers is equal to call and compose with apply middleware and then passing

39
00:03:17,590 --> 00:03:18,520
middleware in.

40
00:03:19,870 --> 00:03:22,060
Spreading it actually as the argument.

41
00:03:22,630 --> 00:03:27,160
So what this will do is it'll pass every single middleware that we have if we had more.

42
00:03:27,190 --> 00:03:32,170
You can imagine if we had middleware two or middleware three, like all these different potential middleware

43
00:03:32,260 --> 00:03:34,420
that are helpful for us, which we'll learn later on.

44
00:03:35,140 --> 00:03:40,030
This will allow us to spread it into this apply middleware argument as subsequent arguments.

45
00:03:40,720 --> 00:03:42,880
Compose is a functional programming concept.

46
00:03:42,880 --> 00:03:48,100
It's essentially a way for us to pass multiple functions left to right.

47
00:03:48,790 --> 00:03:55,360
We don't really need it in a lot of the code we write, but as far as this composition pattern is concerned

48
00:03:55,360 --> 00:03:57,910
for Redux, this is something that we need to have.

49
00:03:59,130 --> 00:04:01,960
We'll discuss this more again later in the course.

50
00:04:01,980 --> 00:04:04,650
Right now, I just want to focus on creating the store.

51
00:04:05,430 --> 00:04:10,140
So right now, these are just these steps that we have to go through in order to actually create what

52
00:04:10,140 --> 00:04:11,550
the store wants for us.

53
00:04:12,030 --> 00:04:16,680
So we're going to take these composed enhancers and pass them as this third argument, because there's

54
00:04:16,680 --> 00:04:18,360
different types of enhancers we can have.

55
00:04:18,780 --> 00:04:20,970
Middleware is just the primary one.

56
00:04:21,510 --> 00:04:27,420
So here, essentially what we're doing is we're passing them through as this compose enhances third

57
00:04:27,420 --> 00:04:31,860
argument, it enhances our store, the middleware enhance our store.

58
00:04:32,160 --> 00:04:36,030
They catch actions before they hit our reducers and they log out the state.

59
00:04:36,390 --> 00:04:39,480
That's an enhancement, which is why we have this step.

60
00:04:40,490 --> 00:04:42,560
So now that we've generated this store.

61
00:04:43,680 --> 00:04:49,470
What we need to do is we need to add this into our application in order to do that.

62
00:04:49,860 --> 00:04:55,860
If you think about it, we know that Redux is available throughout the entire application.

63
00:04:56,750 --> 00:05:04,370
This means that chances are there is some type of provider that actually wraps the application because

64
00:05:04,370 --> 00:05:08,480
that's the only way we know that we can have this kind of access throughout the application.

65
00:05:08,720 --> 00:05:09,860
We learned this with context.

66
00:05:10,190 --> 00:05:12,410
We create our own provider and wrap the application.

67
00:05:12,530 --> 00:05:19,040
Anyone that's a child inside has access, and it turns out that Redux has always been using context

68
00:05:19,040 --> 00:05:22,820
API under the hood even before context API was popularized.

69
00:05:23,390 --> 00:05:27,980
So Redux has always been using providers in order to give us this functionality.

70
00:05:28,430 --> 00:05:29,690
So it's very similar.

71
00:05:29,690 --> 00:05:35,900
We import in a provider from React Redux, which is their own provider instance, very similar to the

72
00:05:35,900 --> 00:05:36,770
one that we created.

73
00:05:37,400 --> 00:05:41,360
And we want to wrap the application inside of this provider.

74
00:05:42,590 --> 00:05:49,310
Once we've wrapped this provider, the next thing that we need to do is we need to pass in the store.

75
00:05:50,260 --> 00:05:54,820
So this provider's expecting a store argument, which will be the store that we created.

76
00:05:55,090 --> 00:05:59,170
So we want to import in store from our store folder.

77
00:06:00,780 --> 00:06:02,430
And then our store file.

78
00:06:03,650 --> 00:06:06,470
And the store object is just what we're going to pass it.

79
00:06:07,440 --> 00:06:08,430
So going back to our store.

80
00:06:08,500 --> 00:06:08,920
Yes.

81
00:06:09,300 --> 00:06:12,240
This object is what we're passing to our provider.

82
00:06:13,400 --> 00:06:18,110
And now, technically speaking, we have our producer set up.

83
00:06:19,300 --> 00:06:24,430
The only thing is that we actually have not hooked anything up to this reducer.

84
00:06:25,530 --> 00:06:27,270
So how do we do that?

85
00:06:27,840 --> 00:06:34,380
Well, this, of course, is where we need to actually figure out how to one dispatch actions and then

86
00:06:34,380 --> 00:06:39,150
to get the values out of our store into our application.

87
00:06:39,810 --> 00:06:44,700
And this involves the steps of using actions and dispatch.

88
00:06:45,090 --> 00:06:48,060
So we'll talk about that in the next video.

89
00:06:48,600 --> 00:06:54,630
In this video, there was just a lot of configuration and set up, a lot of which is not necessarily

90
00:06:54,630 --> 00:06:59,220
super sensical because we're just learning all this set up for now.

91
00:06:59,850 --> 00:07:04,560
But if you follow along and once we get to the actual full flow, all of these pieces will start to

92
00:07:04,560 --> 00:07:05,160
make more sense.

93
00:07:06,210 --> 00:07:11,700
So in the next video, let's discuss actually interacting with the store now that we have the setup.

94
00:07:12,060 --> 00:07:13,050
I'll see you in the next video.
