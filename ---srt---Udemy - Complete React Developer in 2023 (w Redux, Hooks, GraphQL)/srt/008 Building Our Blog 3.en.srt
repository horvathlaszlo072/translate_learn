1
00:00:00,300 --> 00:00:01,450
Welcome back, everyone.

2
00:00:02,040 --> 00:00:08,610
In the last lesson, we learned how to hook into this uncreate node method inside of Our Gatsby note,

3
00:00:08,610 --> 00:00:15,060
yes, this method allowed us to hook into the build process when Gatsby would go through our files and

4
00:00:15,060 --> 00:00:17,820
build out the individual node representations of them.

5
00:00:18,360 --> 00:00:23,650
And then we were specifically looking for nodes of the type of markdown remark.

6
00:00:24,420 --> 00:00:30,720
We then added this new node feeling on it equal to slug, and the slug pointed to the new file path

7
00:00:30,720 --> 00:00:31,280
that we made.

8
00:00:31,890 --> 00:00:39,720
So now that we've modified these markdown nodes, we have the actual slug value that we can access inside

9
00:00:39,720 --> 00:00:40,740
of our application.

10
00:00:41,220 --> 00:00:47,730
And in this lesson, we actually need to use that because we're going to build out the final pages that

11
00:00:47,730 --> 00:00:54,240
are marked down to represent inside of our website that point to the actual blog posts that we want

12
00:00:54,240 --> 00:00:55,210
the users to see.

13
00:00:55,770 --> 00:00:58,500
So just like we saw with our pages folder.

14
00:00:59,450 --> 00:01:05,240
Which had any files that we wanted to represent as the final page that our users could see, we're going

15
00:01:05,240 --> 00:01:07,790
to do the same thing with our markdown files.

16
00:01:09,170 --> 00:01:14,240
So one thing that we have to know is that we have to use another method inside of our Gatsby.

17
00:01:14,240 --> 00:01:20,690
No, Jess, I'm going to give you documentation to this API so that you can see any other methods you

18
00:01:20,690 --> 00:01:21,540
can access.

19
00:01:21,560 --> 00:01:26,050
And you can also look up anything that we've already used before to get a better understanding of it.

20
00:01:26,660 --> 00:01:30,230
But the next one we're going to use is called create pages.

21
00:01:32,180 --> 00:01:38,510
And create pages gets to arguments that we want to structure off, the first one is just graphical,

22
00:01:38,900 --> 00:01:42,680
which is pretty much the same way that we've made graphical queries before.

23
00:01:42,710 --> 00:01:45,200
We can just now do so inside of our noses.

24
00:01:45,980 --> 00:01:47,750
And the other thing we get is actions.

25
00:01:50,160 --> 00:01:57,570
Now, what we're going to pull off of these actions is the method create page, create page is an action

26
00:01:57,780 --> 00:02:06,060
that allows us to actually build the pages inside of our application based on whatever properties we

27
00:02:06,060 --> 00:02:08,820
pass to it that will discover once we actually use it.

28
00:02:09,860 --> 00:02:15,620
So what we want to actually return from our create pages function right here, though, is we want to

29
00:02:15,620 --> 00:02:21,230
return a graph to a query that gives us back all of our markdown remarks.

30
00:02:21,710 --> 00:02:28,530
Then we're going to iterate over it and simply just call a page on each of those markdown notes.

31
00:02:29,270 --> 00:02:33,790
So in order for us to do this, we have to use the graphical query that we got back.

32
00:02:34,310 --> 00:02:40,040
So to use it, we're just going to say graphical and then we're going to pass it with these parentheses.

33
00:02:40,980 --> 00:02:47,670
Now, if you're curious as to why inside of here, we have to use these parentheses, whereas inside

34
00:02:47,670 --> 00:02:55,140
of our front end react applications, we don't, this is because there's a new template syntax in Essex

35
00:02:55,140 --> 00:03:00,810
that allows you to pass template literal strings like this in the front end.

36
00:03:00,840 --> 00:03:06,330
As long as you have access to S6, which is pretty much equivalent to doing this, there's really no

37
00:03:06,330 --> 00:03:06,780
difference.

38
00:03:07,350 --> 00:03:11,630
But because with no jobs, we do not get ESX features right out jump.

39
00:03:11,640 --> 00:03:14,810
We do not have access to writing it this way.

40
00:03:15,090 --> 00:03:17,070
So we have to pass these parentheses.

41
00:03:17,340 --> 00:03:19,440
Just if you're curious as to why here, we have to do it.

42
00:03:19,440 --> 00:03:20,790
So that's just one thing you have to remember.

43
00:03:20,790 --> 00:03:24,060
If you ever use the graphical query inside of your note Jass.

44
00:03:24,480 --> 00:03:30,480
Now, there are setups that you can do with no gess and express so that you do get to use that same

45
00:03:30,480 --> 00:03:33,150
syntax as you are familiar with in your front end.

46
00:03:33,600 --> 00:03:35,340
But in our case, it's not necessary.

47
00:03:35,370 --> 00:03:40,310
It's extra work that really just to avoid adding these parentheses is not worth it.

48
00:03:41,740 --> 00:03:48,420
But now that we have our graphic, you all, we have to make the actual query for our all markdown remarks.

49
00:03:48,940 --> 00:03:53,110
So we're going to do this inside of our graphical just so we can actually see this.

50
00:03:53,770 --> 00:03:58,720
So inside of your playground, what you're going to do is you are going to click all markdown remark.

51
00:03:59,080 --> 00:04:00,460
We want the edges.

52
00:04:01,030 --> 00:04:02,590
We want the note from these edges.

53
00:04:02,950 --> 00:04:05,170
We want the fields and off these fields, we want the slug.

54
00:04:05,270 --> 00:04:10,330
If we fire off this request, we see that this is going to be the object we get back.

55
00:04:11,140 --> 00:04:17,650
We're going to need to pull off this edges array and iterate over this so that we can call create page

56
00:04:17,650 --> 00:04:22,470
using each of these node objects to build the actual page because this holds the data that we need.

57
00:04:23,290 --> 00:04:26,230
So let's just copy over our query object.

58
00:04:26,260 --> 00:04:30,040
We'll go back to our code and just paste this in now graph.

59
00:04:30,550 --> 00:04:35,630
The method will simply return us a result inside of a promise.

60
00:04:36,040 --> 00:04:43,870
So once this resolves, we just called then on it and we will get the result value and off of that result

61
00:04:43,870 --> 00:04:45,670
value, it will be that shape that we saw.

62
00:04:45,700 --> 00:04:48,460
So we want to look at the data and off the data.

63
00:04:48,460 --> 00:04:50,350
We want our all marked down Remarque.

64
00:04:51,570 --> 00:04:58,380
And all our markdown remark, we want the edges array, so we just want to loop over this array with

65
00:04:58,380 --> 00:05:03,930
for each and for every element inside, we want to pluck off the note because that's all we need.

66
00:05:06,730 --> 00:05:13,330
Now, with this note, we are going to call create page and we're going to pass create page a object

67
00:05:13,990 --> 00:05:20,020
and this object is going to define the properties that this page needs in order to actually build out

68
00:05:20,020 --> 00:05:21,100
the page that we're looking for.

69
00:05:21,250 --> 00:05:23,080
So the first thing it needs is the path.

70
00:05:23,590 --> 00:05:26,290
The path will tell it in the final application.

71
00:05:26,680 --> 00:05:32,300
What path actually leads to this page that I'm building and this is where we're going to use our slug.

72
00:05:32,650 --> 00:05:34,270
So we're going to say node feels that slug.

73
00:05:35,500 --> 00:05:42,130
And here we're going to pass the actual component now, the component is going to be the template that

74
00:05:42,130 --> 00:05:48,310
it uses in order to actually populate out the final blog post.

75
00:05:48,910 --> 00:05:51,810
So this is pretty much going to be a react component.

76
00:05:52,450 --> 00:05:57,900
And here we're going to make the new blog post template that we need to use for this context.

77
00:05:58,210 --> 00:06:03,160
So we do want to keep this component that we're going to build separate from our front end components,

78
00:06:03,160 --> 00:06:06,520
because it will only be used inside of our Gatsby no JS file.

79
00:06:07,000 --> 00:06:12,370
So we'll make a new folder called Templates An inside of here, we're going to make a new file called

80
00:06:12,370 --> 00:06:14,460
Blog Post Docs.

81
00:06:15,130 --> 00:06:19,630
So normally you might be used to every Riak component that we write being RSX.

82
00:06:19,810 --> 00:06:23,000
And this is totally valid too, if you want to make it sex.

83
00:06:23,530 --> 00:06:32,350
But because every single Riak component that we have inside of Our Gatsby folder is a file for consistency

84
00:06:32,350 --> 00:06:33,250
sake, we'll just use.

85
00:06:34,510 --> 00:06:39,550
Bable knows that if you have react inside of your JavaScript, it will convert it to regular JavaScript.

86
00:06:39,760 --> 00:06:40,860
So it's not a big issue.

87
00:06:41,020 --> 00:06:41,840
It'll still work.

88
00:06:42,430 --> 00:06:46,390
So here we're just going to say blog post dot James.

89
00:06:47,510 --> 00:06:53,060
Now, because this video is getting too long, let's just break this up and continue this inside of

90
00:06:53,060 --> 00:06:54,320
our next lesson.
