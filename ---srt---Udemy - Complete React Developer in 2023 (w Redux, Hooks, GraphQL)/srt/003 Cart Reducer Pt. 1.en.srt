1
00:00:00,590 --> 00:00:01,610
Welcome back, everyone.

2
00:00:02,480 --> 00:00:08,540
In this video, we are going to migrate the car context over from using you state and use the fact to

3
00:00:08,540 --> 00:00:09,590
use reducer.

4
00:00:10,710 --> 00:00:17,280
So I want to discuss use reducer strategies when it comes to migrating some of these more complicated

5
00:00:17,280 --> 00:00:18,660
contexts like we have.

6
00:00:19,630 --> 00:00:21,010
To quickly go over what we did.

7
00:00:21,490 --> 00:00:30,100
We know that primarily inside of our car provider, we have a bunch of use states that track for individual

8
00:00:30,100 --> 00:00:33,220
values that we then read from the car context.

9
00:00:33,580 --> 00:00:37,330
These are the is cart open, the car items, the cart count and the cart total.

10
00:00:38,080 --> 00:00:44,470
What we've determined is that we are exporting out from this context different methods that a user can

11
00:00:44,470 --> 00:00:50,080
fire or a developer can fire in order to update the current cart items.

12
00:00:50,440 --> 00:00:57,490
And then whenever these car items get updated, what we do is we then also derive new car count and

13
00:00:57,490 --> 00:01:02,260
new car total and then respectively set them from their use state setter functions.

14
00:01:03,340 --> 00:01:11,050
So what we need to do instead with a reducer is we want to extrapolate out these four readable values

15
00:01:11,380 --> 00:01:18,670
into a reducer because reducers only, only, only store readable values.

16
00:01:19,820 --> 00:01:21,650
So how are we going to do this?

17
00:01:23,020 --> 00:01:28,360
Well, first, what we need to do is we need to think about the shape of our final output.

18
00:01:28,600 --> 00:01:33,790
So the easiest way to do that is to actually create the initial state object first.

19
00:01:34,150 --> 00:01:40,450
And this initial state object is going to include all of the readable values that we currently have

20
00:01:40,450 --> 00:01:47,320
inside of our context, because the context is just storing these values individually inside of their

21
00:01:47,320 --> 00:01:47,680
own.

22
00:01:47,920 --> 00:01:51,250
You state they also already have their default values.

23
00:01:51,400 --> 00:01:57,460
So this initial state just gives us the object that we need to keep track of when it comes to what our

24
00:01:57,640 --> 00:01:59,380
actual reducer should return.

25
00:02:00,160 --> 00:02:01,840
So let's create that reducer now.

26
00:02:02,290 --> 00:02:04,300
This is going to be our cart reducer.

27
00:02:04,480 --> 00:02:09,880
And as you remember, it's a function that gets the state as well as the action object.

28
00:02:11,680 --> 00:02:16,720
And then what we need to do is we need to structure off the two properties that come on the action,

29
00:02:16,840 --> 00:02:18,640
which are the type and the payload.

30
00:02:22,450 --> 00:02:28,000
Once we have the type and payload, now we determine with these two values from the action, what do

31
00:02:28,000 --> 00:02:30,760
we need to return as the updated state?

32
00:02:31,860 --> 00:02:37,740
So here, when we start thinking about this, oftentimes, you know, you need a reducer and it gets

33
00:02:37,740 --> 00:02:38,580
a little confusing.

34
00:02:38,910 --> 00:02:41,280
So it's important that you just set up the reducer first.

35
00:02:41,550 --> 00:02:45,390
You know, you need a switch statement and the switch is going to be off the type, you know, that

36
00:02:45,390 --> 00:02:46,830
you're going to have some default.

37
00:02:46,830 --> 00:02:53,460
And the default is most likely always going to be us throwing a new era where the error is going to

38
00:02:53,460 --> 00:02:55,730
be us saying un handled.

39
00:02:56,790 --> 00:03:02,400
Type of and then the type in heart reducer.

40
00:03:03,090 --> 00:03:08,130
And the reason, of course, as we do this is because our cart reducer should only be receiving actions

41
00:03:08,130 --> 00:03:09,810
that we have accounted for.

42
00:03:10,290 --> 00:03:13,710
If there is for some reason, we're getting an action that we have not accounted for.

43
00:03:14,400 --> 00:03:19,440
While we shouldn't be receiving that action, or it tells us that we have written code that we have

44
00:03:19,440 --> 00:03:25,080
not covered, if we're expecting this reducer to receive an action and we need to respond to it appropriately.

45
00:03:26,300 --> 00:03:26,860
After this.

46
00:03:26,870 --> 00:03:28,790
Now we need to think about our cases.

47
00:03:29,480 --> 00:03:34,670
So when you think about the case of what you're going to do in your reducer, here is a very important

48
00:03:34,670 --> 00:03:37,520
distinction about your reducer and a best practice as well.

49
00:03:38,030 --> 00:03:45,140
Your reducer should not handle any business logic, meaning that inside of a reducer, if we were to

50
00:03:45,140 --> 00:03:50,870
receive some items, some of you might be thinking, Oh, let me just create actions, for example,

51
00:03:51,080 --> 00:03:53,480
like an add to cart action.

52
00:03:54,080 --> 00:04:00,920
And this action should receive or should be in the shape of the action object or the type, let's just

53
00:04:00,920 --> 00:04:02,930
say is add to cart like this.

54
00:04:06,040 --> 00:04:11,170
And then the item that I'm adding as the payload is going to be the item to add.

55
00:04:11,860 --> 00:04:16,030
Let's just assume that this might be a valid way to create this action.

56
00:04:16,540 --> 00:04:20,380
There is no problem with us dispatching out an action like this.

57
00:04:22,260 --> 00:04:25,050
This is perfectly readable code.

58
00:04:25,950 --> 00:04:31,170
But the reason why you don't want to do this is because now inside of your reducer, your reducer,

59
00:04:31,170 --> 00:04:36,240
in order to appropriately respond to this, might have to be something like this.

60
00:04:38,780 --> 00:04:43,670
Well, what you do is you then inside say, okay, I need to figure out what these new car items are.

61
00:04:43,700 --> 00:04:45,500
So that's the add card item.

62
00:04:46,730 --> 00:04:53,210
So I might say something like return back, of course, but their state and then car items points to

63
00:04:53,210 --> 00:05:00,540
add to cart item and then the payload as we know, the payload is the item to add and then add to cart.

64
00:05:00,560 --> 00:05:06,560
In fact, we can even here we know that our add cart item needs also the cart items.

65
00:05:07,370 --> 00:05:12,620
So we can even just say, hey, give me the state BCAA items that is currently there.

66
00:05:13,580 --> 00:05:14,840
And then, of course, pass the payload.

67
00:05:15,620 --> 00:05:21,710
Now, this logic may work, but the problem is that this makes your reducer a lot harder to read.

68
00:05:22,460 --> 00:05:27,200
So what you should do instead is actually make it so that your payload should already be whatever you

69
00:05:27,200 --> 00:05:27,950
need to update.

70
00:05:28,550 --> 00:05:34,400
Because now, if you think about it inside of add to CART, we also need to update the cart total.

71
00:05:36,950 --> 00:05:37,790
And the cart count.

72
00:05:38,880 --> 00:05:39,980
So how are we going to do this?

73
00:05:41,610 --> 00:05:47,400
We're going to write additional logic to take the output of this item inside of this code somewhere

74
00:05:47,790 --> 00:05:52,590
so that we can conditionally decide, Oh, we need cart totals and the cart total is going to take this

75
00:05:52,590 --> 00:05:57,960
car items, reduce function off of the new items we're getting in which we receive back from add to

76
00:05:57,960 --> 00:05:58,440
cart item.

77
00:05:58,560 --> 00:06:01,200
You see how it already gets really convoluted.

78
00:06:01,200 --> 00:06:05,820
We have to figure out all these conditional checks so that the right logic is happening here.

79
00:06:06,090 --> 00:06:06,420
Right.

80
00:06:06,900 --> 00:06:14,100
You can see how we do new items like this is equal to add items to cart and then of course we need to

81
00:06:14,100 --> 00:06:15,660
get the new cart total.

82
00:06:17,530 --> 00:06:19,820
Like this is equal to new items.

83
00:06:20,080 --> 00:06:22,150
Reduce as we wrote before.

84
00:06:23,080 --> 00:06:25,270
And we just have to then update it here.

85
00:06:25,270 --> 00:06:29,470
But this makes your reducer, as you can see, really bloated and hard to read.

86
00:06:30,510 --> 00:06:34,650
This makes it very difficult as well for us to make these changes, because you can imagine if we had

87
00:06:34,650 --> 00:06:39,570
multiple case statements, we're looking at a giant reducer function and we want to keep our functions

88
00:06:39,570 --> 00:06:41,700
as light and tight as possible.

89
00:06:41,880 --> 00:06:48,000
Even if the reducer functions, all this reducer should care about is really just updating the state.

90
00:06:48,300 --> 00:06:54,030
It should not worry about anything regarding how to update that state, as in like what values, what

91
00:06:54,030 --> 00:06:56,250
business logic that state should end up in.

92
00:06:56,730 --> 00:06:58,560
Instead, that should all be passed to us.

93
00:06:58,650 --> 00:07:03,360
Our reducer should simply be the one saying, Hey, I got some payload, I'm going to update it with

94
00:07:03,360 --> 00:07:04,380
the appropriate values.

95
00:07:05,040 --> 00:07:09,150
So to do that, what we need to do is split up some of this logic.

96
00:07:09,960 --> 00:07:14,940
So to split the logic, you want to think about dispatching an action that already includes all of the

97
00:07:14,940 --> 00:07:16,320
values that this needs.

98
00:07:17,160 --> 00:07:20,370
Now, before we start thinking about it being add to CART, that was just my example.

99
00:07:20,580 --> 00:07:21,960
You want to think about the type here.

100
00:07:22,680 --> 00:07:24,270
What's the type of action we want to set?

101
00:07:25,140 --> 00:07:30,540
Well, we can actually take inspiration from what we've written here inside of our typical hook based

102
00:07:30,540 --> 00:07:30,870
flow.

103
00:07:32,240 --> 00:07:38,480
We have these values that we get from state and then what we do is we respond when the items update

104
00:07:38,840 --> 00:07:45,140
so that we actually generate the new total and we generate the new cart count and then we set them respectively.

105
00:07:45,770 --> 00:07:52,790
So instead, technically, we could include cart count, cart total and the new items all inside of

106
00:07:52,790 --> 00:07:53,510
one action.

107
00:07:54,020 --> 00:07:57,170
And as we can tell, based on our logic, it's generic.

108
00:07:57,170 --> 00:08:03,140
If cart items changes, then we generate a new count, whether it's clearing an item from the cart,

109
00:08:03,320 --> 00:08:09,020
whether it's adding a quantity to a cart item, whether it's decreasing the quantity of a cart item,

110
00:08:09,560 --> 00:08:13,400
the cart count function and the cart total functions are all generic enough.

111
00:08:13,790 --> 00:08:18,890
It's really these actual adding, removing and clearing that are unique.

112
00:08:19,610 --> 00:08:27,950
So in this case, what we can do is we can actually create a generic action that says, Hey, whenever

113
00:08:28,070 --> 00:08:35,000
cart items get set, then what I want you to do, I want you to update the state with the payload.

114
00:08:35,390 --> 00:08:40,070
And this payload is going to contain the shape that we want.

115
00:08:40,130 --> 00:08:43,820
So it's going to have the car items on it or the new card items.

116
00:08:44,180 --> 00:08:46,490
It's going to have the car count on it.

117
00:08:46,760 --> 00:08:49,490
And it's also going to have the cart total.

118
00:08:49,820 --> 00:08:53,330
And these are all going to be the new values that we finally want to store.

119
00:08:53,810 --> 00:08:56,750
And that's what we should do inside of this code.

120
00:08:57,470 --> 00:09:04,100
So that is going to be my challenge to figure out how to create a new function that can encapsulate

121
00:09:04,100 --> 00:09:09,560
all this so that you can dispatch a correct action that will then update according to what we've written

122
00:09:09,560 --> 00:09:09,800
here.

123
00:09:10,960 --> 00:09:12,310
So give a crack at that.

124
00:09:12,490 --> 00:09:15,040
You're going to have to write the function in here.

125
00:09:15,400 --> 00:09:20,890
And just to give you a bit of a hint, it's going to be something I like to call it, something like

126
00:09:20,890 --> 00:09:22,840
update card items, reducer.

127
00:09:23,740 --> 00:09:28,330
This is a function that is just going to receive the new card items.

128
00:09:29,310 --> 00:09:31,830
You can even call them new car items if you want to be explicit.

129
00:09:32,310 --> 00:09:36,990
And what they're going to do is they're going to have to utilize the code we already have inside of

130
00:09:36,990 --> 00:09:37,620
our effects.

131
00:09:38,600 --> 00:09:41,300
And then respectively update the actual.

132
00:09:42,490 --> 00:09:43,300
Reduce our value.

133
00:09:44,050 --> 00:09:45,220
Where you call this function.

134
00:09:45,640 --> 00:09:46,840
That's my challenge to you as well.

135
00:09:47,560 --> 00:09:48,370
So figure out.

136
00:09:48,460 --> 00:09:52,480
Based on what I've mentioned here, how you're going to split up this logic and write out this function.

137
00:09:53,260 --> 00:09:55,120
And then next video, we'll do it together.

138
00:09:55,510 --> 00:09:56,470
I'll see you in the next video.
