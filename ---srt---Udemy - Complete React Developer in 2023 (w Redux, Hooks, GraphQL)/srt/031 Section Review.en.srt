1
00:00:01,030 --> 00:00:02,840
Hey, it's Bruno here.

2
00:00:03,130 --> 00:00:05,860
This is fantastic.

3
00:00:06,040 --> 00:00:10,900
I can't believe how many tests you wrote, and then I'm looking forward to not having as many bugs in

4
00:00:10,900 --> 00:00:11,470
our app.

5
00:00:11,770 --> 00:00:13,090
Really thankful for your work.

6
00:00:13,090 --> 00:00:17,680
And, you know, I hope you understand that I really value your contribution to our team.

7
00:00:18,130 --> 00:00:19,480
KeyCorp, thanks you.

8
00:00:21,500 --> 00:00:29,840
All right, we finished a pretty tough section, I think testing is one of those things that can really

9
00:00:29,840 --> 00:00:33,670
stun people and can really frustrate you as well.

10
00:00:34,820 --> 00:00:40,850
But we're no longer junior developers here when it comes to testing, we understand their purposes and

11
00:00:40,850 --> 00:00:41,750
their limitations.

12
00:00:42,780 --> 00:00:50,280
We learned that there are three main types of tests which are unit tests, integration tests, automation

13
00:00:50,280 --> 00:01:01,080
tests, and that out of all these three unit tests are the easiest to write and also the cheapest for

14
00:01:01,080 --> 00:01:05,360
companies to use as a tool for us to minimize bucks.

15
00:01:06,740 --> 00:01:12,950
And you usually want to run unit tests with integration tests completely separate in a separate process

16
00:01:13,040 --> 00:01:14,990
from something like automation test.

17
00:01:16,080 --> 00:01:20,700
A topic that can get pretty complicated, but luckily for us, there's a ton of libraries that we can

18
00:01:20,700 --> 00:01:20,940
use.

19
00:01:22,500 --> 00:01:27,240
We also learned all the tools that are available in the ecosystem for us to test.

20
00:01:27,810 --> 00:01:32,310
At the end of the day, though, they're all very similar and they all try to accomplish the same thing,

21
00:01:32,610 --> 00:01:40,560
simply test our code, assert some statements, run these tests, maybe spy on some functions, and

22
00:01:40,560 --> 00:01:45,810
then see the output, make sure they pass and make sure that we have a good code coverage.

23
00:01:46,770 --> 00:01:52,770
But we also learned that having a perfect code coverage isn't necessarily what you want to do.

24
00:01:53,610 --> 00:01:58,530
You never want to just strive for 100 percent code coverage, because at the end of the day, those

25
00:01:58,530 --> 00:01:59,700
are just numbers.

26
00:01:59,880 --> 00:02:04,050
Everything depends on your application and what your goals are.

27
00:02:05,470 --> 00:02:07,220
So be careful with code coverage.

28
00:02:07,570 --> 00:02:12,640
It's really easy to get stuck in a hall where you're just writing tests that aren't good, but you are

29
00:02:12,640 --> 00:02:18,070
just trying to get that 100 percent focus on the quality of the test versus the quantity.

30
00:02:19,640 --> 00:02:26,960
We learn how tests can be run in different environments, and we also learned that React has enzymes

31
00:02:26,970 --> 00:02:30,940
and snapshot testing to really help us out with component rendering.

32
00:02:31,730 --> 00:02:34,400
They all made writing tests a lot simpler.

33
00:02:35,550 --> 00:02:44,910
Finally, we have a better idea of the testing environment tests are simply a way for us to use in development

34
00:02:45,390 --> 00:02:52,140
to make sure that our code, as it grows, is maintainable and produces less bugs.

35
00:02:52,180 --> 00:02:56,910
As more people join the team and more people touch the code and code lines increase.

36
00:02:57,900 --> 00:03:04,200
Using all the tools that we have at our disposal, we're able to be smart about the tests that we write.

37
00:03:05,450 --> 00:03:10,730
We're focusing on what is important to test, what are the key features of our apps that we want to

38
00:03:10,730 --> 00:03:18,710
make sure we test properly and we want to make sure that these tests are not complicated.

39
00:03:19,010 --> 00:03:20,810
They're very nice and readable.

40
00:03:20,810 --> 00:03:24,950
So if anybody comes onto the team, they understand what the tests do.

41
00:03:25,760 --> 00:03:34,580
Remember, if a test becomes complicated, perhaps there's something in your actual code that could

42
00:03:34,580 --> 00:03:35,180
be fix.

43
00:03:36,290 --> 00:03:40,270
Don't think of tests as something that you do after you finish all your code.

44
00:03:40,370 --> 00:03:46,100
Some people actually enjoy doing them before you write your real code so that it gives you ideas of

45
00:03:46,100 --> 00:03:49,730
how to structure your code in a nice, clean fashion.

46
00:03:50,650 --> 00:03:51,790
So think about this.

47
00:03:53,110 --> 00:04:01,330
Make tests that are of good quality, not just quantity, and write your code so that they're in nice,

48
00:04:01,480 --> 00:04:03,850
simple, testable units.

49
00:04:05,610 --> 00:04:06,700
Good job getting this far.

50
00:04:07,470 --> 00:04:08,600
I'll see you in the next election.

51
00:04:09,450 --> 00:04:09,800
Bye bye.
