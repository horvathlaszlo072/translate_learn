1
00:00:00,520 --> 00:00:01,570
Welcome back, everyone.

2
00:00:01,960 --> 00:00:06,250
So here is the website that we want to use in order to get our list of users.

3
00:00:07,180 --> 00:00:13,360
The website will display all of this as JSON, which is pretty much just objects of users with certain

4
00:00:13,750 --> 00:00:14,710
attributes on them.

5
00:00:15,160 --> 00:00:19,330
So there's an idea, there's a name, there's a username, there's email, there's address, and then

6
00:00:19,330 --> 00:00:21,460
there's some other extra information.

7
00:00:21,940 --> 00:00:23,860
Well, we really care about for now is just that.

8
00:00:23,860 --> 00:00:24,940
There's a name and there's an ID.

9
00:00:25,300 --> 00:00:30,250
We need the name to display and we need the I.D. because it is the key I fully remember.

10
00:00:31,520 --> 00:00:36,170
So what we're going to do is we are going to make a request to this website, which will give us back

11
00:00:36,170 --> 00:00:39,740
this array of JSON objects so very easy.

12
00:00:40,070 --> 00:00:44,840
If you want this, it's actually going to be in your Reasons folder, so it's very easy to access.

13
00:00:45,290 --> 00:00:50,870
And what I want you to do is I want you to copy this and then what we need to do now is figure out how

14
00:00:50,870 --> 00:00:54,260
to bring this array into our React application.

15
00:00:55,170 --> 00:01:00,270
So let's go back to our application and let's think about a couple of things that we need to do before

16
00:01:00,270 --> 00:01:01,320
we even start coding it.

17
00:01:02,190 --> 00:01:08,280
First off, what we need to do is think about where we're going to leverage the actual array once we

18
00:01:08,280 --> 00:01:09,900
get it inside component.

19
00:01:10,470 --> 00:01:12,990
We've actually already thought about this with our monsters array.

20
00:01:13,440 --> 00:01:19,080
So what we want to do is we want to update the state of monsters to the array of users.

21
00:01:19,110 --> 00:01:23,550
Once we get them from the API, here we have some hardcoded values.

22
00:01:23,550 --> 00:01:29,340
But in reality, I actually don't want that because when you think about it, why would I want to use

23
00:01:29,340 --> 00:01:30,760
any hardcoded values at all?

24
00:01:30,780 --> 00:01:33,030
I just want to use what values come from the API.

25
00:01:33,810 --> 00:01:39,510
My application should not have to worry about what that data looks like or not what it looks like,

26
00:01:39,510 --> 00:01:44,700
but whether or not I get how much data, that's not something our application should be largely concerned

27
00:01:44,700 --> 00:01:44,970
with.

28
00:01:45,630 --> 00:01:49,080
Of course, there are certain things like there are edge cases where if it's empty, do you want to

29
00:01:49,080 --> 00:01:54,450
display some kind of message that tells the user that there are no users that have been fetched?

30
00:01:54,870 --> 00:01:55,440
Perhaps.

31
00:01:55,620 --> 00:01:57,060
But that's not what I'm talking about here.

32
00:01:57,570 --> 00:02:00,540
I'm talking about the initial state of this monster's array.

33
00:02:01,170 --> 00:02:08,760
If you think about it, if you have an application that makes a request for a bunch of users, if you,

34
00:02:09,060 --> 00:02:14,010
let's say, fail in the middle of that API request, let's say your network cuts off or there some corrupted

35
00:02:14,010 --> 00:02:16,440
data or something that is not related to our application.

36
00:02:16,860 --> 00:02:18,160
What would you want to do?

37
00:02:18,180 --> 00:02:20,490
What would it matter for a user to see?

38
00:02:21,510 --> 00:02:27,930
The user should not see anything that they should just see the fact that there is an empty array, meaning

39
00:02:27,930 --> 00:02:31,200
that nothing should display them because nothing was properly fetched.

40
00:02:31,440 --> 00:02:35,100
That is the typical behavior of most applications.

41
00:02:35,430 --> 00:02:40,470
So in this case with our states, we want to think about what's known as the empty case or the null

42
00:02:40,470 --> 00:02:40,860
case.

43
00:02:41,160 --> 00:02:46,110
So what happens when you have an initialized state or when you have a state that has nothing in it?

44
00:02:46,500 --> 00:02:48,000
So I'm told about these state variables.

45
00:02:48,000 --> 00:02:52,050
Of course, a monster's here is a list of users.

46
00:02:52,890 --> 00:02:54,420
So what's an empty version of that?

47
00:02:54,630 --> 00:02:57,120
Well, it's an empty list or an empty array.

48
00:02:57,510 --> 00:03:00,330
So we want to initialize these values as empty.

49
00:03:01,680 --> 00:03:07,050
Once this is empty, now, what I want to do is I want to actually get that list of users.

50
00:03:07,440 --> 00:03:12,240
And the way I'm going to do that is I need to think, when do I get the list?

51
00:03:12,450 --> 00:03:13,950
How do I get the list?

52
00:03:14,160 --> 00:03:15,390
Where do I put the list?

53
00:03:15,630 --> 00:03:17,520
We already talked about where it's going to be in our state.

54
00:03:17,880 --> 00:03:19,110
But how do I get the lists?

55
00:03:20,320 --> 00:03:25,360
This is actually where React is going to give us these things known as lifecycle methods.

56
00:03:26,110 --> 00:03:30,310
So when you think about a component, I've always mentioned that a components key thing and react is

57
00:03:30,310 --> 00:03:33,400
just figuring out when it renders and when it re-enters.

58
00:03:33,760 --> 00:03:42,550
So if our monster's array is empty, when we get the new list of array from our API, we want to update

59
00:03:42,550 --> 00:03:46,240
the state object and therefore we want to re render this component.

60
00:03:46,840 --> 00:03:54,070
But when do we want to get that information we want to get at the moment the app is actually mounted

61
00:03:54,070 --> 00:04:01,420
or the moment it's rendered by React because we want to display the users as soon as possible in order

62
00:04:01,420 --> 00:04:02,080
to do that.

63
00:04:02,110 --> 00:04:08,320
We leverage lifecycle methods on this component class that reactor's given us, and these different

64
00:04:08,320 --> 00:04:12,370
methods are listed here, you'll see in my dropdown.

65
00:04:13,430 --> 00:04:18,170
There's a bunch of them, but the most important one is really component did Mount and component did

66
00:04:18,170 --> 00:04:23,150
update and probably also come on at will on Mount, but we'll talk about these a little later.

67
00:04:23,150 --> 00:04:25,190
We'll focus on component did Mount.

68
00:04:26,530 --> 00:04:32,470
So component amount is a method that you have access to and inside, you want to write your coat and

69
00:04:32,470 --> 00:04:36,130
whatever you right here will get run whenever the component mounts.

70
00:04:36,640 --> 00:04:40,810
Mounting is the first time a component gets placed onto the top.

71
00:04:41,080 --> 00:04:45,670
So the first time React renders a component onto the page that is mounting.

72
00:04:45,760 --> 00:04:49,480
It only happens once through a components life.

73
00:04:49,930 --> 00:04:57,400
The only time when a component might reach mount is if it's been on Mount it, meaning it's been completely

74
00:04:57,400 --> 00:05:00,940
removed from the dome, and you could almost argue that it's a different component.

75
00:05:01,060 --> 00:05:05,980
It might be the same app component or the same component we're using, but it's a new instance of it.

76
00:05:06,610 --> 00:05:10,930
So we'll talk more about that as well as we start building out a more complex application.

77
00:05:11,170 --> 00:05:16,300
But for now, just understand that the moment your component gets placed onto the DOM is when you want

78
00:05:16,300 --> 00:05:20,710
to make an API request for something like users, because that's when you want to get that information

79
00:05:20,710 --> 00:05:22,570
so we can display it as soon as possible.

80
00:05:22,930 --> 00:05:28,540
So remember, if you need to make an API request so that your component can have the appropriate data

81
00:05:28,540 --> 00:05:31,660
it needs in order to render the appropriate things.

82
00:05:32,050 --> 00:05:34,540
That's when you want to put it in component that mount.

83
00:05:35,470 --> 00:05:36,860
So instead of component that mounts.

84
00:05:36,880 --> 00:05:39,340
How do we actually fetch from that API?

85
00:05:39,880 --> 00:05:42,760
Well, we're going to use the native fetch and native fetch.

86
00:05:42,760 --> 00:05:48,180
What we do is we give it the URL that we need in order to get that JSON.

87
00:05:48,190 --> 00:05:50,990
So here I'm going to paste that in again.

88
00:05:51,010 --> 00:05:52,660
You'll find that in your resources folder.

89
00:05:53,410 --> 00:06:01,420
Once we fetch this, this is going to be a promise, and a promise is something that is asynchronous

90
00:06:01,420 --> 00:06:02,230
in JavaScript.

91
00:06:02,740 --> 00:06:06,970
It's essentially a promise that eventually I'm going to have a value.

92
00:06:07,630 --> 00:06:12,910
We can talk more about promises in a video in the appendix, where if you're not really familiar with

93
00:06:12,910 --> 00:06:17,500
it, it's a good time to watch that after this video so that you can get a deeper understanding.

94
00:06:17,830 --> 00:06:22,120
But all you need to know is that what's going to happen is JavaScript is going to fetch what data it

95
00:06:22,120 --> 00:06:23,200
can from here.

96
00:06:23,530 --> 00:06:29,770
If it succeeds, it's going to come back and then we can call then on that value, meaning that now

97
00:06:29,770 --> 00:06:37,750
we have a response back from that API request and this we want to pass a callback where the argument

98
00:06:37,780 --> 00:06:39,130
is the response itself.

99
00:06:39,790 --> 00:06:41,170
So the response that they give us.

100
00:06:41,200 --> 00:06:42,280
Let's take a quick look at it.

101
00:06:43,610 --> 00:06:45,500
So I want you to see what we're going to get.

102
00:06:47,460 --> 00:06:48,810
We're going to go to our application.

103
00:06:49,620 --> 00:06:51,270
We're going to open up our console.

104
00:06:52,730 --> 00:06:56,740
And again, it's empty because you remember I took out all the monsters, so there's nothing in our

105
00:06:56,750 --> 00:06:57,320
natural state.

106
00:06:57,860 --> 00:07:03,620
But here we got a response back and inside you see, it's just this object and it has a lot of stuff

107
00:07:03,620 --> 00:07:03,800
in it.

108
00:07:03,800 --> 00:07:08,270
There's headers and there's like the status of whether or not it was successful, which it was.

109
00:07:08,870 --> 00:07:10,910
There's the URL in which we fetched it from.

110
00:07:11,420 --> 00:07:15,800
But primarily what we want is we want this in JSON format.

111
00:07:16,190 --> 00:07:20,060
So what we're going to say is that, OK, I want you to return from this dot then.

112
00:07:24,750 --> 00:07:33,780
This response, Dodgson, some converting this over into Jason, and this is what is being returned

113
00:07:34,590 --> 00:07:35,520
from the start that.

114
00:07:36,970 --> 00:07:42,010
Every day then that returns, a value is going to return another promise that has been resolved.

115
00:07:42,040 --> 00:07:44,830
So here I can actually say then again.

116
00:07:45,370 --> 00:07:48,370
And what I have now is the users.

117
00:07:49,560 --> 00:07:51,870
And let's just quickly console.log this as well.

118
00:07:53,830 --> 00:07:59,800
So remember, whatever got returned from response that Jason is going to get passed to this users as

119
00:07:59,800 --> 00:08:01,240
the argument of our call back.

120
00:08:01,480 --> 00:08:03,700
So if I save this, I come here.

121
00:08:04,940 --> 00:08:05,600
There we see it.

122
00:08:06,750 --> 00:08:08,910
If I just refresh just so you're familiar.

123
00:08:09,930 --> 00:08:14,130
You'll see that this is the array of the users that we got from Jason Placeholder.

124
00:08:15,100 --> 00:08:16,300
It's exactly what we're expecting.

125
00:08:17,320 --> 00:08:22,960
So now that we have this, let's actually get this in our state, which we can do using said state as

126
00:08:22,960 --> 00:08:23,650
we've done before.

127
00:08:24,310 --> 00:08:25,960
So let's get rid of this console.log.

128
00:08:26,110 --> 00:08:32,890
And instead, what we're going to say is this starts at state and here you can either pass at the object

129
00:08:32,890 --> 00:08:36,610
where monsters points to users or you can use the function method.

130
00:08:37,120 --> 00:08:42,910
So I'm going to use the function method and I'm going to return back an object where monsters now points

131
00:08:42,910 --> 00:08:43,540
to users.

132
00:08:44,440 --> 00:08:48,910
And the reason why I want to use this function method is just so that I can also pass it.

133
00:08:48,910 --> 00:08:56,800
The callback when this set state is finished, just so that I can make sure that my state has the correct

134
00:08:56,800 --> 00:08:57,190
value.

135
00:08:58,410 --> 00:09:06,540
So now, if we go back to our code, what we see is that we do indeed have all of our users in here.

136
00:09:07,050 --> 00:09:07,860
Let me refresh.

137
00:09:08,100 --> 00:09:14,190
And we also see that we are logging out our new state with the appropriate monsters, with the appropriate

138
00:09:14,190 --> 00:09:14,730
values.

139
00:09:15,750 --> 00:09:17,190
So everything here is working.

140
00:09:18,500 --> 00:09:24,260
And the key thing I want you to focus on and what we learned was that whenever we have a component,

141
00:09:24,380 --> 00:09:30,740
a class component specifically, that needs to leverage some kind of API call in order to get data that

142
00:09:30,740 --> 00:09:36,560
it needs in order to display the appropriate UI, you want to put that inside of your component.

143
00:09:36,560 --> 00:09:38,150
Did Mount lifecycle method.

144
00:09:38,960 --> 00:09:43,010
Now there are definitely more lifecycle methods that will cover in later lessons.

145
00:09:43,370 --> 00:09:49,040
For now, though, I just want you to focus on component at Mount and mounting of the component in the

146
00:09:49,040 --> 00:09:49,840
next video.

147
00:09:49,850 --> 00:09:55,310
I'm going to go a little deeper into these three methods that we've seen, which is the constructor

148
00:09:55,520 --> 00:10:00,740
component and mount and the render method because there is an order here that is important when it comes

149
00:10:00,740 --> 00:10:06,080
to how this component is getting added and react, determining when to run the code inside each of these.

150
00:10:06,620 --> 00:10:12,020
So in the next video, we'll cover that so that you can understand deeper how a class component works.

151
00:10:12,470 --> 00:10:13,340
See in the next video.
