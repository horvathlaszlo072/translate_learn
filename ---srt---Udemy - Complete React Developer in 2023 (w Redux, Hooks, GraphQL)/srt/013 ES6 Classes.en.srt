1
00:00:01,530 --> 00:00:01,990
All right.

2
00:00:02,040 --> 00:00:04,320
We've gone closer and closer.

3
00:00:04,830 --> 00:00:08,850
Let's reach ultimate object oriented programming in JavaScript.

4
00:00:10,060 --> 00:00:14,890
We have our constructor functions that well, we're a little funny.

5
00:00:15,370 --> 00:00:18,970
Nobody really like the prototype ways of adding methods.

6
00:00:19,540 --> 00:00:26,890
So with iOS six, JavaScript finally got the class keyword.

7
00:00:27,880 --> 00:00:32,980
Object oriented programming was created with the class idea in mind.

8
00:00:33,010 --> 00:00:37,120
A class being a blueprint of what we want created.

9
00:00:37,630 --> 00:00:43,900
Let's see how this works with the new E-6 classes.

10
00:00:44,920 --> 00:00:46,240
We can now do this.

11
00:00:46,870 --> 00:00:52,060
We have the elf class that we just simply define like that.

12
00:00:52,720 --> 00:01:02,050
And then we have a constructor and then the constructor is something that gets run every time we instantiate

13
00:01:02,050 --> 00:01:04,240
or use the new key word on a class.

14
00:01:04,840 --> 00:01:07,540
So this goes inside over here.

15
00:01:09,370 --> 00:01:12,940
And we take in the name and weapon parameter.

16
00:01:14,980 --> 00:01:22,270
Now, the beauty with classes is that as object oriented programming suggests, we want to keep all

17
00:01:22,270 --> 00:01:28,840
our functionality inside of this box, all the properties, all the state, all the methods, all the

18
00:01:28,840 --> 00:01:35,320
actions together in a nice contained environment, a class, an object.

19
00:01:36,040 --> 00:01:44,710
So instead of having these in a separate location, I can now just simply add attack in here as part

20
00:01:44,710 --> 00:01:45,370
of our class.

21
00:01:45,880 --> 00:01:52,180
And this method can now act upon our state so I can just return.

22
00:01:55,090 --> 00:01:55,630
Right here.

23
00:01:56,960 --> 00:01:59,330
And I can get rid of this ugly prototype.

24
00:02:01,000 --> 00:02:02,230
How nice and easy was that?

25
00:02:03,380 --> 00:02:05,210
Let's see if this works, if I click run.

26
00:02:06,260 --> 00:02:08,270
Look at that, it's all working.

27
00:02:08,660 --> 00:02:10,490
How much cleaner is that?

28
00:02:11,360 --> 00:02:17,870
And if you're coming from an object oriented programming language like Java or C++, this is going to

29
00:02:17,870 --> 00:02:19,370
look really familiar to you.

30
00:02:20,330 --> 00:02:24,500
And this is the true beauty of object oriented programming.

31
00:02:24,980 --> 00:02:27,500
We're modeling real life scenarios.

32
00:02:27,890 --> 00:02:33,050
We're creating an elf class that is a blueprint of what we want elves to be like.

33
00:02:33,170 --> 00:02:40,850
Well, else have names, they have weapons and they can act upon these properties like attack or built.

34
00:02:40,850 --> 00:02:43,070
And we can just keep adding things here.

35
00:02:43,430 --> 00:02:50,150
And we have one location that holds this entire elf object.

36
00:02:50,780 --> 00:02:57,440
And any time we need to update something or change or add a method, we can just change it in here.

37
00:02:58,370 --> 00:03:02,450
And all the instances of the Elf will get that update.

38
00:03:04,030 --> 00:03:10,960
Now, I keep seeing this word instance, and this is a common term that you'll hear a lot when it comes

39
00:03:10,960 --> 00:03:12,710
to object oriented programming.

40
00:03:12,730 --> 00:03:20,890
And when we use classes, an instance happens when we call this class and create an object out of this

41
00:03:20,890 --> 00:03:21,340
class.

42
00:03:22,030 --> 00:03:26,790
So, for example, Peter is an instance of Elf.

43
00:03:27,460 --> 00:03:29,920
For example, if I do console dialog.

44
00:03:31,190 --> 00:03:36,920
And do Peter, and luckily for us, JavaScript has instance of.

45
00:03:38,500 --> 00:03:43,120
Then do Elf, if I click on here, I get true.

46
00:03:44,010 --> 00:03:46,110
Peter is an instance of Elf.

47
00:03:47,070 --> 00:03:47,910
So is Sam.

48
00:03:48,570 --> 00:03:53,700
But if I do Elf instance of Peter all get false.

49
00:03:56,010 --> 00:03:58,320
Because, well, it's the other way around.

50
00:03:59,100 --> 00:04:05,700
So instance of is this language that we can use an object oriented programming to say we're creating

51
00:04:05,700 --> 00:04:12,000
an instance of a class, this with the new keyword is called instantiation.

52
00:04:12,750 --> 00:04:14,610
We're instantiating a class.

53
00:04:15,510 --> 00:04:18,960
If I remove the key word from here, the new keyword and I click run.

54
00:04:19,740 --> 00:04:23,190
I see that Class Constructor Elf cannot be invoked without new.

55
00:04:23,460 --> 00:04:27,510
We even get a nice error saying, Hey, hey, we need we need new here.

56
00:04:27,570 --> 00:04:30,660
Don't forget new, which is really, really nice.

57
00:04:31,850 --> 00:04:33,870
All right, everybody, cheers.

58
00:04:33,890 --> 00:04:38,990
Get up, throw your chairs, throw your laptops, all right, don't throw your laptops, but we finally

59
00:04:39,140 --> 00:04:40,250
have classes.

60
00:04:40,250 --> 00:04:45,050
We finally have object oriented programming in JavaScript, right?

61
00:04:45,770 --> 00:04:47,570
Well, not really.

62
00:04:48,350 --> 00:04:51,920
You see, this is what we call syntactic sugar.

63
00:04:52,880 --> 00:04:57,800
Underneath the hood, in JavaScript, we're still using prototype inheritance.

64
00:04:58,340 --> 00:05:01,880
We're now using classes like classes work in other languages.

65
00:05:02,450 --> 00:05:08,220
This is the closest that JavaScript is going to get to classes underneath the hood.

66
00:05:08,240 --> 00:05:15,200
They're still using the new keyword with the prototype, and you're thinking to yourself, Well, why

67
00:05:15,200 --> 00:05:16,810
don't we just all this trouble?

68
00:05:16,820 --> 00:05:20,840
Why don't we just create classes from the beginning in JavaScript?

69
00:05:21,380 --> 00:05:25,970
Wouldn't it just make everything easier now, as we'll find out?

70
00:05:26,660 --> 00:05:32,810
Classes aren't necessarily the answer to everything as we'll see when we get to functional programming.

71
00:05:33,230 --> 00:05:39,950
But also, there's an interesting story or quote behind why JavaScript doesn't have classes.

72
00:05:40,730 --> 00:05:45,050
This is a quote from the creator Brendan Eich of JavaScript.

73
00:05:45,970 --> 00:05:52,240
If I had done classes in JavaScript back in 1995, I'd have been told that it was too much like Java

74
00:05:52,240 --> 00:05:58,090
or that JavaScript was competing with Java, and I was under the marketing orders to make it look like

75
00:05:58,090 --> 00:06:01,390
Java, but not make it too big for its britches.

76
00:06:01,990 --> 00:06:09,400
So the interesting thing was that Brendan Eich was tasked with creating a language that would attract

77
00:06:09,850 --> 00:06:15,670
Java developers that were really used to classes and object oriented programming concepts.

78
00:06:16,240 --> 00:06:21,880
But at the same time, they wanted to create a competing language and for marketing purposes, they

79
00:06:21,880 --> 00:06:23,470
could make it the exact same.

80
00:06:23,740 --> 00:06:25,330
So he had to be creative.

81
00:06:25,630 --> 00:06:32,500
So he used prototype inheritance, which is quite different from how classes work in languages like

82
00:06:32,500 --> 00:06:33,580
Java and C++.

83
00:06:34,090 --> 00:06:37,420
In other languages, classes are an actual thing.

84
00:06:37,780 --> 00:06:42,130
In JavaScript, classes are still just objects.

85
00:06:42,400 --> 00:06:44,410
Everything in JavaScript is an object.

86
00:06:44,950 --> 00:06:48,700
So in an interview, if you get asked, Hey, does JavaScript have classes?

87
00:06:49,120 --> 00:06:56,800
Well, yes, they do as syntactic sugar, but class keyword is still just prototype oil inheritance.

88
00:06:57,340 --> 00:07:04,360
And some people call this pseudo classical inheritance because it's not real classical inheritance.

89
00:07:05,260 --> 00:07:12,280
Looking at this, I hope you see, have we gone from repetitive code that was harder and harder to maintain

90
00:07:12,430 --> 00:07:15,190
to something that's a little bit more organized?

91
00:07:15,220 --> 00:07:23,230
We've created this grouping of functionality so that it's easier to maintain and extend.

92
00:07:23,620 --> 00:07:29,020
By the way, you may be asking yourself, why don't we just add a tack?

93
00:07:30,070 --> 00:07:34,720
To the constructor, why do we just put it outside over here?

94
00:07:35,440 --> 00:07:40,210
And this is actually a very interesting question that you might get in an interview.

95
00:07:41,750 --> 00:07:50,210
You see, every time we use the new keyword and create or instantiate a class, the constructor function

96
00:07:50,240 --> 00:07:57,590
gets run because this constructor function needs to get run because each elf has a unique name and perhaps

97
00:07:57,590 --> 00:08:03,020
a unique weapon, but attack is shared by all instances of the class.

98
00:08:04,540 --> 00:08:06,970
If we moved attack to the constructor.

99
00:08:08,130 --> 00:08:11,820
That's going to take up memory space, right?

100
00:08:13,500 --> 00:08:20,250
Instead of creating an attack function from each object, which is what we would do if we added to the

101
00:08:20,250 --> 00:08:22,620
constructor, and that's something that we've been trying to avoid.

102
00:08:23,370 --> 00:08:25,020
Instead, we just have one.

103
00:08:25,410 --> 00:08:30,090
One function in one location that all these instances can access.

104
00:08:30,960 --> 00:08:31,860
So there you have it.

105
00:08:32,610 --> 00:08:36,000
I hope you start to see the beauty in efficiency.

106
00:08:37,220 --> 00:08:41,060
Let's take a break and talk a little bit more about this in the next video.

107
00:08:41,450 --> 00:08:42,110
I'll see you on that one.

108
00:08:42,710 --> 00:08:43,100
Bye bye.
