1
00:00:00,420 --> 00:00:01,380
Welcome back, everyone.

2
00:00:02,410 --> 00:00:05,860
So the form input is going to be the most complicated thing to style.

3
00:00:06,280 --> 00:00:10,150
There's a couple of things we need to tweak, and there's a combination of all the little things that

4
00:00:10,150 --> 00:00:13,390
we've learned up into this point about stock components in order to make this work.

5
00:00:14,260 --> 00:00:20,320
So to start again, I've converted the file over to GSX and I'm importing and styled from style components.

6
00:00:21,780 --> 00:00:26,580
There's actually another thing we're going to need, which is called the CIUSSS block, and what really

7
00:00:26,580 --> 00:00:32,550
this allows us to do is encapsulate some success inside of a bloc that we can use as a variable and

8
00:00:32,550 --> 00:00:34,710
inject into our different components.

9
00:00:35,550 --> 00:00:40,830
The other thing is we need to convert these variables from SAS over into just regular JavaScript variables,

10
00:00:41,130 --> 00:00:48,390
so we can actually say some color is equal to the string grey and we can say the main colour is equal

11
00:00:48,390 --> 00:00:49,860
to the string black.

12
00:00:50,760 --> 00:00:55,560
So really, that's one thing about star components is that instead of using SAS variables, you can

13
00:00:55,560 --> 00:00:58,830
use regular JavaScript variables here for this mix.

14
00:00:58,830 --> 00:01:01,860
And this is what I'm going to call a concert of.

15
00:01:01,860 --> 00:01:07,830
Shrink label is equal to the CIUSSS block, and the KSAZ is also going to take back Tex.

16
00:01:08,310 --> 00:01:11,100
And inside the tactics is where you add the styling.

17
00:01:12,170 --> 00:01:18,560
So here they're styling instead of using main color like this, I'm going to use the JavaScript variable

18
00:01:18,560 --> 00:01:19,400
of main color.

19
00:01:20,340 --> 00:01:27,030
But here, really, what we did is we created those same Nixons and those CIUSSS variables as these

20
00:01:27,030 --> 00:01:28,620
new JavaScript tables.

21
00:01:29,040 --> 00:01:32,730
In fact, I'm going to call the shrink label styles so we know exactly what this is.

22
00:01:33,890 --> 00:01:38,210
Next, all we're going to do is we need to create this form input structure.

23
00:01:38,810 --> 00:01:46,580
So inside notice how we target a label, we target this label because we need specifically a way inside

24
00:01:46,580 --> 00:01:51,890
of this group styles whenever something happens, such as when we focus on it.

25
00:01:52,550 --> 00:01:55,160
So for this, I'm going to make this form label first.

26
00:01:55,170 --> 00:01:59,750
As I mentioned before, you want to pick the things that are going to be targeted later.

27
00:02:00,410 --> 00:02:03,740
So here what I need to make is this form input label.

28
00:02:04,160 --> 00:02:09,500
I'm going to say Konst form input label is equal to a style label.

29
00:02:11,040 --> 00:02:14,730
And inside, I'm just going to drop in all of these.

30
00:02:17,740 --> 00:02:26,350
Now here, a notice how instead what we use is the shrink class, so what we can do instead now is utilize

31
00:02:26,350 --> 00:02:28,090
a prop called shrink.

32
00:02:28,660 --> 00:02:34,330
So we would do a very similar thing, but instead remember what we trying to include, though, is shrink

33
00:02:34,330 --> 00:02:35,380
label styles.

34
00:02:36,040 --> 00:02:41,350
So what you can do is you can actually directly say, Hey, I'm going to access the props right here

35
00:02:42,010 --> 00:02:46,810
and I'm going to get off shrink, which instead of passing as a class name, we're going to pass it

36
00:02:46,810 --> 00:02:47,590
as a Boolean.

37
00:02:48,550 --> 00:02:54,820
And then I'm going to say, if shrink is true, then I want you to add in the shrink label styles,

38
00:02:55,180 --> 00:03:00,670
which means that when this is true, this entire line is going to evaluate to whatever is here.

39
00:03:00,680 --> 00:03:02,560
So this is just going to get applied like.

40
00:03:02,580 --> 00:03:07,330
So imagine if when this shrink value is true, then we have these three styles.

41
00:03:07,630 --> 00:03:09,010
Otherwise, we don't.

42
00:03:09,400 --> 00:03:10,960
So that's really what this line is saying.

43
00:03:11,440 --> 00:03:17,170
So again, very powerful, because now you can leverage your JavaScript inside of your style components.

44
00:03:17,740 --> 00:03:22,690
This becomes extremely flexible because now you have all of the flexibility that comes with JavaScript

45
00:03:22,690 --> 00:03:23,350
by default.

46
00:03:24,190 --> 00:03:27,610
We also want to make sure that we are using the correct sub color.

47
00:03:29,250 --> 00:03:31,230
And also that we are exporting this out.

48
00:03:32,270 --> 00:03:37,340
So now that we have our form label, the next thing we need to do is the inputs.

49
00:03:37,520 --> 00:03:38,630
So this form input.

50
00:03:40,080 --> 00:03:46,200
Here, I'm just going to call this input because our component is called form input and because, again,

51
00:03:46,230 --> 00:03:48,010
this is scoped within our component anyway.

52
00:03:48,060 --> 00:03:49,290
It really does not matter.

53
00:03:49,890 --> 00:03:53,100
So I'm going to call this style input.

54
00:03:54,770 --> 00:03:57,980
And here I'm just going to bring in all of these styles.

55
00:04:04,100 --> 00:04:08,900
So just like before, we need to make sure that anywhere where we're calling, we need to make sure

56
00:04:08,900 --> 00:04:11,810
that we use our own components here.

57
00:04:11,810 --> 00:04:16,190
In fact, I didn't wrap this either, because they're variables and we're working on strings.

58
00:04:16,550 --> 00:04:19,970
So whenever you need to use a variable, you need to remember to use interpolation.

59
00:04:21,110 --> 00:04:24,350
Oftentimes, I make this mistake, and it's hard to catch.

60
00:04:25,190 --> 00:04:27,410
So let's do that there as well for barter bottom.

61
00:04:28,070 --> 00:04:31,760
So now we don't have any more of those old SAS variables.

62
00:04:31,940 --> 00:04:32,930
Focus is fine.

63
00:04:33,470 --> 00:04:34,880
And here is what I was talking about.

64
00:04:35,210 --> 00:04:41,600
When you focus on this input, we want to find the immediate nearest sibling, subsequent sibling of

65
00:04:41,600 --> 00:04:46,280
the form input label, which we now have as a component so we can now target it.

66
00:04:47,790 --> 00:04:53,940
Using JavaScript as well, like so and then whenever this happens, well, we want us to do is we just

67
00:04:53,940 --> 00:04:57,670
want to add these shrink label styles like so.

68
00:04:58,230 --> 00:05:02,250
And now this will just essentially render those styles whenever this gets focused.

69
00:05:03,750 --> 00:05:06,690
And then the last thing we need is our group component.

70
00:05:07,320 --> 00:05:10,620
So our group component is probably not going to contain that much else.

71
00:05:11,040 --> 00:05:18,390
So I'm going to say group is equal to a stout div and what's remaining is these position.

72
00:05:20,070 --> 00:05:24,210
Values, as well as targeting input password like so.

73
00:05:28,790 --> 00:05:29,360
And that's it.

74
00:05:30,230 --> 00:05:35,360
We have now recreated everything that we need to interview style components.

75
00:05:36,080 --> 00:05:40,550
So now let's go back to our farm input component and let's actually utilize this.

76
00:05:41,570 --> 00:05:44,480
So instead, again, we need to re-import in.

77
00:05:46,300 --> 00:05:49,930
All of the new components we've made so form and put label.

78
00:05:50,890 --> 00:05:52,000
As well as input.

79
00:05:56,340 --> 00:06:00,060
And now we can start replacing, let's replace our of.

80
00:06:00,980 --> 00:06:01,730
With our group.

81
00:06:03,750 --> 00:06:07,710
Let's replace the inputs with our new form input.

82
00:06:10,080 --> 00:06:11,250
And now for the label.

83
00:06:12,440 --> 00:06:19,220
So our form input label, as I mentioned, we need to make sure that instead of using this shrink like

84
00:06:19,220 --> 00:06:27,920
so as a class name, we can now pass it as a value and this value is essentially just going to be equal

85
00:06:28,700 --> 00:06:30,140
to whatever we want it to be.

86
00:06:30,320 --> 00:06:35,060
So here I'm just going to know that, well, if I'm using length anyways and it's truthiness is being

87
00:06:35,060 --> 00:06:38,330
evaluated, I don't even need to do this ternary.

88
00:06:38,330 --> 00:06:45,560
I'm just going to directly pass the number in because if the number of the length is zero, then this

89
00:06:45,560 --> 00:06:46,310
will be false.

90
00:06:46,880 --> 00:06:54,290
If it's greater than zero, then I'll be true and shrink will be true inside of my actual shrink value

91
00:06:54,290 --> 00:06:54,650
prop.

92
00:06:55,400 --> 00:06:56,600
So let's just test this now.

93
00:06:57,020 --> 00:06:58,490
Let's come back to our application.

94
00:06:58,850 --> 00:07:03,590
Let's go to the sign in and there we see our form input is still working.

95
00:07:03,770 --> 00:07:04,790
The label is shrinking.

96
00:07:05,360 --> 00:07:06,170
Everything works.

97
00:07:06,860 --> 00:07:14,120
So here a lot of the complexity is just about thinking, OK, when I'm going to target these later inside

98
00:07:14,120 --> 00:07:17,450
of the styling, I need to make sure that I declare it beforehand.

99
00:07:17,450 --> 00:07:24,230
If this comes after this, there will actually not be a valid target when this is being evaluated.

100
00:07:24,530 --> 00:07:27,740
So that's an important thing to think about the order of your stock components.

101
00:07:28,130 --> 00:07:33,620
Otherwise, the other thing is just the fact that we are rendering a lot more JavaScript inside of this

102
00:07:33,620 --> 00:07:37,310
component, and it just is so much more flexible to do it this way.

103
00:07:38,210 --> 00:07:38,750
So that's it.

104
00:07:39,410 --> 00:07:44,570
This is pretty much the majority of the hardest parts of the style we've touched upon, arguably all

105
00:07:44,570 --> 00:07:47,690
of the different types of tools that we have in store components now.

106
00:07:48,800 --> 00:07:55,580
This CIUSSS block, if you need to pass blocks of styles around and conditionally render them, this

107
00:07:55,580 --> 00:07:57,770
is another really great tool that you can use.

108
00:07:58,550 --> 00:08:02,000
So now what I want you to do is stand the rest of these components yourself.

109
00:08:03,060 --> 00:08:07,730
If there are any components that you're a little concerned about how to do it or you want to test yours

110
00:08:07,770 --> 00:08:10,140
against mine, there are numerous ways to do this.

111
00:08:10,170 --> 00:08:14,550
There's no perfect right way as there is with any kind of styling or JavaScript.

112
00:08:15,300 --> 00:08:23,070
What you can do is checking your resources folder for a complete styled folder of the repository of

113
00:08:23,070 --> 00:08:27,780
this project, where I've stopped everything over to style components that is going to be the baseline

114
00:08:27,780 --> 00:08:34,290
project moving forward for a lot of any other further optimizations that we make, because this is pretty

115
00:08:34,290 --> 00:08:39,870
much the typical way that CSC and jazz components are really written in most projects nowadays.

116
00:08:40,680 --> 00:08:43,480
But again, finish styling all of these components.

117
00:08:43,500 --> 00:08:48,180
Compare your work against mine if you want to see an idea of how you can do it if you ever get stuck.

118
00:08:48,990 --> 00:08:49,590
And that's it.

119
00:08:50,070 --> 00:08:50,760
Best of luck.

120
00:08:51,090 --> 00:08:53,610
Enjoy the challenge, and I'll see you in the next video.
