1
00:00:00,430 --> 00:00:01,360
Welcome back, everyone.

2
00:00:02,470 --> 00:00:07,390
In the last video we were setting up our is user authenticated method here.

3
00:00:07,390 --> 00:00:12,670
What we're saying is that once we call get current user, which is our promise ified version of checking,

4
00:00:12,670 --> 00:00:16,010
if the user is still authenticated, we get the user off.

5
00:00:16,360 --> 00:00:21,520
And if it exists, what we're going to do is recreate that process we had where we checked.

6
00:00:21,520 --> 00:00:27,940
If the user doc reference exists, if it does, check the snapshot to see if that data is inside of

7
00:00:27,940 --> 00:00:28,690
our firebase.

8
00:00:29,020 --> 00:00:30,700
If it is, then we return it.

9
00:00:30,940 --> 00:00:32,440
If not, then we generate it.

10
00:00:32,860 --> 00:00:39,070
If you remember, this is a method that lives inside of our Firebase Utils as create user document from

11
00:00:39,070 --> 00:00:39,430
off.

12
00:00:40,000 --> 00:00:45,700
The key difference here is that once we had the user doc reference and we got the user snapshot and

13
00:00:45,700 --> 00:00:49,300
after we generated everything, we returned the user doc reference.

14
00:00:49,630 --> 00:00:53,980
Instead, we want the user snapshot because the data lives on the snapshot.

15
00:00:54,010 --> 00:00:58,510
The document reference is just a pointer to that space where that data could live.

16
00:00:59,080 --> 00:01:03,700
We want the snapshot now so that we can get the data and store it inside of our reducer.

17
00:01:04,570 --> 00:01:09,970
So here what I'm going to do is bring in that method that we just had, create user document from off.

18
00:01:10,450 --> 00:01:17,500
And I'm also going to make a method now that I will call once we have the user auth object and all of

19
00:01:17,500 --> 00:01:23,590
our sign in sign up with Google or with email and password are all going to flow through this new saga.

20
00:01:24,310 --> 00:01:26,320
So this saga I'm going to call.

21
00:01:27,340 --> 00:01:27,660
Ah.

22
00:01:27,670 --> 00:01:30,790
Get snapshot from user off.

23
00:01:32,280 --> 00:01:39,750
This is going to receive user off as well as those additional details that we need when we do our sign

24
00:01:39,750 --> 00:01:40,080
up.

25
00:01:40,590 --> 00:01:45,150
If you remember, create user document from off also takes in the display name that they fill in during

26
00:01:45,150 --> 00:01:45,810
the signup step.

27
00:01:46,650 --> 00:01:50,070
So here inside, we're going to have a tri catch block.

28
00:01:51,130 --> 00:01:59,620
And what we're going to try to do again is essentially figure out if we can get that user snapshot.

29
00:01:59,950 --> 00:02:06,460
So here I'm going to say course user snapshot is what I'm going to try and get back from yielding to

30
00:02:06,460 --> 00:02:14,830
calling this method create user document from off passing it the user author object as well as additional

31
00:02:14,830 --> 00:02:15,370
details.

32
00:02:16,180 --> 00:02:20,650
Anywhere you're going to call a function, you want to use the call effect generator.

33
00:02:21,220 --> 00:02:28,750
Now inside of Redux Saga, every single step that yields you want to be as descriptive as possible.

34
00:02:28,750 --> 00:02:32,580
Not descriptive here essentially means creating an effect for it.

35
00:02:32,590 --> 00:02:34,510
That's why these are called effect generators.

36
00:02:35,020 --> 00:02:39,190
An effect is essentially a plain object describes what's trying to happen.

37
00:02:39,580 --> 00:02:45,430
So here with call, this is just going to say, hey, I've got some object where the function name is

38
00:02:45,430 --> 00:02:53,170
going to be, create user document from off like this and then it's going to say params are whatever

39
00:02:53,170 --> 00:02:54,070
these subsequent are.

40
00:02:54,430 --> 00:02:56,500
This might not be the shape, but this just gives you an idea.

41
00:02:56,920 --> 00:03:01,900
What this allows us to do is actually make testing easier when we're going to test sagas, but also

42
00:03:01,900 --> 00:03:09,400
we're just essentially handing over the execution of this API call or any of this code to our actual

43
00:03:09,400 --> 00:03:10,030
generator.

44
00:03:10,270 --> 00:03:14,260
And you want to hand over as much of the generator as you can because the generator is going to be the

45
00:03:14,260 --> 00:03:15,820
one that can cancel these.

46
00:03:16,300 --> 00:03:17,620
But more on that later.

47
00:03:18,010 --> 00:03:24,460
The key thing to know is that anywhere you're going to make some kind of call to either a new saga or

48
00:03:24,460 --> 00:03:30,370
to some function method, especially if it's an API call or asynchronous call, use the call effect.

49
00:03:30,940 --> 00:03:39,370
So now that we have our user snapshot, let's just console.log out user snapshot as well as user snapshot

50
00:03:39,610 --> 00:03:40,000
data.

51
00:03:43,680 --> 00:03:50,100
What we also want to do is that if this fails, for some reason we want to yield out that sign in failed

52
00:03:50,100 --> 00:03:52,020
method passing the error down.

53
00:03:53,620 --> 00:03:57,400
Similarly, if we fail inside of our IS user authenticated.

54
00:03:57,790 --> 00:03:59,920
I'm also going to use the same sign and failed method.

55
00:04:01,110 --> 00:04:07,380
And now that we have our new generator, let's call this inside of our is user authenticated method.

56
00:04:08,220 --> 00:04:13,410
So here we're going to say once we have this user off, if it's not now assuming that they're trying

57
00:04:13,410 --> 00:04:21,420
to sign in, then we're going to call our get snapshot from user off method that we just made and we're

58
00:04:21,420 --> 00:04:24,330
going to pass it the user off as the argument.

59
00:04:25,140 --> 00:04:27,240
So now we're going to save this.

60
00:04:27,780 --> 00:04:35,220
We also need to pass this in as the second argument of our take latest and pass this into our on check

61
00:04:35,220 --> 00:04:38,130
user session using our call as well.

62
00:04:39,150 --> 00:04:46,650
And then we're going to take the user saga, going to our roots saga, import it and add it to our roots

63
00:04:46,650 --> 00:04:47,130
saga.

64
00:04:54,500 --> 00:05:00,170
And finally, what we want to make sure we also do is inside of Afghans, where we were mounting before

65
00:05:00,410 --> 00:05:04,430
and we had our initial off state listener and then we were testing get current user.

66
00:05:04,880 --> 00:05:06,770
We don't need any of this anymore.

67
00:05:07,010 --> 00:05:11,970
Instead, all we're doing is triggering our check user session.

68
00:05:12,590 --> 00:05:14,150
So that's what we want to dispatch up.

69
00:05:15,580 --> 00:05:18,940
So now that we have everything, let's go over the flow of what's going to happen.

70
00:05:19,540 --> 00:05:20,500
The app is going to mount.

71
00:05:20,530 --> 00:05:21,790
It's going to dispatch.

72
00:05:21,790 --> 00:05:23,050
Check user session.

73
00:05:23,530 --> 00:05:29,110
Check user session is our new action type, which we have a saga that is listening for.

74
00:05:29,620 --> 00:05:35,230
Once we hear it, we are going to call is user authenticated, which is going to call our get current

75
00:05:35,230 --> 00:05:35,890
user method.

76
00:05:36,430 --> 00:05:43,000
This is that promise ified version of checking if our off state has changed, i.e. if there is a user

77
00:05:43,000 --> 00:05:44,380
off that still exists.

78
00:05:44,770 --> 00:05:50,440
If it does, it's going to take that user off and it's going to pass it into get snapshot from user

79
00:05:50,440 --> 00:05:50,680
off.

80
00:05:51,160 --> 00:05:57,070
Get snapshot from user is going to use that user off object to determine if there is a user snapshot

81
00:05:57,070 --> 00:05:57,370
for it.

82
00:05:57,850 --> 00:05:59,380
If there isn't, it's going to make one.

83
00:05:59,530 --> 00:06:01,150
If there is, it won't.

84
00:06:01,150 --> 00:06:03,760
But either way we get it back on which we will console.

85
00:06:03,760 --> 00:06:05,380
Log out to see the data.

86
00:06:06,100 --> 00:06:12,850
So let's go back here and down here we see that after check user session fires, we're getting our double

87
00:06:12,850 --> 00:06:13,300
logs.

88
00:06:14,170 --> 00:06:19,420
Here is the data where we see all the fields that we want, but what we don't see is the ID.

89
00:06:20,110 --> 00:06:22,600
You'll notice that the ID is actually on the snapshot.

90
00:06:23,260 --> 00:06:26,180
This is one of those more annoying parts of Firebase.

91
00:06:26,180 --> 00:06:31,120
It's data where you need to get the ID from either the document reference or the snapshot.

92
00:06:31,810 --> 00:06:38,560
So what we have to do in order to actually push this data into our reducer is we will yield out, put.

93
00:06:39,010 --> 00:06:47,230
And in this put we're going to say our sign in success where we're going to pass an object or ID points

94
00:06:47,230 --> 00:06:54,370
to user snapshot ID and then we'll spread through the rest of our user snapshot dot data like so.

95
00:06:55,820 --> 00:07:04,820
And this if we go back to check now, we see that we get our sign in success from our saga and inside

96
00:07:04,820 --> 00:07:07,010
of user, current user.

97
00:07:07,730 --> 00:07:09,440
This is all the data that we want.

98
00:07:10,190 --> 00:07:10,760
So there we go.

99
00:07:11,280 --> 00:07:12,320
Everything's working now.

100
00:07:13,870 --> 00:07:19,150
My challenge to you now is to figure out if you can hook up and create the remaining sagas as well as

101
00:07:19,150 --> 00:07:24,970
the corresponding components in order to move all of the sign in the sign up from Google, from email

102
00:07:24,970 --> 00:07:32,050
password into our sagas and flow everything appropriately through our new get snapshot from user off

103
00:07:32,200 --> 00:07:37,990
saga as well as replace the remaining component code with the appropriate action flow.

104
00:07:38,410 --> 00:07:41,620
And you may even need to add new action types to get everything to work.

105
00:07:42,340 --> 00:07:45,490
But we've essentially learned how to set up most of this code now.

106
00:07:45,640 --> 00:07:48,490
It's really just about getting granular about it and practicing.

107
00:07:49,030 --> 00:07:53,440
So try it out and then join me in the next video where we will go through everything else together.
