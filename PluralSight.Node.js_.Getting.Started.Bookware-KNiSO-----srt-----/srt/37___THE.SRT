0
00:00:00,040 --> 00:00:01,929
[Autogenerated] Let's work under Folder

1
00:00:01,929 --> 00:00:04,570
four. Event loop Here. The first file

2
00:00:04,570 --> 00:00:06,889
here. One logged a jazz has a single

3
00:00:06,889 --> 00:00:10,419
console. The log line. Execute this simple

4
00:00:10,419 --> 00:00:14,119
file note. One logged the jest line. What

5
00:00:14,119 --> 00:00:16,750
I want you to notice now is that note has

6
00:00:16,750 --> 00:00:19,649
started an operating system process here,

7
00:00:19,649 --> 00:00:21,859
and it's now done with that operating

8
00:00:21,859 --> 00:00:24,260
system process. No, IT has finished the

9
00:00:24,260 --> 00:00:26,129
process, and the operating system

10
00:00:26,129 --> 00:00:29,019
terminated that process. A note processed

11
00:00:29,019 --> 00:00:31,600
by default will not keep running in the

12
00:00:31,600 --> 00:00:35,950
background unless it has a reason to. This

13
00:00:35,950 --> 00:00:38,380
one liner script here did not really give

14
00:00:38,380 --> 00:00:40,439
the note process a reason to continue

15
00:00:40,439 --> 00:00:43,600
running. Let's now give the note process a

16
00:00:43,600 --> 00:00:46,119
reason to continue running. We-can do so

17
00:00:46,119 --> 00:00:48,850
by starting an interval timer. We've

18
00:00:48,850 --> 00:00:50,810
learned about timers in a previous module.

19
00:00:50,810 --> 00:00:54,020
Under this file to Interval. There is a

20
00:00:54,020 --> 00:00:56,479
simple interval call here that executes a

21
00:00:56,479 --> 00:00:59,850
console logline every five seconds. Go

22
00:00:59,850 --> 00:01:03,159
ahead and execute this file now node to

23
00:01:03,159 --> 00:01:06,810
interval and not how the note process now

24
00:01:06,810 --> 00:01:10,260
did not exit. IT is running and it will

25
00:01:10,260 --> 00:01:13,159
continue running forever until it gets

26
00:01:13,159 --> 00:01:16,010
crashed by an unexpected error or the user

27
00:01:16,010 --> 00:01:18,879
killed it manually with control. C the

28
00:01:18,879 --> 00:01:21,659
real reason that process did not exit is

29
00:01:21,659 --> 00:01:25,939
that notes. Event loop is itself busy now.

30
00:01:25,939 --> 00:01:28,769
What is this event loop thing you ask? It

31
00:01:28,769 --> 00:01:31,760
is your best friend and node. It's the

32
00:01:31,760 --> 00:01:34,040
hidden magic that will take care off

33
00:01:34,040 --> 00:01:36,650
anything asynchronous for you. And you

34
00:01:36,650 --> 00:01:38,459
don't have to worry about working with

35
00:01:38,459 --> 00:01:41,150
threads in other languages. If you need to

36
00:01:41,150 --> 00:01:43,540
do a sync rinse work, you have to manage.

37
00:01:43,540 --> 00:01:45,780
Threat yourself. You have to start them.

38
00:01:45,780 --> 00:01:48,359
Do the a sync work inside of them, monitor

39
00:01:48,359 --> 00:01:50,629
them, make sure they don't access shared

40
00:01:50,629 --> 00:01:53,030
data or if they do, you want to make sure

41
00:01:53,030 --> 00:01:55,560
that there are no race conditions. It is a

42
00:01:55,560 --> 00:01:58,599
complicated task now. Some languages make

43
00:01:58,599 --> 00:02:00,900
it easier than others, but I think the big

44
00:02:00,900 --> 00:02:03,819
winner in this domain is note. Because you

45
00:02:03,819 --> 00:02:06,719
just use notes. A P I and Mr Event Loop

46
00:02:06,719 --> 00:02:09,909
here will do all the heavy lifting. The

47
00:02:09,909 --> 00:02:12,250
event Lube is just a simple, infinite loop

48
00:02:12,250 --> 00:02:14,979
that's built inside node, and its main

49
00:02:14,979 --> 00:02:17,000
task is to monitor any asynchronous

50
00:02:17,000 --> 00:02:19,569
operations that need to be run and figure

51
00:02:19,569 --> 00:02:22,759
out when they're ready to be consumed. In

52
00:02:22,759 --> 00:02:24,879
this example, the event Lubell Monitor

53
00:02:24,879 --> 00:02:27,229
that set interval timer and every five

54
00:02:27,229 --> 00:02:29,430
seconds will take the intervals callback,

55
00:02:29,430 --> 00:02:30,909
which is the first argument to set

56
00:02:30,909 --> 00:02:33,210
Interval the arrow function here. And it

57
00:02:33,210 --> 00:02:36,080
will send this error function to V eight,

58
00:02:36,080 --> 00:02:39,030
and V eight will execute what's inside

59
00:02:39,030 --> 00:02:41,539
that function. Because this is in every

60
00:02:41,539 --> 00:02:43,469
five second kind of thing. The note

61
00:02:43,469 --> 00:02:45,219
process is going to continue to run

62
00:02:45,219 --> 00:02:48,139
forever, and it will not exit. So while

63
00:02:48,139 --> 00:02:50,729
this note processes running, if you go to

64
00:02:50,729 --> 00:02:53,750
in another terminal and try the command PS

65
00:02:53,750 --> 00:02:56,979
dash E F to list all the running processes

66
00:02:56,979 --> 00:03:00,009
and pipe the output of this command on

67
00:03:00,009 --> 00:03:03,569
grip note to just filter the list. Thio

68
00:03:03,569 --> 00:03:05,879
any processes that are matching the word

69
00:03:05,879 --> 00:03:08,560
node. This is a Linux command. But the

70
00:03:08,560 --> 00:03:10,699
same list of processes can be seen and

71
00:03:10,699 --> 00:03:12,729
filtered with the graphical program that

72
00:03:12,729 --> 00:03:14,539
monitors process activities in your

73
00:03:14,539 --> 00:03:17,030
operating system. So you should see the

74
00:03:17,030 --> 00:03:19,439
process hosting our script right here. You

75
00:03:19,439 --> 00:03:22,759
see that it is still running. Now I have a

76
00:03:22,759 --> 00:03:25,129
few other processes that are matching

77
00:03:25,129 --> 00:03:28,169
node. I think these are actually the Adam

78
00:03:28,169 --> 00:03:30,699
editor itself here. Believe it or not,

79
00:03:30,699 --> 00:03:32,560
this Adam editor here is a note

80
00:03:32,560 --> 00:03:34,780
application. It is a complicated one. But

81
00:03:34,780 --> 00:03:37,030
it's simply run with node, using an

82
00:03:37,030 --> 00:03:39,789
application called Electron, which allows

83
00:03:39,789 --> 00:03:42,439
you to use web and no technologies to

84
00:03:42,439 --> 00:03:44,889
build cross platform desktop applications

85
00:03:44,889 --> 00:03:46,969
for Mac Windows and Lennox. How cool is

86
00:03:46,969 --> 00:03:50,509
that? Okay, so our process here is the

87
00:03:50,509 --> 00:03:52,770
last one here because we started it last,

88
00:03:52,770 --> 00:03:55,139
so it will have the highest process I'd.

89
00:03:55,139 --> 00:03:57,520
You can kill our continuously running note

90
00:03:57,520 --> 00:04:00,000
process, using the Linux skill Command

91
00:04:00,000 --> 00:04:03,639
itself on giving it the process I d here.

92
00:04:03,639 --> 00:04:05,819
But you can also kill any active note

93
00:04:05,819 --> 00:04:08,650
process using Control C on its output

94
00:04:08,650 --> 00:04:11,439
here. And that action will stop the event

95
00:04:11,439 --> 00:04:14,189
loop and then remove the process from the

96
00:04:14,189 --> 00:04:17,360
operating system. Run the same PS dash e f

97
00:04:17,360 --> 00:04:20,649
Grab Note command now, and you'll see that

98
00:04:20,649 --> 00:04:22,420
the process that was hosting the interval

99
00:04:22,420 --> 00:04:25,889
file is gone. Notes. Event Loop works with

100
00:04:25,889 --> 00:04:28,610
multiple phases and queues. At this point,

101
00:04:28,610 --> 00:04:30,579
what I want you to remember is that every

102
00:04:30,579 --> 00:04:33,430
note process starts this infinite loop

103
00:04:33,430 --> 00:04:35,550
that we call event loop. But when the

104
00:04:35,550 --> 00:04:38,079
process has no asynchronous operations to

105
00:04:38,079 --> 00:04:40,959
perform, the event loop will exit and the

106
00:04:40,959 --> 00:04:38,000
operating system will terminate that note process

