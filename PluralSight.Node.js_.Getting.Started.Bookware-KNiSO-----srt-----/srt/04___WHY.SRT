0
00:00:00,640 --> 00:00:01,940
[Autogenerated] we learned that note

1
00:00:01,940 --> 00:00:04,139
allows us to easily execute jobs shipped

2
00:00:04,139 --> 00:00:06,360
good on servers, but this is not really

3
00:00:06,360 --> 00:00:08,259
impressive. It was even possible to do

4
00:00:08,259 --> 00:00:10,470
that before ____. So let me put the big

5
00:00:10,470 --> 00:00:13,599
question out here. Why? Note since you're

6
00:00:13,599 --> 00:00:15,630
watching this course now, you probably

7
00:00:15,630 --> 00:00:17,469
know reason or two. Why? No, it is a great

8
00:00:17,469 --> 00:00:19,969
thing to learn. Let me make sure everyone

9
00:00:19,969 --> 00:00:22,250
knows all the reasons before we commit to

10
00:00:22,250 --> 00:00:25,559
this journey. So besides being an easy way

11
00:00:25,559 --> 00:00:27,920
to execute and work with JavaScript on the

12
00:00:27,920 --> 00:00:31,039
server note comes with some feature rich,

13
00:00:31,039 --> 00:00:34,549
built in modules. This makes it a great

14
00:00:34,549 --> 00:00:37,630
platform for tools, not just a platform to

15
00:00:37,630 --> 00:00:40,289
host back in servers. But here's the big

16
00:00:40,289 --> 00:00:42,399
deal about the modules that are packaged

17
00:00:42,399 --> 00:00:45,850
with load. All of them offer asynchronous

18
00:00:45,850 --> 00:00:49,060
AP ice that you can just use and not worry

19
00:00:49,060 --> 00:00:52,179
about threads. Yes, you can do a

20
00:00:52,179 --> 00:00:54,630
synchronous programming in note. Do things

21
00:00:54,630 --> 00:00:57,289
in parallel without needing to deal with

22
00:00:57,289 --> 00:01:00,149
threads, which is probably the biggest

23
00:01:00,149 --> 00:01:03,259
benefit of using or in time like note. And

24
00:01:03,259 --> 00:01:05,030
if the built in packages were not enough

25
00:01:05,030 --> 00:01:07,540
for you, you can build highly performing

26
00:01:07,540 --> 00:01:10,829
packages using C plus plus note is

27
00:01:10,829 --> 00:01:13,640
JavaScript, but it has first class support

28
00:01:13,640 --> 00:01:16,129
for C plus plus add ons, creating

29
00:01:16,129 --> 00:01:18,599
dynamically linked, shared objects that

30
00:01:18,599 --> 00:01:21,280
you can use directly in note. Of course,

31
00:01:21,280 --> 00:01:22,760
you can also write your add ons and

32
00:01:22,760 --> 00:01:25,689
JavaScript, too, if you want. Note also

33
00:01:25,689 --> 00:01:27,569
ships with a powerful do ______, which

34
00:01:27,569 --> 00:01:29,280
I'll show you how to use in the last

35
00:01:29,280 --> 00:01:31,769
module of discourse. No, it also has some

36
00:01:31,769 --> 00:01:34,790
handy generic utilities that enhance the

37
00:01:34,790 --> 00:01:37,620
JavaScript language and provide extra AP

38
00:01:37,620 --> 00:01:40,340
ice to work with data types, for example,

39
00:01:40,340 --> 00:01:43,400
and we're not done. In fact, these last

40
00:01:43,400 --> 00:01:45,480
two points on this slide is, in my

41
00:01:45,480 --> 00:01:47,519
opinion, the most important ones. And this

42
00:01:47,519 --> 00:01:50,390
is why this course will have full modules

43
00:01:50,390 --> 00:01:53,680
dedicated to these last two points. I

44
00:01:53,680 --> 00:01:55,879
wrote an article about the exact topic of

45
00:01:55,879 --> 00:01:58,269
Why note? With a lot more details around

46
00:01:58,269 --> 00:02:00,209
the last two points in the slide. Let me

47
00:02:00,209 --> 00:02:01,920
go over this article quick and summarize

48
00:02:01,920 --> 00:02:04,159
it here for you. This article is about why

49
00:02:04,159 --> 00:02:06,730
react Developers love note, but it really

50
00:02:06,730 --> 00:02:08,849
applies to just note in general, why

51
00:02:08,849 --> 00:02:11,060
JavaScript Front end developers in general

52
00:02:11,060 --> 00:02:15,780
love note So note is a platform for tools.

53
00:02:15,780 --> 00:02:17,719
So even if you don't want to host your

54
00:02:17,719 --> 00:02:19,789
whole application in note. Note is a great

55
00:02:19,789 --> 00:02:21,789
platform for tools and the reason It's

56
00:02:21,789 --> 00:02:24,629
great because you have a lot of options.

57
00:02:24,629 --> 00:02:26,770
You have so many tools out there because

58
00:02:26,770 --> 00:02:29,250
no, it was the first major job script

59
00:02:29,250 --> 00:02:31,199
execution engine that ships with a

60
00:02:31,199 --> 00:02:34,060
reliable package manager, which is called

61
00:02:34,060 --> 00:02:36,840
npm. We did not have a package manager for

62
00:02:36,840 --> 00:02:39,120
a long time in the JavaScript world, so

63
00:02:39,120 --> 00:02:41,740
npm is actually very revolutionary in here

64
00:02:41,740 --> 00:02:44,080
because it changed the way we work and

65
00:02:44,080 --> 00:02:45,770
share JavaScript. And no, it was the

66
00:02:45,770 --> 00:02:49,139
enabler here. Because npm is part of note,

67
00:02:49,139 --> 00:02:51,310
npm is basically the world's largest

68
00:02:51,310 --> 00:02:54,789
collection of free and reusable code. You

69
00:02:54,789 --> 00:02:57,469
can make a feature rich no delegation just

70
00:02:57,469 --> 00:02:59,520
by using code that's freely available on

71
00:02:59,520 --> 00:03:03,150
npm. Npm is a reliable package manager,

72
00:03:03,150 --> 00:03:05,139
which comes with CLI that we're going to

73
00:03:05,139 --> 00:03:07,650
explore and that CLI makes it really easy

74
00:03:07,650 --> 00:03:10,060
to install third-party packages and in

75
00:03:10,060 --> 00:03:12,280
general, share your own code and reuse

76
00:03:12,280 --> 00:03:15,400
your own code. And the npm registry, where

77
00:03:15,400 --> 00:03:18,319
the packages get hosted, has so many

78
00:03:18,319 --> 00:03:20,860
options, and by so many I mean hundreds of

79
00:03:20,860 --> 00:03:23,990
thousands of options off free tools that

80
00:03:23,990 --> 00:03:25,650
you can just install and use in your

81
00:03:25,650 --> 00:03:29,530
system. The other big thing about Node is

82
00:03:29,530 --> 00:03:32,530
that it comes with a reliable module

83
00:03:32,530 --> 00:03:34,800
dependency manager, which is different

84
00:03:34,800 --> 00:03:37,960
than npm. This module dependency manager

85
00:03:37,960 --> 00:03:40,360
is also another thing that we do not have

86
00:03:40,360 --> 00:03:42,620
in the JavaScript world. More accurately,

87
00:03:42,620 --> 00:03:44,719
we did not have for a long time because

88
00:03:44,719 --> 00:03:47,280
job script today has what's known as app

89
00:03:47,280 --> 00:03:49,560
JavaScript modules. But these modules,

90
00:03:49,560 --> 00:03:51,270
despite being part of the language

91
00:03:51,270 --> 00:03:53,969
officially, are still a work in progress.

92
00:03:53,969 --> 00:03:56,389
They're still not completely supported by

93
00:03:56,389 --> 00:03:59,349
all implementations nodes. Common jazz

94
00:03:59,349 --> 00:04:01,819
dependency system has been available since

95
00:04:01,819 --> 00:04:04,460
node was released, and it opened the door

96
00:04:04,460 --> 00:04:06,620
to so much flexibility in how we could

97
00:04:06,620 --> 00:04:09,689
JavaScript. IT is widely used even for

98
00:04:09,689 --> 00:04:11,680
JavaScript that gets executed in the

99
00:04:11,680 --> 00:04:14,479
browser because node has many tools to

100
00:04:14,479 --> 00:04:16,829
bridge the gap between its common just

101
00:04:16,829 --> 00:04:19,060
system on what browsers console work with

102
00:04:19,060 --> 00:04:22,819
today, npm, along with common Js, make a

103
00:04:22,819 --> 00:04:24,860
big difference when you work with any

104
00:04:24,860 --> 00:04:27,029
JavaScript system, not just the JavaScript

105
00:04:27,029 --> 00:04:29,389
that you execute on the server or in the

106
00:04:29,389 --> 00:04:31,740
browser. If, for example, you have a fancy

107
00:04:31,740 --> 00:04:34,269
fridge monitor that happens to run on

108
00:04:34,269 --> 00:04:37,129
JavaScript, you can use note for the tools

109
00:04:37,129 --> 00:04:39,459
to package toe organize to manage

110
00:04:39,459 --> 00:04:41,839
dependencies and to bundle you code and

111
00:04:41,839 --> 00:04:45,610
ship it to your fridge. Note also is not

112
00:04:45,610 --> 00:04:47,620
just for hosting JavaScript servers, but

113
00:04:47,620 --> 00:04:49,290
it's also a very good option to do so

114
00:04:49,290 --> 00:04:51,759
because of its non blocking asynchronous

115
00:04:51,759 --> 00:04:53,810
nature, which you can use without dealing

116
00:04:53,810 --> 00:04:55,759
with threats. This is the main point that

117
00:04:55,759 --> 00:04:57,680
made no different than any other system

118
00:04:57,680 --> 00:05:00,459
that was popular before. Newt. Note comes

119
00:05:00,459 --> 00:05:03,269
with first glass support and easy a piece

120
00:05:03,269 --> 00:05:05,490
for many asynchronous operations, like

121
00:05:05,490 --> 00:05:07,769
reading or writing files, consuming data

122
00:05:07,769 --> 00:05:09,699
over the network and even compressing and

123
00:05:09,699 --> 00:05:12,370
encrypting data. You can do all these

124
00:05:12,370 --> 00:05:15,420
operations in node a synchronously without

125
00:05:15,420 --> 00:05:18,199
blocking the main execution threat. This

126
00:05:18,199 --> 00:05:20,459
works great with V eight because V eight

127
00:05:20,459 --> 00:05:22,920
itself is single threaded, and this is

128
00:05:22,920 --> 00:05:25,269
true for both note and browsers. You only

129
00:05:25,269 --> 00:05:27,689
get a single precious thread toe work

130
00:05:27,689 --> 00:05:30,360
with, and it's very important to not block

131
00:05:30,360 --> 00:05:33,529
IT. For example, in your browser. If your

132
00:05:33,529 --> 00:05:35,810
website blocks that single thread for,

133
00:05:35,810 --> 00:05:39,089
say, two seconds, the user cannot scroll

134
00:05:39,089 --> 00:05:41,920
up and down during these two seconds in

135
00:05:41,920 --> 00:05:44,519
note. If an incoming SD to-be connection

136
00:05:44,519 --> 00:05:46,220
to your Web server was handled

137
00:05:46,220 --> 00:05:49,459
synchronously, rather than a synchronously

138
00:05:49,459 --> 00:05:51,879
that will block the single thread. And

139
00:05:51,879 --> 00:05:54,209
your whole web server cannot handle any

140
00:05:54,209 --> 00:05:56,069
other connection while the synchronous

141
00:05:56,069 --> 00:05:57,980
operation is active. And that's a big

142
00:05:57,980 --> 00:06:01,529
deal. No, the asynchronous AP ICE also

143
00:06:01,529 --> 00:06:03,870
work great for cloud applications in

144
00:06:03,870 --> 00:06:06,350
general because a lot of these operations

145
00:06:06,350 --> 00:06:09,410
are asynchronous by nature. And, of

146
00:06:09,410 --> 00:06:11,839
course, by using note, you are committing

147
00:06:11,839 --> 00:06:14,000
to the flexible JavaScript language, which

148
00:06:14,000 --> 00:06:16,279
is used on every website. Today. It is the

149
00:06:16,279 --> 00:06:18,529
most popular programming language, and

150
00:06:18,529 --> 00:06:20,639
that statement will continue to be true

151
00:06:20,639 --> 00:06:23,160
for decades to come. And despite its

152
00:06:23,160 --> 00:06:25,329
problems, JavaScript is actually a good

153
00:06:25,329 --> 00:06:28,269
language today. With note, you get to have

154
00:06:28,269 --> 00:06:31,519
a single language across the full stack,

155
00:06:31,519 --> 00:06:33,819
use jobs shipped in the browser and use it

156
00:06:33,819 --> 00:06:36,060
for the back end as well, which means less

157
00:06:36,060 --> 00:06:38,370
Centex to keep in your head and Les Mis

158
00:06:38,370 --> 00:06:40,769
takes over. All This also means that you

159
00:06:40,769 --> 00:06:42,910
can have a better integration between your

160
00:06:42,910 --> 00:06:44,939
front and code and you're back in code.

161
00:06:44,939 --> 00:06:47,149
You can actually share code between these

162
00:06:47,149 --> 00:06:49,810
two sides, and using job script on the

163
00:06:49,810 --> 00:06:52,000
back end also means that teams can share

164
00:06:52,000 --> 00:06:54,370
responsibilities among different project

165
00:06:54,370 --> 00:06:56,939
projects. Don't need a dedicated team for

166
00:06:56,939 --> 00:06:58,709
the front end and a different team. For

167
00:06:58,709 --> 00:07:00,970
the back end, you would eliminate some

168
00:07:00,970 --> 00:07:03,769
dependencies between teams. The project

169
00:07:03,769 --> 00:07:05,930
can be a single team, the JavaScript

170
00:07:05,930 --> 00:07:08,269
people. They can develop a _ _. _. They

171
00:07:08,269 --> 00:07:10,300
can develop weapon network servers and

172
00:07:10,300 --> 00:07:12,019
they can develop rich interactive

173
00:07:12,019 --> 00:07:15,449
websites. Note, of course, has a few cons,

174
00:07:15,449 --> 00:07:18,250
which are, interestingly, the same pro

175
00:07:18,250 --> 00:07:20,399
points if you just look at them with

176
00:07:20,399 --> 00:07:22,709
different bias. For example, the non

177
00:07:22,709 --> 00:07:25,009
blocking nature is just a completely

178
00:07:25,009 --> 00:07:27,110
different model of thinking and reasoning

179
00:07:27,110 --> 00:07:29,240
about code. And if you've never done it

180
00:07:29,240 --> 00:07:31,250
before, it is going to feel weird. At

181
00:07:31,250 --> 00:07:33,600
first. You need time to get your head

182
00:07:33,600 --> 00:07:35,889
wrapped around this model and get used to

183
00:07:35,889 --> 00:07:39,259
it. And the big npm registry with so many

184
00:07:39,259 --> 00:07:41,839
options means that for every single thing

185
00:07:41,839 --> 00:07:44,310
you need to do, you have many options to

186
00:07:44,310 --> 00:07:46,819
pick from, and some people hate that. You

187
00:07:46,819 --> 00:07:49,180
need to constantly research these options

188
00:07:49,180 --> 00:07:51,759
and make mental effort to pick the better

189
00:07:51,759 --> 00:07:54,470
options. These options usually have major

190
00:07:54,470 --> 00:07:57,910
differences, and also npm enabled shipping

191
00:07:57,910 --> 00:08:00,000
smaller and smaller code, which means you

192
00:08:00,000 --> 00:08:02,600
need to use MAWR and more packages. It's

193
00:08:02,600 --> 00:08:05,290
not unusual for a note application to use

194
00:08:05,290 --> 00:08:08,639
300 or more packages. This is both a good

195
00:08:08,639 --> 00:08:10,800
thing and a bad thing, depending on who

196
00:08:10,800 --> 00:08:12,959
you ask. I think it's a good thing.

197
00:08:12,959 --> 00:08:15,160
Smaller packages are easier to control and

198
00:08:15,160 --> 00:08:17,600
maintain and scale, but you do have to

199
00:08:17,600 --> 00:08:19,259
make peace with the fact that you'll be

200
00:08:19,259 --> 00:08:22,279
using a lot of them. Smaller code is

201
00:08:22,279 --> 00:08:25,540
actually why note is named node. In note,

202
00:08:25,540 --> 00:08:28,759
UI build simple, small single process

203
00:08:28,759 --> 00:08:31,509
building blocks, notes that could be

204
00:08:31,509 --> 00:08:33,850
organized with good networking protocols

205
00:08:33,850 --> 00:08:35,750
to have them communicate with each other

206
00:08:35,750 --> 00:08:38,580
and scale up to build large distributed

207
00:08:38,580 --> 00:08:41,240
programs. Scaling a node application is

208
00:08:41,240 --> 00:08:51,000
not an afterthought. It's built right into the name.

