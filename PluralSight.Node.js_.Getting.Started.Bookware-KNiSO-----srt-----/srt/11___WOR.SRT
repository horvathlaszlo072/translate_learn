0
00:00:00,940 --> 00:00:02,270
[Autogenerated] some of the popular global

1
00:00:02,270 --> 00:00:04,299
functions in a browser environment are the

2
00:00:04,299 --> 00:00:06,730
timer functions like Set time out and set

3
00:00:06,730 --> 00:00:09,759
Interval? No, Jess has an A P I for these

4
00:00:09,759 --> 00:00:12,080
functions as well and exactly matches the

5
00:00:12,080 --> 00:00:15,150
browsers. A P I. These time or functions

6
00:00:15,150 --> 00:00:17,629
can be used to delay or repeat the

7
00:00:17,629 --> 00:00:19,969
execution off other functions, which they

8
00:00:19,969 --> 00:00:23,399
receive as arguments. For example, this

9
00:00:23,399 --> 00:00:25,879
code uses set time out to delay the

10
00:00:25,879 --> 00:00:28,339
printing of this greeting message by four

11
00:00:28,339 --> 00:00:30,929
seconds. The second argument to set time

12
00:00:30,929 --> 00:00:33,469
out is the delay in milliseconds. This is

13
00:00:33,469 --> 00:00:35,899
why we are multiplying for by 1000 here to

14
00:00:35,899 --> 00:00:38,350
make it into four seconds. The first

15
00:00:38,350 --> 00:00:40,649
argument to set time out is the function

16
00:00:40,649 --> 00:00:43,460
whose execution will be delayed if we

17
00:00:43,460 --> 00:00:45,710
execute this script, normally with the

18
00:00:45,710 --> 00:00:48,399
note command note will pause for four

19
00:00:48,399 --> 00:00:50,969
seconds, and then it'll print the greeting

20
00:00:50,969 --> 00:00:54,390
and exit after that note that this first

21
00:00:54,390 --> 00:00:56,020
argument to set time out is just a

22
00:00:56,020 --> 00:00:58,289
function reference. It does not have to be

23
00:00:58,289 --> 00:01:00,280
an in line function like this. For

24
00:01:00,280 --> 00:01:02,479
example, this good here will do the same

25
00:01:02,479 --> 00:01:05,079
job, but it uses a function defined before

26
00:01:05,079 --> 00:01:09,450
said Time out. Note that if the function

27
00:01:09,450 --> 00:01:12,150
that we pass to set time out receives

28
00:01:12,150 --> 00:01:14,430
argument like this example here. Argument

29
00:01:14,430 --> 00:01:18,150
123 and more. Then we can use the

30
00:01:18,150 --> 00:01:21,129
remaining arguments in set time out to

31
00:01:21,129 --> 00:01:22,769
pass these arguments to the delayed

32
00:01:22,769 --> 00:01:25,189
function once it's executed with set time

33
00:01:25,189 --> 00:01:27,560
out. Here's an example. Take a look at

34
00:01:27,560 --> 00:01:29,439
this code and try to figure out what it

35
00:01:29,439 --> 00:01:34,609
will do. The Rocks function, which is

36
00:01:34,609 --> 00:01:37,340
delayed by two seconds except a WHO

37
00:01:37,340 --> 00:01:40,540
argument and our set time out call, relays

38
00:01:40,540 --> 00:01:44,540
the value Pluralsight as the WHO argument.

39
00:01:44,540 --> 00:01:46,920
Executing the script will print out

40
00:01:46,920 --> 00:01:50,689
Pluralsight rocks after two seconds. Time

41
00:01:50,689 --> 00:01:53,659
for a challenge. Ready Using what you

42
00:01:53,659 --> 00:01:56,120
learned so far about set time out. Print

43
00:01:56,120 --> 00:01:58,310
the following two messages after their

44
00:01:58,310 --> 00:02:01,049
corresponding delays. Print the message

45
00:02:01,049 --> 00:02:03,200
Hello after four seconds after four

46
00:02:03,200 --> 00:02:05,650
seconds, then print the message. Hello

47
00:02:05,650 --> 00:02:09,039
after eight seconds after eight seconds.

48
00:02:09,039 --> 00:02:11,039
This would be an easy challenge without

49
00:02:11,039 --> 00:02:13,110
constraints, but we are not here to learn

50
00:02:13,110 --> 00:02:15,319
just the easy stuff. I have a constraint

51
00:02:15,319 --> 00:02:17,990
for you. You can Onley define a single

52
00:02:17,990 --> 00:02:20,090
function in your script, which includes in

53
00:02:20,090 --> 00:02:23,520
line functions. This means many set time

54
00:02:23,520 --> 00:02:26,229
out calls will have to use the exact same

55
00:02:26,229 --> 00:02:32,240
function. Okay, pause here and try it out.

56
00:02:32,240 --> 00:02:33,930
I really hope that you will try to do

57
00:02:33,930 --> 00:02:35,909
these course challenges because trust me

58
00:02:35,909 --> 00:02:37,639
on this. It is the best way to get

59
00:02:37,639 --> 00:02:39,389
comfortable with what you're learning. If

60
00:02:39,389 --> 00:02:41,490
you just watch, you'll learn. But it will

61
00:02:41,490 --> 00:02:43,969
be harder for you to retain and improve.

62
00:02:43,969 --> 00:02:45,610
You do that when you start pushing your

63
00:02:45,610 --> 00:02:47,439
limits and put yourself outside your

64
00:02:47,439 --> 00:02:50,539
comfort zone. Here's how I'd solve this

65
00:02:50,539 --> 00:02:53,500
challenge. I've made the one funk receive

66
00:02:53,500 --> 00:02:55,810
DeLay argument and used that delay

67
00:02:55,810 --> 00:02:58,349
argument in the printed out message. This

68
00:02:58,349 --> 00:02:59,789
way, the function can print different

69
00:02:59,789 --> 00:03:02,009
messages based on whatever delay UI pass

70
00:03:02,009 --> 00:03:05,719
to IT. I then used the one funk in to set

71
00:03:05,719 --> 00:03:08,330
time out calls, one that fires after four

72
00:03:08,330 --> 00:03:10,870
seconds and another that fires after eight

73
00:03:10,870 --> 00:03:13,669
seconds. Both of these set time out calls

74
00:03:13,669 --> 00:03:16,710
also get a third argument to represent the

75
00:03:16,710 --> 00:03:20,560
delay argument for the one funk. Executing

76
00:03:20,560 --> 00:03:23,599
this script will print out the challenge

77
00:03:23,599 --> 00:03:25,530
requirements. The first message after four

78
00:03:25,530 --> 00:03:28,639
seconds and the second message after eight

79
00:03:28,639 --> 00:03:32,240
seconds. But what if I ask you to print

80
00:03:32,240 --> 00:03:35,139
the message every four seconds forever?

81
00:03:35,139 --> 00:03:37,490
While you can put that time out in a loop

82
00:03:37,490 --> 00:03:40,340
node offers the set interval is well,

83
00:03:40,340 --> 00:03:43,389
which would accomplish exactly that. Just

84
00:03:43,389 --> 00:03:45,620
use a set interval instead of set time

85
00:03:45,620 --> 00:03:49,199
out. In this example, this code will print

86
00:03:49,199 --> 00:03:52,069
its message every three seconds. Note will

87
00:03:52,069 --> 00:03:54,349
print this message forever until you kill

88
00:03:54,349 --> 00:03:58,780
the process with control C. Another cool

89
00:03:58,780 --> 00:04:00,629
thing about these timers is that you can

90
00:04:00,629 --> 00:04:03,610
cancel them with code. A call to set time

91
00:04:03,610 --> 00:04:06,710
out returns a timer ID, and you can use it

92
00:04:06,710 --> 00:04:09,370
with a clear time out call to cancel that

93
00:04:09,370 --> 00:04:12,259
timer. Here's an example. This simple

94
00:04:12,259 --> 00:04:14,789
timer here is supposed to fire after zero

95
00:04:14,789 --> 00:04:17,089
milliseconds, making IT immediate, but it

96
00:04:17,089 --> 00:04:19,500
won't because we are capturing the timer

97
00:04:19,500 --> 00:04:22,680
ID and canceling IT right after with a

98
00:04:22,680 --> 00:04:26,110
clear time out call. When we execute, the

99
00:04:26,110 --> 00:04:28,800
script note will not print anything, and

100
00:04:28,800 --> 00:04:31,480
the process will just exit. By the way,

101
00:04:31,480 --> 00:04:33,360
there is another way to do set time out

102
00:04:33,360 --> 00:04:35,980
with zero millisecond the time or a P. I

103
00:04:35,980 --> 00:04:38,110
has another function. It's called set

104
00:04:38,110 --> 00:04:40,379
immediate, and it's basically the same

105
00:04:40,379 --> 00:04:42,209
thing as a set time out with a zero

106
00:04:42,209 --> 00:04:43,899
millisecond. But we don't have to specify

107
00:04:43,899 --> 00:04:45,779
a delay here. It's an immediate thing.

108
00:04:45,779 --> 00:04:47,509
We'll see a practical case for this

109
00:04:47,509 --> 00:04:50,269
function later in the course and just like

110
00:04:50,269 --> 00:04:53,279
clear time out. There's also ah, clear

111
00:04:53,279 --> 00:04:55,550
interval, which does the exact same thing

112
00:04:55,550 --> 00:04:57,790
but for set interval calls. And there is

113
00:04:57,790 --> 00:05:01,069
also a clear immediate which does the same

114
00:05:01,069 --> 00:05:04,779
thing for set immediate calls. So as you

115
00:05:04,779 --> 00:05:07,050
can hopefully see from this example,

116
00:05:07,050 --> 00:05:09,370
executing something with set time out

117
00:05:09,370 --> 00:05:12,079
after zero millisecond does not mean

118
00:05:12,079 --> 00:05:14,529
executed right away, but rather it means

119
00:05:14,529 --> 00:05:17,149
executed right away. After you're done

120
00:05:17,149 --> 00:05:19,970
with everything else in this script, let

121
00:05:19,970 --> 00:05:22,740
me make this point clear with an example.

122
00:05:22,740 --> 00:05:24,829
Here's a simple set time out call that

123
00:05:24,829 --> 00:05:27,259
should fire after half a second, but it

124
00:05:27,259 --> 00:05:30,060
won't right after defining the timer UI

125
00:05:30,060 --> 00:05:32,939
Block note synchronously with a big loop.

126
00:05:32,939 --> 00:05:35,980
This is one with 10 zeroes in front of it,

127
00:05:35,980 --> 00:05:38,459
So this is a 10 billion takes loop, which

128
00:05:38,459 --> 00:05:41,990
basically simulate a busy CPU note can do

129
00:05:41,990 --> 00:05:44,310
nothing while this loop is thinking. This

130
00:05:44,310 --> 00:05:45,810
is, of course, a very bad thing to do in

131
00:05:45,810 --> 00:05:47,560
practice, but I'll help you here to

132
00:05:47,560 --> 00:05:49,660
understand that set time out DeLay is not

133
00:05:49,660 --> 00:05:51,899
a guaranteed thing, but rather a minimum

134
00:05:51,899 --> 00:05:54,449
thing. This 500 millisecond here means a

135
00:05:54,449 --> 00:05:57,189
minimum delay of 500 milliseconds. In

136
00:05:57,189 --> 00:05:59,790
reality, this script will take ah lot

137
00:05:59,790 --> 00:06:03,110
longer to print its greeting line. It will

138
00:06:03,110 --> 00:06:05,279
have to wait on the blocking loop to

139
00:06:05,279 --> 00:06:08,939
finish first. Let's do one more challenge

140
00:06:08,939 --> 00:06:12,589
on timers. Print the message. Hello World

141
00:06:12,589 --> 00:06:16,670
Every second, but on Lee five times after

142
00:06:16,670 --> 00:06:19,800
five times print the message done and let

143
00:06:19,800 --> 00:06:23,160
the note process exit and you cannot use a

144
00:06:23,160 --> 00:06:25,540
set time out call for this challenge.

145
00:06:25,540 --> 00:06:29,139
Little hint. You need a counter here.

146
00:06:29,139 --> 00:06:34,139
Okay, you can pause here. Hopefully, this

147
00:06:34,139 --> 00:06:36,769
was an easy one. I initiated a counter

148
00:06:36,769 --> 00:06:39,420
value as zero and then started as an

149
00:06:39,420 --> 00:06:42,629
interval call, capturing its I. D. The

150
00:06:42,629 --> 00:06:45,240
delayed function will print the message

151
00:06:45,240 --> 00:06:48,129
and increment the counter each time inside

152
00:06:48,129 --> 00:06:50,540
the delayed function. And if statement

153
00:06:50,540 --> 00:06:53,939
will check if we're at five times by now.

154
00:06:53,939 --> 00:06:57,189
If so, l Brent done and clear the interval

155
00:06:57,189 --> 00:07:00,480
using the captured interval constant. The

156
00:07:00,480 --> 00:07:04,490
interval delay is 1000 milliseconds. In

157
00:07:04,490 --> 00:07:06,509
this file here, I've put a couple more

158
00:07:06,509 --> 00:07:09,019
challenges for you to practice timers. I

159
00:07:09,019 --> 00:07:10,759
will not solve these challenges here to

160
00:07:10,759 --> 00:07:13,000
keep the course short, but I included the

161
00:07:13,000 --> 00:07:20,000
solutions in this same folder in the course Rebo

