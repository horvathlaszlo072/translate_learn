0
00:00:01,139 --> 00:00:02,660
[Autogenerated] Let's talk about npm Ax

1
00:00:02,660 --> 00:00:06,120
and the npm run scripts. Npm Ax is another

2
00:00:06,120 --> 00:00:08,359
binary that you get when you install node.

3
00:00:08,359 --> 00:00:11,330
It's part of the npm tool set, and the npm

4
00:00:11,330 --> 00:00:14,029
Scripts feature is a useful and often

5
00:00:14,029 --> 00:00:16,750
underrated feature of npm. IT enables you

6
00:00:16,750 --> 00:00:19,059
to automate the way your team uses

7
00:00:19,059 --> 00:00:22,070
your-app. You can use npm scripts to start

8
00:00:22,070 --> 00:00:24,620
stop, restart or test your-app in a

9
00:00:24,620 --> 00:00:27,480
standard way that encapsulates best

10
00:00:27,480 --> 00:00:31,109
practices for this exercise. I prepared

11
00:00:31,109 --> 00:00:33,740
this four script directory here under the

12
00:00:33,740 --> 00:00:36,259
npm folder. In this folder, you should see

13
00:00:36,259 --> 00:00:38,969
four files package that Jason and Package

14
00:00:38,969 --> 00:00:41,310
Lock that Jason This is so that you can

15
00:00:41,310 --> 00:00:42,820
install all the dependencies of this

16
00:00:42,820 --> 00:00:46,289
exercise. Ah server that Js file, which

17
00:00:46,289 --> 00:00:49,179
creates a simple express web server and

18
00:00:49,179 --> 00:00:52,509
the test the Js file, which tests the math

19
00:00:52,509 --> 00:00:55,119
square root function. Now you don't really

20
00:00:55,119 --> 00:00:56,850
need to test the functions that are

21
00:00:56,850 --> 00:00:59,140
available to you in JavaScript like these

22
00:00:59,140 --> 00:01:01,340
thes functions are already tested. But

23
00:01:01,340 --> 00:01:03,770
this is just an exercise To see examples

24
00:01:03,770 --> 00:01:07,390
of how you can use npm scripts, take a

25
00:01:07,390 --> 00:01:10,769
look at packaged adjacent. You'll see a

26
00:01:10,769 --> 00:01:13,659
scripts section here with three entries,

27
00:01:13,659 --> 00:01:17,260
start test and check You can add more

28
00:01:17,260 --> 00:01:20,140
scripts in this section if you need to.

29
00:01:20,140 --> 00:01:22,980
These scripts are defined with other CLI

30
00:01:22,980 --> 00:01:25,370
tools like Node Justin es Linton. These

31
00:01:25,370 --> 00:01:29,409
examples To run these scripts, we first

32
00:01:29,409 --> 00:01:31,750
need to satisfy the dependencies listed

33
00:01:31,750 --> 00:01:33,790
here in the files. UI do that using the

34
00:01:33,790 --> 00:01:36,120
npm install command without any arguments

35
00:01:36,120 --> 00:01:38,019
just like this. This will create a note

36
00:01:38,019 --> 00:01:39,719
modules directory and place all the

37
00:01:39,719 --> 00:01:42,890
dependencies we have here under that. So

38
00:01:42,890 --> 00:01:45,629
let's test thes scripts one at a time. The

39
00:01:45,629 --> 00:01:48,480
start script is going to run this command

40
00:01:48,480 --> 00:01:50,689
node server digest. This is the same

41
00:01:50,689 --> 00:01:52,829
command that you can just run here to

42
00:01:52,829 --> 00:01:55,000
start Server did. Yes. In fact, go ahead

43
00:01:55,000 --> 00:01:56,549
and test that it will say server is

44
00:01:56,549 --> 00:01:59,909
running and the npm start script is going

45
00:01:59,909 --> 00:02:02,700
to do the exact same action. So to run the

46
00:02:02,700 --> 00:02:06,030
npm start script, you do npm run start

47
00:02:06,030 --> 00:02:08,300
just like that. Now, for some of the

48
00:02:08,300 --> 00:02:10,710
special scripts, Start is an example. Test

49
00:02:10,710 --> 00:02:12,659
is another example. They actually have

50
00:02:12,659 --> 00:02:14,310
shortcuts, so you don't need the run

51
00:02:14,310 --> 00:02:17,030
command. You can just do npm start. So go

52
00:02:17,030 --> 00:02:19,849
ahead and test that this is equivalent to

53
00:02:19,849 --> 00:02:22,259
running note server Duchy s command and it

54
00:02:22,259 --> 00:02:24,430
will run the server for you. And you can

55
00:02:24,430 --> 00:02:27,219
go ahead and test the Web server on Port

56
00:02:27,219 --> 00:02:30,580
8000 and it should be running. Let's try

57
00:02:30,580 --> 00:02:33,939
the other script. Npm run test is going to

58
00:02:33,939 --> 00:02:37,449
run the just command. Now, if you try the

59
00:02:37,449 --> 00:02:40,400
just command here, it will not work. It

60
00:02:40,400 --> 00:02:43,150
will say command not found, although just

61
00:02:43,150 --> 00:02:46,250
was a dependency here and the binary for

62
00:02:46,250 --> 00:02:48,129
just exist somewhere under the note

63
00:02:48,129 --> 00:02:51,800
Modules folder. However, the just CLI tool

64
00:02:51,800 --> 00:02:53,500
here is not a global one because we

65
00:02:53,500 --> 00:02:56,740
installed IT locally under this folder.

66
00:02:56,740 --> 00:02:59,629
The cool thing with npm scripts is you

67
00:02:59,629 --> 00:03:01,610
don't need to worry about that as long as

68
00:03:01,610 --> 00:03:04,259
just is installed locally under the note

69
00:03:04,259 --> 00:03:07,219
modules, the npm script section is going

70
00:03:07,219 --> 00:03:10,919
to find it. So if you run npm test another

71
00:03:10,919 --> 00:03:12,909
one of the special npm commands that has a

72
00:03:12,909 --> 00:03:15,139
shortcut for npm scripts, this will

73
00:03:15,139 --> 00:03:17,889
actually fire up jest. IT will find just

74
00:03:17,889 --> 00:03:19,610
under the new IT modules, and it will fire

75
00:03:19,610 --> 00:03:22,270
it up and run the test. The test that Js

76
00:03:22,270 --> 00:03:24,400
file, which is a special name that just is

77
00:03:24,400 --> 00:03:29,490
gonna find now if you need to run just

78
00:03:29,490 --> 00:03:33,280
right here outside of npm scripts, you

79
00:03:33,280 --> 00:03:35,689
have a few options, but the easiest option

80
00:03:35,689 --> 00:03:38,900
of all is to use the npm _________. So if

81
00:03:38,900 --> 00:03:41,909
you do npm x-excess just MPX is short for

82
00:03:41,909 --> 00:03:45,180
npm execute. MPX will also find the just

83
00:03:45,180 --> 00:03:47,430
binary under the note modules folder and

84
00:03:47,430 --> 00:03:50,939
it will just use IT so npm X just work as

85
00:03:50,939 --> 00:03:54,729
well the es lint binary Here in the Czech

86
00:03:54,729 --> 00:03:57,259
script is the same story. You can either

87
00:03:57,259 --> 00:04:00,090
use it with MPX directly or if you use it

88
00:04:00,090 --> 00:04:02,389
through the npm script, it'll work as

89
00:04:02,389 --> 00:04:06,139
well. Now, the Czech script here is not a

90
00:04:06,139 --> 00:04:08,250
special npm script, So to run it, you need

91
00:04:08,250 --> 00:04:12,069
to do npm run check. So this will run the

92
00:04:12,069 --> 00:04:14,430
command Eastland Server Digest and it will

93
00:04:14,430 --> 00:04:16,779
check the server digest file for any ESL

94
00:04:16,779 --> 00:04:18,899
and errors. Now, usually, when you do A s

95
00:04:18,899 --> 00:04:20,819
lent, you need an s land configuration.

96
00:04:20,819 --> 00:04:22,750
But I think I have a global one. Hears it

97
00:04:22,750 --> 00:04:25,329
will just work and it's working and

98
00:04:25,329 --> 00:04:27,589
checking that I have console statement and

99
00:04:27,589 --> 00:04:30,060
server digest. Now, is lenses really

100
00:04:30,060 --> 00:04:31,750
helpful? If this command does not work for

101
00:04:31,750 --> 00:04:34,129
you, what you need to do is configure es

102
00:04:34,129 --> 00:04:36,709
land and to configure es land. You need

103
00:04:36,709 --> 00:04:39,930
access to the s land command itself. Now

104
00:04:39,930 --> 00:04:41,910
we don't have it again. This is installed

105
00:04:41,910 --> 00:04:44,430
locally under the note modules folder. So

106
00:04:44,430 --> 00:04:48,740
to configure is land we can use MPX s lint

107
00:04:48,740 --> 00:04:50,410
And what you need here is to initialize

108
00:04:50,410 --> 00:04:52,430
eastland with a configuration file so you

109
00:04:52,430 --> 00:04:56,040
can use the dash dash in IT argument here

110
00:04:56,040 --> 00:04:57,600
and this will ask you a few questions

111
00:04:57,600 --> 00:05:00,000
about how you like to configure es lint.

112
00:05:00,000 --> 00:05:02,670
For example, I am using a popular style

113
00:05:02,670 --> 00:05:04,370
guide so I can use the error functions

114
00:05:04,370 --> 00:05:07,589
here to pick use a popular style guide and

115
00:05:07,589 --> 00:05:10,490
I am using Airbnb. I like Airbnb because

116
00:05:10,490 --> 00:05:12,769
they also support react and I use react.

117
00:05:12,769 --> 00:05:15,639
So we'll go ahead and say no to react here

118
00:05:15,639 --> 00:05:17,990
just Airbnb and the format can be

119
00:05:17,990 --> 00:05:20,939
anything. I like to have it in JavaScript.

120
00:05:20,939 --> 00:05:22,920
So what this command is going to do, it

121
00:05:22,920 --> 00:05:24,680
will install some other dependencies. As

122
00:05:24,680 --> 00:05:26,899
you can see here, those dependencies will

123
00:05:26,899 --> 00:05:29,709
have the Airbnb configuration and it will

124
00:05:29,709 --> 00:05:33,430
also create an S Linux R C file for your

125
00:05:33,430 --> 00:05:36,920
project to work with the excellent. So

126
00:05:36,920 --> 00:05:38,610
what's important to learn here is that we

127
00:05:38,610 --> 00:05:42,350
use MPX here to access the local binary es

128
00:05:42,350 --> 00:05:44,839
land that's included in this project, and

129
00:05:44,839 --> 00:05:46,769
we were able to configure es land through

130
00:05:46,769 --> 00:05:49,490
that. And if everything works for you, if

131
00:05:49,490 --> 00:05:53,329
you run npm run check again, it should use

132
00:05:53,329 --> 00:05:56,000
your ears lint and say that console log

133
00:05:56,000 --> 00:05:58,139
statement is unexpected. It's a warning.

134
00:05:58,139 --> 00:05:59,709
You're not supposed to leave console luck

135
00:05:59,709 --> 00:06:03,290
statements around. So the npm Scripts

136
00:06:03,290 --> 00:06:05,839
section here is really a good way for a

137
00:06:05,839 --> 00:06:08,050
team of developers to have a standard way

138
00:06:08,050 --> 00:06:10,029
of running things. This is how we run the

139
00:06:10,029 --> 00:06:11,850
server. This is how we test the server.

140
00:06:11,850 --> 00:06:14,089
This is how we check the server, and this

141
00:06:14,089 --> 00:06:15,810
is really just the basic usage. But

142
00:06:15,810 --> 00:06:18,129
there's more to the story. Certain names

143
00:06:18,129 --> 00:06:21,069
in the npm run sections are special. You

144
00:06:21,069 --> 00:06:22,699
can see the full list of these special

145
00:06:22,699 --> 00:06:26,699
commands using npm help npm scripts. Also,

146
00:06:26,699 --> 00:06:28,750
let's take a look at that so you'll see

147
00:06:28,750 --> 00:06:32,839
them here with prefixes like pre and post.

148
00:06:32,839 --> 00:06:35,040
So, for example, you have pre test and

149
00:06:35,040 --> 00:06:37,610
post test. These commands will be run by

150
00:06:37,610 --> 00:06:40,250
the npm Test Command before and after the

151
00:06:40,250 --> 00:06:42,269
command, so let's go ahead and test that

152
00:06:42,269 --> 00:06:45,480
I'm going to do a post test. And under

153
00:06:45,480 --> 00:06:48,139
this command I'll do something like node

154
00:06:48,139 --> 00:06:51,329
dashi to execute as script. And I'll just

155
00:06:51,329 --> 00:06:55,360
console dot log in a string here console

156
00:06:55,360 --> 00:07:00,129
log, done testing just like that. So guess

157
00:07:00,129 --> 00:07:03,240
what Now? When we run the npm test script

158
00:07:03,240 --> 00:07:06,670
itself, it will automatically run the post

159
00:07:06,670 --> 00:07:10,569
Test npm test, and it will run the just

160
00:07:10,569 --> 00:07:12,370
command. And when it's done, it will

161
00:07:12,370 --> 00:07:15,660
execute the post test script and output

162
00:07:15,660 --> 00:07:17,459
the council log message that we're done

163
00:07:17,459 --> 00:07:20,259
testing. So these pre and post versions of

164
00:07:20,259 --> 00:07:22,620
the npm run scripts give you an easy way

165
00:07:22,620 --> 00:07:25,879
for some flexibility around major npm

166
00:07:25,879 --> 00:07:27,930
events, like installing, publishing and

167
00:07:27,930 --> 00:07:30,290
testing, and you can use them to customize

168
00:07:30,290 --> 00:07:32,540
what's happening around these events. They

169
00:07:32,540 --> 00:07:34,089
are very helpful when you need to

170
00:07:34,089 --> 00:07:35,990
integrate your project with external

171
00:07:35,990 --> 00:07:37,769
servers like a build or continuous

172
00:07:37,769 --> 00:07:40,300
integration server, or if you need to do

173
00:07:40,300 --> 00:07:44,000
custom actions before or after you release or deploy something new

