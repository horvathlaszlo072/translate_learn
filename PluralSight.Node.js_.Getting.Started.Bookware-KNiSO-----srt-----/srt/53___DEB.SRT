0
00:00:01,139 --> 00:00:02,240
[Autogenerated] Before we wrap up this

1
00:00:02,240 --> 00:00:04,040
course, I'd like to show you one handy

2
00:00:04,040 --> 00:00:06,200
trick about the bugging note applications

3
00:00:06,200 --> 00:00:07,809
because I know you're going to run into

4
00:00:07,809 --> 00:00:10,529
problems. No, it comes with a built in

5
00:00:10,529 --> 00:00:13,390
debugging client, but that one is limited.

6
00:00:13,390 --> 00:00:15,480
The cool thing about notes to ______ is

7
00:00:15,480 --> 00:00:17,899
that it's beautifully integrated with

8
00:00:17,899 --> 00:00:20,750
grown Dev tools. If you're familiar with

9
00:00:20,750 --> 00:00:23,620
these, you know how powerful they are. All

10
00:00:23,620 --> 00:00:25,809
that power is available to you when

11
00:00:25,809 --> 00:00:29,170
working with note as well. To demonstrate

12
00:00:29,170 --> 00:00:31,489
this, I've prepared a file with a bug

13
00:00:31,489 --> 00:00:34,570
under the six OS folder here, File four

14
00:00:34,570 --> 00:00:37,310
Bug has a simple function that is supposed

15
00:00:37,310 --> 00:00:39,420
to take an array and convert it into an

16
00:00:39,420 --> 00:00:42,859
object. So here is some test input. This

17
00:00:42,859 --> 00:00:45,810
is an array, and you can see the output

18
00:00:45,810 --> 00:00:47,979
that I'm expecting right here. It's

19
00:00:47,979 --> 00:00:49,469
supposed to convert the rate into an

20
00:00:49,469 --> 00:00:52,329
object. You can easily convert an array

21
00:00:52,329 --> 00:00:54,890
into anything using the powerful reduce

22
00:00:54,890 --> 00:00:58,640
function. However, when we run this file

23
00:00:58,640 --> 00:01:02,219
node for bug, we don't get the expected

24
00:01:02,219 --> 00:01:04,569
output, but rather a weird one. So what is

25
00:01:04,569 --> 00:01:08,870
going on here? We can debug simply run

26
00:01:08,870 --> 00:01:12,900
this file with dash dash, inspect B R K

27
00:01:12,900 --> 00:01:15,340
brk. Here means break. So don't execute

28
00:01:15,340 --> 00:01:17,689
anything at first, but rather stop in a

29
00:01:17,689 --> 00:01:20,920
debugging state. When you run this, it

30
00:01:20,920 --> 00:01:23,450
starts a debugging utility. It doesn't run

31
00:01:23,450 --> 00:01:26,810
the file now in your chrome, go to this

32
00:01:26,810 --> 00:01:29,819
special Ural Chrome Colin slash slash

33
00:01:29,819 --> 00:01:33,260
Inspect. You'll see your note process

34
00:01:33,260 --> 00:01:36,180
listed here inside targets, and it is

35
00:01:36,180 --> 00:01:39,500
inspecting our file. Click on this inspect

36
00:01:39,500 --> 00:01:42,569
link. And just like that, you have the

37
00:01:42,569 --> 00:01:45,609
powerful Chrome Dev tools working for your

38
00:01:45,609 --> 00:01:48,340
no descript. How cool is that? This is

39
00:01:48,340 --> 00:01:51,310
really a big deal. Go ahead and try it out

40
00:01:51,310 --> 00:01:54,040
and see how fast you can find bugs. Now

41
00:01:54,040 --> 00:01:57,109
you can place and clear break points. You

42
00:01:57,109 --> 00:02:00,049
can set watchers. You can step over step

43
00:02:00,049 --> 00:02:02,209
into function calls. You can use the

44
00:02:02,209 --> 00:02:04,650
console to see values and structures and

45
00:02:04,650 --> 00:02:07,079
many other powerful features really on

46
00:02:07,079 --> 00:02:09,479
before we debunk this code. Note how the

47
00:02:09,479 --> 00:02:11,939
wrapping function showed up here because

48
00:02:11,939 --> 00:02:14,319
every note module get this rapper. You

49
00:02:14,319 --> 00:02:16,349
don't just execute your own code, you

50
00:02:16,349 --> 00:02:20,030
execute your code within a function. So

51
00:02:20,030 --> 00:02:23,159
this is a good reminder here, right? All

52
00:02:23,159 --> 00:02:24,949
right, so let's debunk this good. Let's

53
00:02:24,949 --> 00:02:27,629
place break point right here. Online.

54
00:02:27,629 --> 00:02:29,819
Three which is inside the reduced

55
00:02:29,819 --> 00:02:32,860
function. My expectation here is that the

56
00:02:32,860 --> 00:02:35,530
line should be called five times and each

57
00:02:35,530 --> 00:02:38,479
time it should have an accumulated version

58
00:02:38,479 --> 00:02:42,400
of the desired object. And now click the

59
00:02:42,400 --> 00:02:44,800
resume button here and it should stop on

60
00:02:44,800 --> 00:02:48,039
the first call of this line. And it did.

61
00:02:48,039 --> 00:02:50,289
Now you can hover over the variables here

62
00:02:50,289 --> 00:02:52,710
to see their values, or you can just use

63
00:02:52,710 --> 00:02:54,599
the console log to see their value as

64
00:02:54,599 --> 00:02:57,659
well. So it looks like the current is

65
00:02:57,659 --> 00:03:02,069
empty object and the accumulator is not an

66
00:03:02,069 --> 00:03:04,740
empty object. So this right there is not

67
00:03:04,740 --> 00:03:07,030
matching my expectation. The accumulator

68
00:03:07,030 --> 00:03:09,500
should be an empty object at first, and

69
00:03:09,500 --> 00:03:11,240
they can't should point to the current

70
00:03:11,240 --> 00:03:13,590
element that we're entering over. So right

71
00:03:13,590 --> 00:03:15,569
away you realize that current and

72
00:03:15,569 --> 00:03:18,389
accumulators are swapped. The first

73
00:03:18,389 --> 00:03:19,990
argument is the accumulator, and the

74
00:03:19,990 --> 00:03:22,639
second argument is the current elements.

75
00:03:22,639 --> 00:03:25,180
So to fix this bug, all we need to do is

76
00:03:25,180 --> 00:03:27,960
make the accumulator first and the current

77
00:03:27,960 --> 00:03:33,000
second and test to see if that works. And it did

