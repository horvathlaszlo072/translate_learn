0
00:00:00,840 --> 00:00:02,370
[Autogenerated] There is a library in node

1
00:00:02,370 --> 00:00:04,110
called Event Emitter, and it's an

2
00:00:04,110 --> 00:00:06,259
important one. So let's talk about it here

3
00:00:06,259 --> 00:00:09,330
in this video under the seven event

4
00:00:09,330 --> 00:00:11,550
Emitters folder here, there is an example

5
00:00:11,550 --> 00:00:14,169
digest for us to work, an example on event

6
00:00:14,169 --> 00:00:17,250
emitting, and this is how we use the event

7
00:00:17,250 --> 00:00:19,410
emitter. We require the events library,

8
00:00:19,410 --> 00:00:21,140
which is built in. We don't need to npm

9
00:00:21,140 --> 00:00:23,519
install anything here on UI. Usually name

10
00:00:23,519 --> 00:00:25,859
the result of requiring the events library

11
00:00:25,859 --> 00:00:29,239
the event in middle class. Just like this.

12
00:00:29,239 --> 00:00:30,760
The Events library is one of the most

13
00:00:30,760 --> 00:00:32,649
important built in libraries in note.

14
00:00:32,649 --> 00:00:34,329
Because most of the other modules

15
00:00:34,329 --> 00:00:37,109
implement the event Emitter module, for

16
00:00:37,109 --> 00:00:38,960
example, streams in note. Our event

17
00:00:38,960 --> 00:00:40,869
emitters. We've seen a few streams when we

18
00:00:40,869 --> 00:00:42,929
talked about the process object. Remember,

19
00:00:42,929 --> 00:00:45,289
the STD N and the STD out are both

20
00:00:45,289 --> 00:00:47,369
streams, and that makes them event

21
00:00:47,369 --> 00:00:49,450
emitters as well. And in the next module

22
00:00:49,450 --> 00:00:51,119
will work with more streams. So let's

23
00:00:51,119 --> 00:00:53,060
understand event emitters on their own

24
00:00:53,060 --> 00:00:55,859
first. After requiring the event in middle

25
00:00:55,859 --> 00:00:57,920
class like this, we create an event

26
00:00:57,920 --> 00:01:00,039
emitter object. Let me put it in a

27
00:01:00,039 --> 00:01:03,149
constant name IT my emitter and we use the

28
00:01:03,149 --> 00:01:06,810
new keyword on the event emitter class. So

29
00:01:06,810 --> 00:01:09,750
my emitter is now an object that can emit

30
00:01:09,750 --> 00:01:13,450
events. An event emitting object has many

31
00:01:13,450 --> 00:01:15,750
methods, but here are the two most

32
00:01:15,750 --> 00:01:19,230
important ones. You can emit a string.

33
00:01:19,230 --> 00:01:21,209
This string is a name that could be

34
00:01:21,209 --> 00:01:23,489
anything, and you use it to identify a

35
00:01:23,489 --> 00:01:27,739
certain event. So let's emit a test event

36
00:01:27,739 --> 00:01:31,819
string here. Now, The other method on any

37
00:01:31,819 --> 00:01:35,230
emitter object is how you can subscribe to

38
00:01:35,230 --> 00:01:38,159
event emitted by this object. And you do

39
00:01:38,159 --> 00:01:41,349
that using the dots on method. You say my

40
00:01:41,349 --> 00:01:45,980
emitter dot on this test event string and

41
00:01:45,980 --> 00:01:48,930
then you pass in a callback function in

42
00:01:48,930 --> 00:01:51,420
here as the second argument. The my

43
00:01:51,420 --> 00:01:53,909
emitter object will invoke this callback

44
00:01:53,909 --> 00:01:56,700
function every time the event represented

45
00:01:56,700 --> 00:01:59,939
by this string is fired. So let me put a

46
00:01:59,939 --> 00:02:03,250
council logline here and log something

47
00:02:03,250 --> 00:02:08,530
like test event waas fired. Here's how

48
00:02:08,530 --> 00:02:11,650
this event emitting business is a lot more

49
00:02:11,650 --> 00:02:14,610
flexible than single callbacks. You can do

50
00:02:14,610 --> 00:02:18,439
this on operation multiple times. This

51
00:02:18,439 --> 00:02:20,340
gives you the flexibility of defining

52
00:02:20,340 --> 00:02:22,819
different behaviors in different functions

53
00:02:22,819 --> 00:02:26,530
in response to a single event. Okay, here

54
00:02:26,530 --> 00:02:28,259
is another one of them interview

55
00:02:28,259 --> 00:02:31,400
questions. If we invoke this file now, how

56
00:02:31,400 --> 00:02:34,189
many times will we see the test event was

57
00:02:34,189 --> 00:02:38,689
fired? Message. Think about it and let me

58
00:02:38,689 --> 00:02:41,860
execute this file note. Example that jazz

59
00:02:41,860 --> 00:02:44,409
to test and that console logline was

60
00:02:44,409 --> 00:02:48,729
invoked zero times. The reason here is

61
00:02:48,729 --> 00:02:51,759
order. UI subscribed to the test event

62
00:02:51,759 --> 00:02:54,580
three times, but that test event was not

63
00:02:54,580 --> 00:02:57,919
fired after UI subscribed to IT. IT was

64
00:02:57,919 --> 00:02:59,990
emitted once before we subscribe to it,

65
00:02:59,990 --> 00:03:02,750
but no one was listening at that point. If

66
00:03:02,750 --> 00:03:04,680
you limit the event after subscribing to

67
00:03:04,680 --> 00:03:07,300
IT, you should now see the three callbacks

68
00:03:07,300 --> 00:03:11,050
getting executed. Who is another interview

69
00:03:11,050 --> 00:03:14,860
question if I don't emit this event after

70
00:03:14,860 --> 00:03:17,039
the subscriptions that I just did, and I

71
00:03:17,039 --> 00:03:19,569
just keep this line here, What can I do to

72
00:03:19,569 --> 00:03:21,039
this line to make it trigger the

73
00:03:21,039 --> 00:03:23,490
subscribers callbacks that happened after

74
00:03:23,490 --> 00:03:25,629
IT without moving it to after the

75
00:03:25,629 --> 00:03:30,289
subscribe calls, I can use the event loop.

76
00:03:30,289 --> 00:03:32,710
I can delay the execution of this line to

77
00:03:32,710 --> 00:03:35,150
the next tick of the event loop by using a

78
00:03:35,150 --> 00:03:38,439
simple set immediate call. For example,

79
00:03:38,439 --> 00:03:41,110
here is how to do that if we wrap this

80
00:03:41,110 --> 00:03:45,840
emit line with a set immediate call. The

81
00:03:45,840 --> 00:03:48,259
callback of set immediate will be placed

82
00:03:48,259 --> 00:03:50,539
on the event lube, and it will be invoked

83
00:03:50,539 --> 00:03:52,300
after the rest of this program is

84
00:03:52,300 --> 00:03:55,280
executed. So these three subscribe calls

85
00:03:55,280 --> 00:03:57,849
will happen before the emit call in that

86
00:03:57,849 --> 00:04:00,330
case, and we see the test event was fired.

87
00:04:00,330 --> 00:04:03,560
Message. This is event emitting very

88
00:04:03,560 --> 00:04:06,060
simple, yet very powerful because it

89
00:04:06,060 --> 00:04:11,000
allows for modules to work together without depending on any AP ice.

