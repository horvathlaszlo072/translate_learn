0
00:00:00,840 --> 00:00:01,879
[Autogenerated] you can use the note

1
00:00:01,879 --> 00:00:04,000
command with custom environment variables.

2
00:00:04,000 --> 00:00:05,919
For example, we could do something like

3
00:00:05,919 --> 00:00:09,890
Val one equal 10 Val to equal 20. Note. No

4
00:00:09,890 --> 00:00:12,400
commas here, then continue to execute a

5
00:00:12,400 --> 00:00:14,880
note script like this in the notes script.

6
00:00:14,880 --> 00:00:16,399
We can access the values in the

7
00:00:16,399 --> 00:00:18,309
environment variables using the process

8
00:00:18,309 --> 00:00:20,530
object, which has many properties. But the

9
00:00:20,530 --> 00:00:22,269
one that you can use for this purpose is

10
00:00:22,269 --> 00:00:24,399
the end property, which is an object that

11
00:00:24,399 --> 00:00:26,589
has all the end of properties available

12
00:00:26,589 --> 00:00:28,440
through the operating system. Like user

13
00:00:28,440 --> 00:00:30,769
here. It also includes the one we just

14
00:00:30,769 --> 00:00:34,429
customize, like Val one and Val to-be. You

15
00:00:34,429 --> 00:00:36,729
can export environment variables prior to

16
00:00:36,729 --> 00:00:38,649
executing a script, and note will read

17
00:00:38,649 --> 00:00:40,700
those as well. For example, instead of

18
00:00:40,700 --> 00:00:43,079
this one liner, UI conduce something like

19
00:00:43,079 --> 00:00:49,659
Export Val, one equal 100 export Val to

20
00:00:49,659 --> 00:00:54,079
equal 200. And then we can execute this

21
00:00:54,079 --> 00:00:57,159
script normally, and it will pick up our

22
00:00:57,159 --> 00:01:00,880
102 100 values. This is a handy bridge

23
00:01:00,880 --> 00:01:03,030
between the operating system and the node

24
00:01:03,030 --> 00:01:05,489
process. You can use it to communicate

25
00:01:05,489 --> 00:01:08,430
dynamic configuration values. For example,

26
00:01:08,430 --> 00:01:10,420
if you want your script to run on

27
00:01:10,420 --> 00:01:12,849
development, port 40 to 42 but in

28
00:01:12,849 --> 00:01:15,040
production you wanted to run on for 80.

29
00:01:15,040 --> 00:01:18,030
Instead, you can use process the end to

30
00:01:18,030 --> 00:01:20,650
make the port dynamic and control IT on

31
00:01:20,650 --> 00:01:23,239
different machines. There is another way

32
00:01:23,239 --> 00:01:25,180
to pass information for the execution

33
00:01:25,180 --> 00:01:27,329
context of the note process, and that's

34
00:01:27,329 --> 00:01:30,769
through the process. The Ark via Ray. This

35
00:01:30,769 --> 00:01:32,959
array will have an item for every

36
00:01:32,959 --> 00:01:34,909
positional argument you specify when

37
00:01:34,909 --> 00:01:37,549
executing the node script in order. For

38
00:01:37,549 --> 00:01:40,049
example, if we have a note command to

39
00:01:40,049 --> 00:01:43,750
print process the RG using the handy dash

40
00:01:43,750 --> 00:01:46,750
p CLI option All the arguments after this

41
00:01:46,750 --> 00:01:49,319
command will be set in the resulting ray

42
00:01:49,319 --> 00:01:52,170
as strings. Even if you pass numbers, this

43
00:01:52,170 --> 00:01:55,260
ray will always assume strings. The first

44
00:01:55,260 --> 00:01:57,430
item here in the resulting array is the

45
00:01:57,430 --> 00:01:59,689
location of the Note Command. And if we're

46
00:01:59,689 --> 00:02:01,939
executing a script, the second item in

47
00:02:01,939 --> 00:02:03,939
this array would be the script name. But

48
00:02:03,939 --> 00:02:05,230
in this case, we're not executing a

49
00:02:05,230 --> 00:02:08,129
script. So the remaining items in this ray

50
00:02:08,129 --> 00:02:10,270
are the arguments that we passed to the

51
00:02:10,270 --> 00:02:12,210
Note command and they're all strings in

52
00:02:12,210 --> 00:02:15,039
this array. This is a cool feature, but I

53
00:02:15,039 --> 00:02:17,189
think I prefer the process. The end of

54
00:02:17,189 --> 00:02:19,639
method because I get to name the past

55
00:02:19,639 --> 00:02:22,610
values there with RG, we'd have to do more

56
00:02:22,610 --> 00:02:24,960
tricks to accomplish this. Named values

57
00:02:24,960 --> 00:02:27,969
feature Other properties you should be

58
00:02:27,969 --> 00:02:31,169
aware of on this special process object

59
00:02:31,169 --> 00:02:34,039
are the standard input output stream.

60
00:02:34,039 --> 00:02:36,650
There are three of them STDM for input STD

61
00:02:36,650 --> 00:02:39,680
out for output and STD air for error

62
00:02:39,680 --> 00:02:42,300
messages. These control the communication

63
00:02:42,300 --> 00:02:44,240
channel between the note process and its

64
00:02:44,240 --> 00:02:46,740
operating system execution environment.

65
00:02:46,740 --> 00:02:48,250
We've been actually using them under the

66
00:02:48,250 --> 00:02:51,270
hood when you use a console dot log line

67
00:02:51,270 --> 00:02:54,900
that line right to the STD out stream. In

68
00:02:54,900 --> 00:02:56,680
fact, you can accomplish the same

69
00:02:56,680 --> 00:02:59,050
functionality of console the log by using

70
00:02:59,050 --> 00:03:03,430
a process The STD out the right line just

71
00:03:03,430 --> 00:03:08,250
like this. S t d n can be used to read

72
00:03:08,250 --> 00:03:11,060
information from users. Here's an example

73
00:03:11,060 --> 00:03:14,189
to do that. The STD Io objects are all

74
00:03:14,189 --> 00:03:16,189
streams, which is a topic that we are yet

75
00:03:16,189 --> 00:03:18,789
to explore. But the gist of it is that we

76
00:03:18,789 --> 00:03:21,080
use events and methods to use these

77
00:03:21,080 --> 00:03:23,419
streams. In here we are listening for a

78
00:03:23,419 --> 00:03:25,590
readable event and using the read method

79
00:03:25,590 --> 00:03:28,080
to read a chunk of data and then we print

80
00:03:28,080 --> 00:03:30,830
out the same chunk to STD out, making this

81
00:03:30,830 --> 00:03:34,050
effectively an echo utility. IT will echo

82
00:03:34,050 --> 00:03:36,860
everything you type two IT. There are

83
00:03:36,860 --> 00:03:39,039
multiple ways to consume and benefit from

84
00:03:39,039 --> 00:03:41,479
these Io streams and streams. In general,

85
00:03:41,479 --> 00:03:43,830
for example, this same echo example can be

86
00:03:43,830 --> 00:03:46,650
done using the excellent pipe function

87
00:03:46,650 --> 00:03:49,060
that's available on readable streams like

88
00:03:49,060 --> 00:03:51,680
process that s t d n UI pipe readable

89
00:03:51,680 --> 00:03:53,919
stream into a rideable one like process

90
00:03:53,919 --> 00:03:56,530
that STD out using the argument for the

91
00:03:56,530 --> 00:03:58,750
pipe function. And this makes the exact

92
00:03:58,750 --> 00:04:01,580
same echo utility. We'll have a bit more

93
00:04:01,580 --> 00:04:03,129
to learn about streams later in this

94
00:04:03,129 --> 00:04:05,110
course, but for now, just make a mental

95
00:04:05,110 --> 00:04:07,389
note that streams are awesome and you

96
00:04:07,389 --> 00:04:10,939
should utilize them in every possible way.

97
00:04:10,939 --> 00:04:13,379
Notes. Process Object can also be used to

98
00:04:13,379 --> 00:04:15,879
terminate the process or do something when

99
00:04:15,879 --> 00:04:18,040
the process is terminated unexpectedly.

100
00:04:18,040 --> 00:04:20,139
Here's an example of that. This code has a

101
00:04:20,139 --> 00:04:22,399
timer that will fire after two seconds,

102
00:04:22,399 --> 00:04:24,680
and it will call the exit function on the

103
00:04:24,680 --> 00:04:26,769
process object. This will manually

104
00:04:26,769 --> 00:04:29,540
terminate the process and make note. Exit

105
00:04:29,540 --> 00:04:31,860
as note is exiting the process. It looks

106
00:04:31,860 --> 00:04:34,399
for any listeners registered on the exit

107
00:04:34,399 --> 00:04:36,839
event. We have done exactly that in here.

108
00:04:36,839 --> 00:04:39,459
Which means right before note exits, IT

109
00:04:39,459 --> 00:04:41,899
will execute this function to print out

110
00:04:41,899 --> 00:04:44,060
this message. Because of the nature of

111
00:04:44,060 --> 00:04:46,680
asynchronous code in node, this hello line

112
00:04:46,680 --> 00:04:49,990
will be executed first. Then the timer

113
00:04:49,990 --> 00:04:51,939
will go next and the exit listener will

114
00:04:51,939 --> 00:04:55,759
fire. This simple example demonstrates the

115
00:04:55,759 --> 00:04:58,480
power of note asynchronous nature and its

116
00:04:58,480 --> 00:05:01,389
event with Adala. Gee, we will learn more

117
00:05:01,389 --> 00:05:04,000
about that in the concurrency module of this course.

