0
00:00:01,240 --> 00:00:02,970
[Autogenerated] here is note. Hello World

1
00:00:02,970 --> 00:00:05,589
Example. This simple script represents a

2
00:00:05,589 --> 00:00:07,589
simple web server. You don't need to

3
00:00:07,589 --> 00:00:09,609
install anything to run this script. This

4
00:00:09,609 --> 00:00:12,750
is all nodes built in power. Don't worry

5
00:00:12,750 --> 00:00:14,929
about figuring out what's going on in this

6
00:00:14,929 --> 00:00:16,629
script just yet. We'll get there

7
00:00:16,629 --> 00:00:19,589
eventually to execute this script with

8
00:00:19,589 --> 00:00:21,859
note. You just specify the location of the

9
00:00:21,859 --> 00:00:23,870
script as the argument for the node

10
00:00:23,870 --> 00:00:26,739
command. You can actually see the location

11
00:00:26,739 --> 00:00:29,359
of this script within the Projects folder

12
00:00:29,359 --> 00:00:32,259
right here in the corner for my Adam

13
00:00:32,259 --> 00:00:34,420
editor here. And I can also click this

14
00:00:34,420 --> 00:00:37,609
region here to copy the full path for this

15
00:00:37,609 --> 00:00:40,380
file. So now I'll go ahead and paste this

16
00:00:40,380 --> 00:00:42,549
full path right here after the Note

17
00:00:42,549 --> 00:00:45,240
Command, and this will execute the file.

18
00:00:45,240 --> 00:00:47,250
As you can see, it reported back, that

19
00:00:47,250 --> 00:00:50,759
server is running the script location that

20
00:00:50,759 --> 00:00:53,090
you specify for a note. Command can also

21
00:00:53,090 --> 00:00:56,750
be relative. So if I'm inside this one

22
00:00:56,750 --> 00:00:58,630
getting started one Executing Scripts

23
00:00:58,630 --> 00:01:02,250
directory and I specify node one Hello

24
00:01:02,250 --> 00:01:05,439
world, just like that node will look for

25
00:01:05,439 --> 00:01:08,640
the file in the current working directory

26
00:01:08,640 --> 00:01:10,549
if the script that we're executing has a

27
00:01:10,549 --> 00:01:12,810
running task like a Web server listening

28
00:01:12,810 --> 00:01:15,450
for connections, for example, then Node

29
00:01:15,450 --> 00:01:17,959
will continue running. Note that if the

30
00:01:17,959 --> 00:01:21,000
script does not have a running task like

31
00:01:21,000 --> 00:01:23,019
this other script here that just prints a

32
00:01:23,019 --> 00:01:27,450
message node will execute this script and

33
00:01:27,450 --> 00:01:30,219
exit immediately after that. And what

34
00:01:30,219 --> 00:01:32,000
process exiting is a normal thing In a

35
00:01:32,000 --> 00:01:34,530
note, Cluster node will not idle and use

36
00:01:34,530 --> 00:01:37,719
resources unnecessarily okay, back to the

37
00:01:37,719 --> 00:01:40,930
simple web server script and were executed

38
00:01:40,930 --> 00:01:44,069
again. So now this simple web server

39
00:01:44,069 --> 00:01:46,579
script is running and its task is active.

40
00:01:46,579 --> 00:01:48,560
IT listens. For all the SD to-be

41
00:01:48,560 --> 00:01:50,950
connections, however, this note process

42
00:01:50,950 --> 00:01:52,859
will Onley use V eight when there are

43
00:01:52,859 --> 00:01:54,659
actually to-be connections. Otherwise, V

44
00:01:54,659 --> 00:01:58,010
eight will remain idle. Let's decipher

45
00:01:58,010 --> 00:02:00,909
this simple web server. The first line

46
00:02:00,909 --> 00:02:03,829
here is using the require function. This

47
00:02:03,829 --> 00:02:06,010
is the first thing you need to learn about

48
00:02:06,010 --> 00:02:08,520
nodes internal. The required function is

49
00:02:08,520 --> 00:02:10,729
what you use to manage the dependencies

50
00:02:10,729 --> 00:02:13,629
off your programs. You can use require to

51
00:02:13,629 --> 00:02:15,689
depend on any library. Whether this

52
00:02:15,689 --> 00:02:17,629
library is a built in one like Azure to-be

53
00:02:17,629 --> 00:02:20,490
here or if it's ah third-party installed

54
00:02:20,490 --> 00:02:23,699
library. This program here depends on the

55
00:02:23,699 --> 00:02:26,580
built in HD to-be module. It's the module

56
00:02:26,580 --> 00:02:28,960
that has the features of creating a Web

57
00:02:28,960 --> 00:02:31,319
server. There are many other libraries

58
00:02:31,319 --> 00:02:33,069
that you can use to create a Web server,

59
00:02:33,069 --> 00:02:35,110
but this one is built in. You don't need

60
00:02:35,110 --> 00:02:37,439
to install anything to use IT, but you do

61
00:02:37,439 --> 00:02:40,189
need to require IT. Remember that when we

62
00:02:40,189 --> 00:02:42,620
were in nodes rebel, this library was

63
00:02:42,620 --> 00:02:44,590
available immediately without needing to

64
00:02:44,590 --> 00:02:47,069
require IT. This is not the case with

65
00:02:47,069 --> 00:02:49,389
executable scripts like this one. You

66
00:02:49,389 --> 00:02:51,550
can't use any dependencies without

67
00:02:51,550 --> 00:02:54,550
requiring them first. This line here

68
00:02:54,550 --> 00:02:57,389
creates a server constant by invoking the

69
00:02:57,389 --> 00:03:01,039
create server function on the HDTV module.

70
00:03:01,039 --> 00:03:03,150
This function is one of the many that are

71
00:03:03,150 --> 00:03:05,930
available under the http module AP. You

72
00:03:05,930 --> 00:03:08,379
can use it to create a Web server, and IT

73
00:03:08,379 --> 00:03:11,060
accept an argument that is known as the

74
00:03:11,060 --> 00:03:13,659
request listener. This is a simple

75
00:03:13,659 --> 00:03:16,310
function that node will invoke every time

76
00:03:16,310 --> 00:03:18,520
there is a request to the created web

77
00:03:18,520 --> 00:03:21,539
server. Remember this argument. As a

78
00:03:21,539 --> 00:03:23,930
listener, this server will listen to

79
00:03:23,930 --> 00:03:25,960
requests, and it will invoke the listener

80
00:03:25,960 --> 00:03:28,569
function for each request. And this is why

81
00:03:28,569 --> 00:03:30,639
this listener function receives the

82
00:03:30,639 --> 00:03:33,949
request object as an argument. It's named

83
00:03:33,949 --> 00:03:36,000
wreck here, but you can name it. Whatever

84
00:03:36,000 --> 00:03:38,580
you need. The other argument this listener

85
00:03:38,580 --> 00:03:41,030
function receives named raise here is a

86
00:03:41,030 --> 00:03:43,430
response object. It is the other side of

87
00:03:43,430 --> 00:03:45,699
the request connection. We can use this

88
00:03:45,699 --> 00:03:47,789
object to write things back to the

89
00:03:47,789 --> 00:03:49,939
requester. It's exactly what this simple

90
00:03:49,939 --> 00:03:52,460
web server is doing its writing back using

91
00:03:52,460 --> 00:03:55,199
the DOT end method and the Hello World

92
00:03:55,199 --> 00:03:57,500
String. We'll learn about the dot end

93
00:03:57,500 --> 00:03:59,620
method later in this course, but it can be

94
00:03:59,620 --> 00:04:02,400
used as a shortcut to write data and then

95
00:04:02,400 --> 00:04:05,560
end the connection. The create server

96
00:04:05,560 --> 00:04:07,889
function on Lee creates the server. IT

97
00:04:07,889 --> 00:04:10,419
does not activate IT. To activate this web

98
00:04:10,419 --> 00:04:12,520
server, we need to invoke the dot listen,

99
00:04:12,520 --> 00:04:14,680
function on the created server.

100
00:04:14,680 --> 00:04:16,610
Dysfunction accepts many arguments like

101
00:04:16,610 --> 00:04:19,790
what OS port to use for this server? The

102
00:04:19,790 --> 00:04:21,670
last argument here is a function that will

103
00:04:21,670 --> 00:04:24,019
be invoked once the server is successfully

104
00:04:24,019 --> 00:04:26,629
running on that port. This example just

105
00:04:26,629 --> 00:04:28,730
logs the message to indicate that the

106
00:04:28,730 --> 00:04:31,410
server is now running. This listen

107
00:04:31,410 --> 00:04:33,600
function is what actually keeps the note

108
00:04:33,600 --> 00:04:36,230
process running. It's the task that will

109
00:04:36,230 --> 00:04:39,209
keep the note runtime busy and not exit

110
00:04:39,209 --> 00:04:42,199
while the server is running. If we go to a

111
00:04:42,199 --> 00:04:44,680
browser and ask for initially to-be

112
00:04:44,680 --> 00:04:47,160
connection on local host with the port

113
00:04:47,160 --> 00:04:49,529
that was used in this script 40 to 42. In

114
00:04:49,529 --> 00:04:51,959
this case, we will see the hello world

115
00:04:51,959 --> 00:04:53,779
string that this example had in its

116
00:04:53,779 --> 00:04:56,569
request. Listener, go ahead and try to

117
00:04:56,569 --> 00:04:58,339
change this line and return something

118
00:04:58,339 --> 00:05:01,310
else. You will need to restart the note

119
00:05:01,310 --> 00:05:03,550
process to make the change work. Just kill

120
00:05:03,550 --> 00:05:06,129
the process with control. See used the up

121
00:05:06,129 --> 00:05:08,509
arrow to get the last executed command and

122
00:05:08,509 --> 00:05:11,350
execute that again. If you refresh the Web

123
00:05:11,350 --> 00:05:13,610
browser now, you should see the newly

124
00:05:13,610 --> 00:05:16,899
returned strength. When we build a full

125
00:05:16,899 --> 00:05:18,519
web search, for example, I'll show you how

126
00:05:18,519 --> 00:05:20,550
to avoid needing to restart the server

127
00:05:20,550 --> 00:05:22,300
every time you change something, because

128
00:05:22,300 --> 00:05:24,089
this will be an annoying thing to keep

129
00:05:24,089 --> 00:05:27,019
doing manually. This hello World script

130
00:05:27,019 --> 00:05:29,480
uses the common GS module management

131
00:05:29,480 --> 00:05:31,399
system. Every script that uses this

132
00:05:31,399 --> 00:05:33,810
require key word here is classified by

133
00:05:33,810 --> 00:05:36,860
note as a common JSON module. Note also

134
00:05:36,860 --> 00:05:39,240
supports the JavaScript module management,

135
00:05:39,240 --> 00:05:41,980
and you can use that in two ways, either

136
00:05:41,980 --> 00:05:45,040
by naming the file with the dot M. J s

137
00:05:45,040 --> 00:05:47,079
extension, which I'll show you right here

138
00:05:47,079 --> 00:05:49,689
or by setting the whole project to use app

139
00:05:49,689 --> 00:05:51,459
JavaScript modules. I'll show you that

140
00:05:51,459 --> 00:05:54,370
option in the npm course module. So let me

141
00:05:54,370 --> 00:05:57,000
copy this one. Hello world dot Js file

142
00:05:57,000 --> 00:05:59,790
keeping the content as is and given IT at

143
00:05:59,790 --> 00:06:03,209
dot m j s extension. This time, if you try

144
00:06:03,209 --> 00:06:05,629
to run this script node will complain

145
00:06:05,629 --> 00:06:07,769
about the require keyword because it

146
00:06:07,769 --> 00:06:09,589
understood that this is an Acma script

147
00:06:09,589 --> 00:06:12,310
module because of its extension. And with

148
00:06:12,310 --> 00:06:14,569
Acma script modules, we don't use the

149
00:06:14,569 --> 00:06:17,459
require keyword at all. We use the import

150
00:06:17,459 --> 00:06:20,959
keyword Let's fix it. This is the problem

151
00:06:20,959 --> 00:06:24,639
line To fix it, we use the following

152
00:06:24,639 --> 00:06:27,149
import then the name of what you want to

153
00:06:27,149 --> 00:06:30,300
import. In this case, it's HD to-be then

154
00:06:30,300 --> 00:06:32,689
from the location of the module you're

155
00:06:32,689 --> 00:06:35,209
importing or just the name for built in

156
00:06:35,209 --> 00:06:38,279
modules like SDK to-be here. So import

157
00:06:38,279 --> 00:06:42,410
something from module, path or name, and

158
00:06:42,410 --> 00:06:45,480
this will now work. There's also another

159
00:06:45,480 --> 00:06:47,379
Centex we-can use with import which is

160
00:06:47,379 --> 00:06:50,839
called named imports. Let me show you that

161
00:06:50,839 --> 00:06:53,029
you see, this creates server method that

162
00:06:53,029 --> 00:06:54,779
we're using here through the SD to-be

163
00:06:54,779 --> 00:06:57,509
object. Well, we can import that

164
00:06:57,509 --> 00:07:00,019
particular method using this curly

165
00:07:00,019 --> 00:07:03,000
brackets Centex and then use it directly

166
00:07:03,000 --> 00:07:05,100
in the code. So instead of importing the

167
00:07:05,100 --> 00:07:07,589
whole HD to-be object, we used a named

168
00:07:07,589 --> 00:05:30,000
import and Onley imported what the script uses.

