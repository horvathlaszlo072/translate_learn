0
00:00:00,940 --> 00:00:02,720
[Autogenerated] note makes it very easy

1
00:00:02,720 --> 00:00:04,639
for you to do network programming and

2
00:00:04,639 --> 00:00:07,269
create a full and customizable Web server.

3
00:00:07,269 --> 00:00:10,380
And it's all built in the run time. We've

4
00:00:10,380 --> 00:00:12,070
seen this hello world example in the

5
00:00:12,070 --> 00:00:13,619
second module of this course when we

6
00:00:13,619 --> 00:00:15,679
talked about requiring scripts. I've

7
00:00:15,679 --> 00:00:18,339
placed it here under the folder five web

8
00:00:18,339 --> 00:00:20,070
to talk a little bit more about this S t

9
00:00:20,070 --> 00:00:22,239
to-be module. As you know this, actually

10
00:00:22,239 --> 00:00:24,019
to-be module is a built in one. It comes

11
00:00:24,019 --> 00:00:25,789
with note. This is why we were able to run

12
00:00:25,789 --> 00:00:27,660
this code without needing to npm install

13
00:00:27,660 --> 00:00:30,190
anything. But if instead of SD to-be here,

14
00:00:30,190 --> 00:00:32,609
we wanted to use another web framework Say

15
00:00:32,609 --> 00:00:35,649
express, for example, we would need to npm

16
00:00:35,649 --> 00:00:38,509
install the express package in this folder

17
00:00:38,509 --> 00:00:40,560
before we can use it. But we don't need to

18
00:00:40,560 --> 00:00:42,429
install anything for the built in,

19
00:00:42,429 --> 00:00:45,600
actually, to-be module the require call

20
00:00:45,600 --> 00:00:47,649
here returned something. It's just a

21
00:00:47,649 --> 00:00:49,280
function call. And if you remember from

22
00:00:49,280 --> 00:00:51,149
the previous module of this course, this

23
00:00:51,149 --> 00:00:54,240
require call returns the a p I off the

24
00:00:54,240 --> 00:00:56,630
module that we're requiring in here we're

25
00:00:56,630 --> 00:00:59,100
capturing the A P I of the HDTV module

26
00:00:59,100 --> 00:01:01,799
into a local variable which we also named

27
00:01:01,799 --> 00:01:03,789
HD to-be. We don't have to, but that's

28
00:01:03,789 --> 00:01:06,540
usually the convention. This local SD

29
00:01:06,540 --> 00:01:08,530
to-be variable now has all the methods

30
00:01:08,530 --> 00:01:11,060
defined on the public a P I of the HDTV

31
00:01:11,060 --> 00:01:13,079
module, for example. One of these methods

32
00:01:13,079 --> 00:01:15,739
is create server, which we're using here.

33
00:01:15,739 --> 00:01:17,230
The create server is a function that

34
00:01:17,230 --> 00:01:19,209
accepts an argument, and its argument is

35
00:01:19,209 --> 00:01:21,950
also a function. This is why we have an in

36
00:01:21,950 --> 00:01:24,430
line function reference here. This might

37
00:01:24,430 --> 00:01:26,269
be a bit confusing if you heard the term

38
00:01:26,269 --> 00:01:28,799
that functions are first class citizens in

39
00:01:28,799 --> 00:01:31,709
JavaScript. This here is exactly what we

40
00:01:31,709 --> 00:01:34,290
mean by that we can pass functions as

41
00:01:34,290 --> 00:01:37,140
arguments to other functions. Another term

42
00:01:37,140 --> 00:01:39,159
that you might have heard of here is the

43
00:01:39,159 --> 00:01:41,659
term higher order functions. Those are

44
00:01:41,659 --> 00:01:44,349
functions that receive other functions as

45
00:01:44,349 --> 00:01:47,670
arguments or return other functions in our

46
00:01:47,670 --> 00:01:49,859
code sample here that creates server

47
00:01:49,859 --> 00:01:51,909
function is a higher order functions

48
00:01:51,909 --> 00:01:54,549
because it receives another function as an

49
00:01:54,549 --> 00:01:57,099
argument. So let me improve this code a

50
00:01:57,099 --> 00:01:59,719
little bit by extracting this anonymous

51
00:01:59,719 --> 00:02:01,540
function that we're passing to create

52
00:02:01,540 --> 00:02:04,439
server and give it a name instead. So I'm

53
00:02:04,439 --> 00:02:06,700
gonna capture it in a constant here on

54
00:02:06,700 --> 00:02:10,500
Let's name IT. Request listener here and

55
00:02:10,500 --> 00:02:12,219
I'm just gonna peace They could that I

56
00:02:12,219 --> 00:02:15,030
just cut from create server. Now the

57
00:02:15,030 --> 00:02:17,750
create server method can be passed The

58
00:02:17,750 --> 00:02:20,460
request listener variable itself which

59
00:02:20,460 --> 00:02:22,750
holds a reference to the function. This is

60
00:02:22,750 --> 00:02:25,639
equivalent to what we had before.

61
00:02:25,639 --> 00:02:28,460
Important side note. Here you pass in the

62
00:02:28,460 --> 00:02:31,680
function reference here. You do not call

63
00:02:31,680 --> 00:02:34,789
it like that. This is a big difference. By

64
00:02:34,789 --> 00:02:36,990
calling the function the argument value

65
00:02:36,990 --> 00:02:38,939
here becomes what the function returns,

66
00:02:38,939 --> 00:02:41,900
not the function itself. What we want here

67
00:02:41,900 --> 00:02:44,580
is to pass a reference to the function

68
00:02:44,580 --> 00:02:46,900
itself which is basically a pointer toe

69
00:02:46,900 --> 00:02:49,550
where the function is defined. Listener

70
00:02:49,550 --> 00:02:52,009
functions received two objects the request

71
00:02:52,009 --> 00:02:54,460
object and the response object. Now I name

72
00:02:54,460 --> 00:02:56,250
them. Reckon rest here, but you can really

73
00:02:56,250 --> 00:02:58,469
name them anything. These are positional

74
00:02:58,469 --> 00:03:00,669
arguments. The first argument represent

75
00:03:00,669 --> 00:03:03,159
the request side of a request event. And

76
00:03:03,159 --> 00:03:04,900
the second argument represents the

77
00:03:04,900 --> 00:03:07,430
response side of a request event. They're

78
00:03:07,430 --> 00:03:10,530
famously named wreck and raise. So the

79
00:03:10,530 --> 00:03:13,240
request listener here is a function that

80
00:03:13,240 --> 00:03:15,419
will be invoked every time there is a

81
00:03:15,419 --> 00:03:18,199
request event. This is important. Remember

82
00:03:18,199 --> 00:03:19,860
when we talked about event emitters in the

83
00:03:19,860 --> 00:03:22,479
previous module. Well, guess what This

84
00:03:22,479 --> 00:03:24,789
server object that we get as a result of

85
00:03:24,789 --> 00:03:27,099
calling the create server method is an

86
00:03:27,099 --> 00:03:29,770
event emitter. And one of the events it

87
00:03:29,770 --> 00:03:33,259
emits is named request. In fact, this same

88
00:03:33,259 --> 00:03:35,340
code can be rewritten using the event

89
00:03:35,340 --> 00:03:37,930
emitter ap I Instead of passing the

90
00:03:37,930 --> 00:03:40,319
request listener function to create

91
00:03:40,319 --> 00:03:45,229
server, we can use a call to server dot on

92
00:03:45,229 --> 00:03:48,500
the event Name is request and pass the

93
00:03:48,500 --> 00:03:52,819
request listener right here. Every time we

94
00:03:52,819 --> 00:03:55,199
have a request, Event-Hubs into this

95
00:03:55,199 --> 00:03:57,960
server were instructing the server object

96
00:03:57,960 --> 00:04:01,139
to execute our request listener function.

97
00:04:01,139 --> 00:04:03,310
Are you connecting the dots now? I

98
00:04:03,310 --> 00:04:04,909
actually like this version Better than

99
00:04:04,909 --> 00:04:06,620
using the shorthand notation of create

100
00:04:06,620 --> 00:04:08,740
server. I think it's just more readable

101
00:04:08,740 --> 00:04:11,469
inside the request handling function here

102
00:04:11,469 --> 00:04:13,900
we can read information about the request

103
00:04:13,900 --> 00:04:16,259
using the wreck object, for example, we

104
00:04:16,259 --> 00:04:17,939
can read what you are all the user is

105
00:04:17,939 --> 00:04:19,970
requesting. What parameters are they

106
00:04:19,970 --> 00:04:22,259
sending along? What I p are they coming

107
00:04:22,259 --> 00:04:25,319
from? And many other things we-can right

108
00:04:25,319 --> 00:04:27,189
data back to the requester using the

109
00:04:27,189 --> 00:04:29,189
response object here, which is what we're

110
00:04:29,189 --> 00:04:32,970
doing using the end method this Docker end

111
00:04:32,970 --> 00:04:36,040
method is equivalent to doing that right

112
00:04:36,040 --> 00:04:38,939
and then doing response The end. It's just

113
00:04:38,939 --> 00:04:41,800
a shorthand notation to writing a single

114
00:04:41,800 --> 00:04:44,889
line and ending the connection. Since this

115
00:04:44,889 --> 00:04:46,449
is an SD to-be communication thing, we

116
00:04:46,449 --> 00:04:48,410
need to follow the SD to-be protocol. That

117
00:04:48,410 --> 00:04:49,959
protocol, for example, requires an

118
00:04:49,959 --> 00:04:52,519
explicit signal that the communication is

119
00:04:52,519 --> 00:04:54,680
over. This is exactly why we need to use

120
00:04:54,680 --> 00:04:57,149
the end method here. This dot and method

121
00:04:57,149 --> 00:04:59,079
is not optional, because without it, the

122
00:04:59,079 --> 00:05:00,699
SD to-be session will think that we're

123
00:05:00,699 --> 00:05:03,680
still streaming data to IT. And of course,

124
00:05:03,680 --> 00:05:05,490
we talked about how the create server

125
00:05:05,490 --> 00:05:07,149
Onley creates the server method. It

126
00:05:07,149 --> 00:05:08,810
doesn't make it actively listening to

127
00:05:08,810 --> 00:05:11,259
requests to run the server and activated.

128
00:05:11,259 --> 00:05:13,149
UI needed to call the dot listen method on

129
00:05:13,149 --> 00:05:15,509
the server object this listen method

130
00:05:15,509 --> 00:05:18,000
except many arguments. The first argument

131
00:05:18,000 --> 00:05:19,949
is the operating system port, on which we

132
00:05:19,949 --> 00:05:21,519
want the server to listen to incoming

133
00:05:21,519 --> 00:05:23,589
requests and the last argument. If you

134
00:05:23,589 --> 00:05:25,889
remember the idiomatic callback pattern,

135
00:05:25,889 --> 00:05:28,389
this is our callback that will get invoked

136
00:05:28,389 --> 00:05:30,610
if the server reserved the port and

137
00:05:30,610 --> 00:05:33,230
started listening on it successfully. This

138
00:05:33,230 --> 00:05:35,319
loss argument callback can be used as a

139
00:05:35,319 --> 00:05:37,079
conformation here that the server is

140
00:05:37,079 --> 00:05:39,120
ready. That's why we're console logging.

141
00:05:39,120 --> 00:05:41,620
The confirmation message. The reason we

142
00:05:41,620 --> 00:05:43,139
needed to use that callback fork

143
00:05:43,139 --> 00:05:45,170
information here is because the listen

144
00:05:45,170 --> 00:05:49,139
method itself is an asynchronous one. Note

145
00:05:49,139 --> 00:05:51,660
also, that when we run this file, the note

146
00:05:51,660 --> 00:05:54,120
process did not exit because the event

147
00:05:54,120 --> 00:05:56,519
Lube is now also busy listening to

148
00:05:56,519 --> 00:06:01,000
incoming connections on Port 40 to 42 it will do that forever.

