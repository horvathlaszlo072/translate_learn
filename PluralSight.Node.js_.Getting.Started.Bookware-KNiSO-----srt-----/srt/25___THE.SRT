0
00:00:00,940 --> 00:00:02,419
[Autogenerated] as a note developer, you

1
00:00:02,419 --> 00:00:04,429
will be working with the npm command a

2
00:00:04,429 --> 00:00:07,209
lot. This command comes installed with

3
00:00:07,209 --> 00:00:08,730
node itself so you don't need to do

4
00:00:08,730 --> 00:00:10,720
anything to install it. If you have not

5
00:00:10,720 --> 00:00:13,009
installed, you should have the global npm

6
00:00:13,009 --> 00:00:14,900
command installed as well. You can check

7
00:00:14,900 --> 00:00:18,589
the version with dash V. Npm gets updated

8
00:00:18,589 --> 00:00:21,059
more frequently than note. So sometimes

9
00:00:21,059 --> 00:00:22,980
you might need to update npm itself

10
00:00:22,980 --> 00:00:25,089
separately from note to get the latest

11
00:00:25,089 --> 00:00:28,109
release. You do that using the command npm

12
00:00:28,109 --> 00:00:32,289
install dash G for global npm. Yep. You

13
00:00:32,289 --> 00:00:35,920
can use npm to update npm If you get an e

14
00:00:35,920 --> 00:00:38,750
access air here, that means you most

15
00:00:38,750 --> 00:00:41,000
likely installed node itself with some

16
00:00:41,000 --> 00:00:43,310
admin privileges. You can use pseudo in

17
00:00:43,310 --> 00:00:45,210
that case, or start a whole terminal with

18
00:00:45,210 --> 00:00:48,299
admin privileges on Mac OS. If you install

19
00:00:48,299 --> 00:00:51,469
node through homebrew or npm, you usually

20
00:00:51,469 --> 00:00:53,740
don't need to sue do any note or npm

21
00:00:53,740 --> 00:00:56,439
commands. If you are facing the access

22
00:00:56,439 --> 00:00:58,310
error, you can also fix the npm

23
00:00:58,310 --> 00:01:00,210
permissions so that you don't have to run.

24
00:01:00,210 --> 00:01:02,700
Npm would suit you. Let's quickly explore

25
00:01:02,700 --> 00:01:04,689
the first command of npm, the one that we

26
00:01:04,689 --> 00:01:07,099
just used install to do that I'm going to

27
00:01:07,099 --> 00:01:10,750
create a test directory test npm CD into

28
00:01:10,750 --> 00:01:15,370
that and run npm install. By the way,

29
00:01:15,370 --> 00:01:17,150
install has a shortcut. You can just do

30
00:01:17,150 --> 00:01:20,010
npm my, which is cool. And we're going to

31
00:01:20,010 --> 00:01:23,810
install one package called Express. So

32
00:01:23,810 --> 00:01:26,930
this npm install command is our client

33
00:01:26,930 --> 00:01:29,599
that just downloaded the package from its

34
00:01:29,599 --> 00:01:32,489
source, which by default is the npm just

35
00:01:32,489 --> 00:01:34,260
that calm registry itself. But you can

36
00:01:34,260 --> 00:01:36,069
configure the command for other sources.

37
00:01:36,069 --> 00:01:38,780
And after IT downloaded that package, npm

38
00:01:38,780 --> 00:01:40,859
placed the package in a special folder

39
00:01:40,859 --> 00:01:44,000
under the project named Node Modules. So

40
00:01:44,000 --> 00:01:45,799
this is the process that's known as

41
00:01:45,799 --> 00:01:48,250
installing a package. But there's nothing

42
00:01:48,250 --> 00:01:50,609
magic about it, really. It just places the

43
00:01:50,609 --> 00:01:53,540
package under this Node Modules folder.

44
00:01:53,540 --> 00:01:56,769
Note itself is designed to use this note

45
00:01:56,769 --> 00:01:59,370
modules folder by default toe. Look for

46
00:01:59,370 --> 00:02:02,269
any packages IT needs to use. When note

47
00:02:02,269 --> 00:02:04,599
needs to require a package like express

48
00:02:04,599 --> 00:02:07,109
here, it does not communicate with npm at

49
00:02:07,109 --> 00:02:09,849
all. It just uses the note modules, folder

50
00:02:09,849 --> 00:02:12,419
and packages that were placed inside that

51
00:02:12,419 --> 00:02:15,849
note modules folder. Did you notice how

52
00:02:15,849 --> 00:02:18,180
when I installed the express package here,

53
00:02:18,180 --> 00:02:21,069
npm warned me that this folder does not

54
00:02:21,069 --> 00:02:24,669
have a package. Jason, file this package.

55
00:02:24,669 --> 00:02:26,740
That Jason file is important. So let's

56
00:02:26,740 --> 00:02:28,610
redo this example with a package that

57
00:02:28,610 --> 00:02:32,250
Jason File. I have a folder in the three

58
00:02:32,250 --> 00:02:35,020
npm folder here called one npm command.

59
00:02:35,020 --> 00:02:36,969
And this folder has the package that Jason

60
00:02:36,969 --> 00:02:40,219
file. So let's see d into this folder and

61
00:02:40,219 --> 00:02:43,599
redo the npm install express command and

62
00:02:43,599 --> 00:02:45,849
note what happens to the package that

63
00:02:45,849 --> 00:02:49,490
Jason file. Did you see that? The package

64
00:02:49,490 --> 00:02:51,639
that Jason file had a new section here.

65
00:02:51,639 --> 00:02:53,340
This is the section where npm is

66
00:02:53,340 --> 00:02:55,710
documenting this new dependency for this

67
00:02:55,710 --> 00:02:58,939
project Express. Not only that, the npm

68
00:02:58,939 --> 00:03:00,990
installed process will also take care of

69
00:03:00,990 --> 00:03:03,500
installing any sub dependencies for the

70
00:03:03,500 --> 00:03:06,340
main installed package. Take a look at

71
00:03:06,340 --> 00:03:08,259
what you now should see under the Node

72
00:03:08,259 --> 00:03:11,580
Modules folder. Although we asked npm to

73
00:03:11,580 --> 00:03:14,500
install a single dependency express, npm

74
00:03:14,500 --> 00:03:16,689
installed many other dependencies. What

75
00:03:16,689 --> 00:03:19,460
exactly are these? These are the packages

76
00:03:19,460 --> 00:03:22,469
that express itself depends on. And since

77
00:03:22,469 --> 00:03:25,020
we made our project depend on express,

78
00:03:25,020 --> 00:03:27,099
these other packages are now in the

79
00:03:27,099 --> 00:03:30,000
projects. Sub dependencies. Okay, so let

80
00:03:30,000 --> 00:03:32,569
me quickly review what happened when we

81
00:03:32,569 --> 00:03:35,539
invoked the command npm install Express.

82
00:03:35,539 --> 00:03:38,599
Npm first created a new Node Modules

83
00:03:38,599 --> 00:03:40,930
folder because that folder did not exist

84
00:03:40,930 --> 00:03:44,340
before the first npm install will do that.

85
00:03:44,340 --> 00:03:47,439
Npm then downloaded express package from

86
00:03:47,439 --> 00:03:50,349
npm just dot com and placed it under the

87
00:03:50,349 --> 00:03:53,810
newly created Note Modules folder. IT then

88
00:03:53,810 --> 00:03:56,379
modified the package that Jason file to

89
00:03:56,379 --> 00:03:58,740
document this exact dependency and the

90
00:03:58,740 --> 00:04:01,169
version used for this dependency. And it

91
00:04:01,169 --> 00:04:04,189
also created a package dash lock Jason

92
00:04:04,189 --> 00:04:07,129
File. So let's talk about these two files.

93
00:04:07,129 --> 00:04:17,000
Package that Jason and package lock that Jason.

