0
00:00:01,439 --> 00:00:03,080
[Autogenerated] JavaScript offers many

1
00:00:03,080 --> 00:00:05,450
programming paradigms and object oriented

2
00:00:05,450 --> 00:00:07,719
programming is one of them. Everything in

3
00:00:07,719 --> 00:00:09,609
JavaScript is an object, including

4
00:00:09,609 --> 00:00:12,730
functions. Modern JavaScript also added

5
00:00:12,730 --> 00:00:16,250
support for the class. Centex A class is a

6
00:00:16,250 --> 00:00:18,739
template or blueprint for you to define

7
00:00:18,739 --> 00:00:21,160
shared structure and behavior between

8
00:00:21,160 --> 00:00:23,359
similar objects. You can define new

9
00:00:23,359 --> 00:00:25,589
classes, make them extend other classes

10
00:00:25,589 --> 00:00:28,149
and instantiate objects out of them. Using

11
00:00:28,149 --> 00:00:30,420
the new keyword, you can customize the

12
00:00:30,420 --> 00:00:32,670
construction of every object and define

13
00:00:32,670 --> 00:00:35,840
shared functions between these objects.

14
00:00:35,840 --> 00:00:38,750
Here is a standard class example that

15
00:00:38,750 --> 00:00:41,549
demonstrate all these features. We have a

16
00:00:41,549 --> 00:00:43,909
person class and the student class that

17
00:00:43,909 --> 00:00:46,850
extends the person class. Every student is

18
00:00:46,850 --> 00:00:49,500
also a person. Both classes define a

19
00:00:49,500 --> 00:00:51,750
constructor function. The constructor

20
00:00:51,750 --> 00:00:54,090
function is a special one that gets called

21
00:00:54,090 --> 00:00:56,799
every time UI instantiate an object out of

22
00:00:56,799 --> 00:00:58,920
the class which we do using the new

23
00:00:58,920 --> 00:01:01,270
keyword. As you can see here we are

24
00:01:01,270 --> 00:01:03,259
instantiate ing one object from the person

25
00:01:03,259 --> 00:01:05,189
class and two other objects from the

26
00:01:05,189 --> 00:01:08,780
student class. The arguments we pass here

27
00:01:08,780 --> 00:01:11,049
when UI instantiate these objects are

28
00:01:11,049 --> 00:01:13,209
accessible in the classes constructor

29
00:01:13,209 --> 00:01:16,260
function. The person class expects a name

30
00:01:16,260 --> 00:01:18,969
argument. IT stores the value on the

31
00:01:18,969 --> 00:01:21,810
instance, using the whiskey word here and

32
00:01:21,810 --> 00:01:24,120
the student class expects a name and the

33
00:01:24,120 --> 00:01:27,519
level arguments. IT stores the level value

34
00:01:27,519 --> 00:01:30,469
on its instance, and since it extends the

35
00:01:30,469 --> 00:01:33,209
person class, it'll call the super method

36
00:01:33,209 --> 00:01:35,700
with the name argument, which will invoke

37
00:01:35,700 --> 00:01:37,980
the person class constructor function and

38
00:01:37,980 --> 00:01:40,689
store. The name is well. Both classes

39
00:01:40,689 --> 00:01:43,170
define a greet function that uses the

40
00:01:43,170 --> 00:01:46,400
values they store on each instance on the

41
00:01:46,400 --> 00:01:48,540
third object, which UI instantiate IT from

42
00:01:48,540 --> 00:01:51,090
the student class here. We also defined

43
00:01:51,090 --> 00:01:54,439
agreed function directly on the object.

44
00:01:54,439 --> 00:01:58,159
When we test this script, 01 will use the

45
00:01:58,159 --> 00:02:00,670
greet method from its class. The person

46
00:02:00,670 --> 00:02:03,670
class 02 will use the great method from

47
00:02:03,670 --> 00:02:10,000
the student class and 03 will use its own directly defined greet method.

