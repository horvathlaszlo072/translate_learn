0
00:00:00,240 --> 00:00:01,399
[Autogenerated] What is the difference

1
00:00:01,399 --> 00:00:04,509
between errors and exceptions and error is

2
00:00:04,509 --> 00:00:08,039
simply a problem. Unknown problem

3
00:00:08,039 --> 00:00:10,509
applications are usually not prepared to

4
00:00:10,509 --> 00:00:13,189
deal with it, while an exception is a

5
00:00:13,189 --> 00:00:16,030
condition that applications know about and

6
00:00:16,030 --> 00:00:19,379
are prepared to deal with it. They catch

7
00:00:19,379 --> 00:00:21,739
that condition and do something with it.

8
00:00:21,739 --> 00:00:24,890
Let's talk about that in note. In The Five

9
00:00:24,890 --> 00:00:28,010
Errors Directory here, I have three files.

10
00:00:28,010 --> 00:00:30,679
The first file is one loop, and this file

11
00:00:30,679 --> 00:00:32,869
is simply looping over an array of the

12
00:00:32,869 --> 00:00:35,460
files, which uses files from the same

13
00:00:35,460 --> 00:00:38,229
directory. I'm looping over this Falls

14
00:00:38,229 --> 00:00:41,369
array using a four each call. And for each

15
00:00:41,369 --> 00:00:43,929
file, we are basically reading the content

16
00:00:43,929 --> 00:00:46,359
of the file using the read file sync

17
00:00:46,359 --> 00:00:47,939
method, which is the first time we're

18
00:00:47,939 --> 00:00:50,070
seeing this method. It's equivalent to

19
00:00:50,070 --> 00:00:52,119
read file, but it will do the reading

20
00:00:52,119 --> 00:00:54,740
synchronously, not a synchronously. We're

21
00:00:54,740 --> 00:00:56,079
going to talk a little bit more about that

22
00:00:56,079 --> 00:00:57,679
in the future, of course module. But for

23
00:00:57,679 --> 00:01:00,219
now, let's focus on thinking about what's

24
00:01:00,219 --> 00:01:02,439
gonna happen when this code encounters a

25
00:01:02,439 --> 00:01:04,810
problem. So let's quickly run this code

26
00:01:04,810 --> 00:01:06,120
and make sure it doesn't have any

27
00:01:06,120 --> 00:01:08,969
problems. Right now it is running, and

28
00:01:08,969 --> 00:01:11,939
it's reading to files data. Very good.

29
00:01:11,939 --> 00:01:15,599
Now, what if I injected? Ah, file path

30
00:01:15,599 --> 00:01:19,319
here. That does not exist. So this file

31
00:01:19,319 --> 00:01:21,129
now in the middle does not exist in the

32
00:01:21,129 --> 00:01:22,829
current directory. What do you think that

33
00:01:22,829 --> 00:01:26,349
good is going to do? The code is going to

34
00:01:26,349 --> 00:01:29,549
try and read a file that does not exist

35
00:01:29,549 --> 00:01:32,819
and note will _____ and exit. So after

36
00:01:32,819 --> 00:01:35,269
reading the first file successfully for

37
00:01:35,269 --> 00:01:38,250
the second file note crashed on we're not

38
00:01:38,250 --> 00:01:40,969
reading the third file in here. And this

39
00:01:40,969 --> 00:01:43,769
is normal when note executes an error like

40
00:01:43,769 --> 00:01:46,060
this one, which is basically not planned

41
00:01:46,060 --> 00:01:48,870
for it will just _____. And this is

42
00:01:48,870 --> 00:01:50,379
important to remember here because

43
00:01:50,379 --> 00:01:52,900
although this process started the infinite

44
00:01:52,900 --> 00:01:56,120
event lube to do any a sync actions, IT

45
00:01:56,120 --> 00:01:58,159
immediately stop that lube when it

46
00:01:58,159 --> 00:02:01,409
encountered this unexpected. There, I say

47
00:02:01,409 --> 00:02:03,750
unexpected error here because the code did

48
00:02:03,750 --> 00:02:06,019
not account for the possibility of that

49
00:02:06,019 --> 00:02:09,159
error. We can make this code account for

50
00:02:09,159 --> 00:02:11,460
the error by simply making an exception

51
00:02:11,460 --> 00:02:14,550
for IT. UI right code to represent that

52
00:02:14,550 --> 00:02:17,460
exception. So let's assume that trying to

53
00:02:17,460 --> 00:02:19,759
read a file that does not exist is not

54
00:02:19,759 --> 00:02:21,710
really a problem for this code. We're

55
00:02:21,710 --> 00:02:23,930
gonna upgrade this case from a problem

56
00:02:23,930 --> 00:02:26,530
which is an error into a condition which

57
00:02:26,530 --> 00:02:29,199
is an exception. And the easiest way to do

58
00:02:29,199 --> 00:02:32,629
that is through a try catch statement. So

59
00:02:32,629 --> 00:02:34,669
if you look at the second example file

60
00:02:34,669 --> 00:02:37,939
under this folder here to try this good is

61
00:02:37,939 --> 00:02:40,030
using the same invalid file and the same

62
00:02:40,030 --> 00:02:42,990
code. Except now I've put the file reading

63
00:02:42,990 --> 00:02:46,930
part inside a dry catch statement. So try

64
00:02:46,930 --> 00:02:51,419
this code and catch any errors. And inside

65
00:02:51,419 --> 00:02:53,539
this catch block we-can, do whatever we

66
00:02:53,539 --> 00:02:56,169
want with this error object. Once you

67
00:02:56,169 --> 00:02:58,460
catch the error like this, the note

68
00:02:58,460 --> 00:03:00,830
process will not _____ an exit when it

69
00:03:00,830 --> 00:03:03,129
encounters any error within the catch

70
00:03:03,129 --> 00:03:06,479
block when we run this code, because it's

71
00:03:06,479 --> 00:03:08,979
going to generate an error. But that error

72
00:03:08,979 --> 00:03:11,520
is wrapped inside a try catch statement.

73
00:03:11,520 --> 00:03:14,580
The catch block will be executed. So not

74
00:03:14,580 --> 00:03:17,039
how the note process did not _____. We

75
00:03:17,039 --> 00:03:18,840
just got the file not found message for

76
00:03:18,840 --> 00:03:21,009
the second file. And then the note process

77
00:03:21,009 --> 00:03:23,919
continued to read third file because now

78
00:03:23,919 --> 00:03:26,280
an invalid file path is no longer a

79
00:03:26,280 --> 00:03:29,039
problem here. It's just an exception in

80
00:03:29,039 --> 00:03:31,340
this code. It is okay to encounter files

81
00:03:31,340 --> 00:03:33,460
that do not exist and just continue with

82
00:03:33,460 --> 00:03:35,879
code. So this is a great feature, but it's

83
00:03:35,879 --> 00:03:38,819
also a dangerous one. This code means that

84
00:03:38,819 --> 00:03:40,939
we're okay with non existing files when we

85
00:03:40,939 --> 00:03:43,539
attempt to read them. But it also means

86
00:03:43,539 --> 00:03:45,919
that we're OK with any errors that

87
00:03:45,919 --> 00:03:48,189
happened when we read a file. Not just the

88
00:03:48,189 --> 00:03:50,729
error about a file that's not there. If,

89
00:03:50,729 --> 00:03:53,069
for example, the file is there but has

90
00:03:53,069 --> 00:03:55,680
corrupt data, this good will treat the

91
00:03:55,680 --> 00:03:58,060
other error exactly the same. Making this

92
00:03:58,060 --> 00:04:00,610
council logline here Not really inaccurate

93
00:04:00,610 --> 00:04:03,849
one. Let me simulate that. The second

94
00:04:03,849 --> 00:04:06,770
argument for read file sync here except an

95
00:04:06,770 --> 00:04:10,319
encoding string So you can pass an utf

96
00:04:10,319 --> 00:04:12,990
eight here to say I'd like to encode the

97
00:04:12,990 --> 00:04:15,009
content of this file when I read it with

98
00:04:15,009 --> 00:04:17,759
utf eight, let's pass an invalid,

99
00:04:17,759 --> 00:04:20,120
including label. If you execute, that

100
00:04:20,120 --> 00:04:22,949
could now because we did try, catch and

101
00:04:22,949 --> 00:04:25,050
generically saying file not found. When

102
00:04:25,050 --> 00:04:27,480
you encounter an error, we're going to see

103
00:04:27,480 --> 00:04:29,439
the file not found message for all of

104
00:04:29,439 --> 00:04:31,800
them. But really the error that happened

105
00:04:31,800 --> 00:04:34,399
was not file not found. The error that's

106
00:04:34,399 --> 00:04:36,560
happening here is that the second argument

107
00:04:36,560 --> 00:04:39,029
to read File sync is an invalid, including

108
00:04:39,029 --> 00:04:42,410
label, so this console log message is not

109
00:04:42,410 --> 00:04:44,360
accurate. Amore Accurate message here

110
00:04:44,360 --> 00:04:46,350
would be something went wrong, and we're

111
00:04:46,350 --> 00:04:48,560
going to completely ignore it because this

112
00:04:48,560 --> 00:04:51,139
is just a generic catching of the error

113
00:04:51,139 --> 00:04:54,300
and that's not good. Here's the thing. If

114
00:04:54,300 --> 00:04:56,639
you want your code to Onley, catch the

115
00:04:56,639 --> 00:04:59,519
case for non existing files. You should

116
00:04:59,519 --> 00:05:01,699
make this catch block here a bit more

117
00:05:01,699 --> 00:05:04,509
specific in the third example file here.

118
00:05:04,509 --> 00:05:06,639
You're going to see an example of that.

119
00:05:06,639 --> 00:05:08,519
Take a look at three. Throw that jazz and

120
00:05:08,519 --> 00:05:10,680
you'll notice the exact same code. Except

121
00:05:10,680 --> 00:05:12,720
we're not generically catching the error

122
00:05:12,720 --> 00:05:15,500
message. We have an if statement on this.

123
00:05:15,500 --> 00:05:18,019
If statement is basically saying Onley,

124
00:05:18,019 --> 00:05:20,600
ignore the error. If it's a file not found

125
00:05:20,600 --> 00:05:23,829
error. Otherwise, throw the error object

126
00:05:23,829 --> 00:05:26,920
again, and this throw line is what note

127
00:05:26,920 --> 00:05:28,709
would have done with the error if we did

128
00:05:28,709 --> 00:05:31,290
not have a try catch statement making this

129
00:05:31,290 --> 00:05:33,649
code only ignore a specific case and

130
00:05:33,649 --> 00:05:36,439
perform the default behavior. Otherwise,

131
00:05:36,439 --> 00:05:38,589
in note, the default behavior oven error

132
00:05:38,589 --> 00:05:40,740
is to have the process exit because the

133
00:05:40,740 --> 00:05:43,430
state of that process is unknown and it is

134
00:05:43,430 --> 00:05:45,430
not safe to continue running with an

135
00:05:45,430 --> 00:05:48,959
unknown state. So let's try this one node

136
00:05:48,959 --> 00:05:52,459
three. Throw that us. This is fine here

137
00:05:52,459 --> 00:05:54,449
because this is an actual file, not found

138
00:05:54,449 --> 00:05:57,029
error. And now let's simulate a bad,

139
00:05:57,029 --> 00:05:59,759
including string again. Run the process

140
00:05:59,759 --> 00:06:01,720
and the process will _____ and exit

141
00:06:01,720 --> 00:06:03,949
because this is a problem. It's an unknown

142
00:06:03,949 --> 00:06:06,379
error, unknown state of the process, and

143
00:06:06,379 --> 00:06:29,000
the safest thing to do for that case is to have the process _____ and exit.

