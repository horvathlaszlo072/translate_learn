0
00:00:00,640 --> 00:00:01,840
[Autogenerated] the package that Jason

1
00:00:01,840 --> 00:00:03,890
File is the one file that you'll see in

2
00:00:03,890 --> 00:00:06,940
every npm package. It's adjacent file that

3
00:00:06,940 --> 00:00:09,240
can be used to provide information about a

4
00:00:09,240 --> 00:00:12,320
package, and it's required by npm. This

5
00:00:12,320 --> 00:00:15,119
file is mostly modified by the npm command

6
00:00:15,119 --> 00:00:18,059
itself, but in a few cases you'll need to

7
00:00:18,059 --> 00:00:20,899
manually edit this file as well. In the

8
00:00:20,899 --> 00:00:23,309
previous example, we started with a simple

9
00:00:23,309 --> 00:00:25,910
package that Jason file that only had the

10
00:00:25,910 --> 00:00:29,190
required properties name and version. The

11
00:00:29,190 --> 00:00:31,710
name often npm package is it's unique

12
00:00:31,710 --> 00:00:34,200
identifier. If you need to publish this

13
00:00:34,200 --> 00:00:36,659
package, that name has to be unique and

14
00:00:36,659 --> 00:00:39,939
not used before across the whole registry.

15
00:00:39,939 --> 00:00:41,929
The version Property is a semantic

16
00:00:41,929 --> 00:00:44,229
versioning string. We'll talk about this

17
00:00:44,229 --> 00:00:46,630
string in the next video. When we

18
00:00:46,630 --> 00:00:49,329
installed the express dependency, npm

19
00:00:49,329 --> 00:00:51,409
automatically modified our package that

20
00:00:51,409 --> 00:00:53,909
Jason and added a dependency section

21
00:00:53,909 --> 00:00:56,200
documenting the version of Express that it

22
00:00:56,200 --> 00:00:59,350
used. Here is the package that Jason file

23
00:00:59,350 --> 00:01:01,649
for the Popular Express package. As you

24
00:01:01,649 --> 00:01:03,950
can see, this file includes meta

25
00:01:03,950 --> 00:01:05,989
information about express things like

26
00:01:05,989 --> 00:01:08,569
description, license and keywords. But the

27
00:01:08,569 --> 00:01:11,540
most important information in this file is

28
00:01:11,540 --> 00:01:13,819
the dependencies section. These are the

29
00:01:13,819 --> 00:01:16,540
packages that express depends on. And this

30
00:01:16,540 --> 00:01:18,719
is the same list of packages that we got

31
00:01:18,719 --> 00:01:20,930
when we installed expressed locally in the

32
00:01:20,930 --> 00:01:24,170
previous test. This is really the most

33
00:01:24,170 --> 00:01:26,090
important benefit off the package that

34
00:01:26,090 --> 00:01:28,790
Jason file. This file makes the building

35
00:01:28,790 --> 00:01:30,579
off the project. Dependencies are

36
00:01:30,579 --> 00:01:33,329
reproducible task. This means by sharing

37
00:01:33,329 --> 00:01:34,930
this package that Jason file with other

38
00:01:34,930 --> 00:01:37,390
developers or with build servers, the

39
00:01:37,390 --> 00:01:39,060
process of building the project

40
00:01:39,060 --> 00:01:41,500
dependencies on these other machines can

41
00:01:41,500 --> 00:01:43,719
be automated through the dependencies

42
00:01:43,719 --> 00:01:46,000
section off the file. Here, let me show

43
00:01:46,000 --> 00:01:48,640
you how that works. With a local example,

44
00:01:48,640 --> 00:01:51,090
let me add one more dependency in the one

45
00:01:51,090 --> 00:01:53,500
npm folder example here. This time, let's

46
00:01:53,500 --> 00:01:56,319
add the load ash package. The command that

47
00:01:56,319 --> 00:01:59,769
we need here is npm Install load ash. Npm

48
00:01:59,769 --> 00:02:01,840
is now downloading load ash and it just

49
00:02:01,840 --> 00:02:03,930
placed it under the note modules folder

50
00:02:03,930 --> 00:02:06,480
and updated the package that Jason file to

51
00:02:06,480 --> 00:02:10,520
document this new dependency. Now, the one

52
00:02:10,520 --> 00:02:13,379
npm folder right now has three things. The

53
00:02:13,379 --> 00:02:15,750
package that Jason file the other package

54
00:02:15,750 --> 00:02:18,430
lock Jason file and the Node Modules

55
00:02:18,430 --> 00:02:20,680
folder. Now, Usually, when you share your

56
00:02:20,680 --> 00:02:22,979
project with other developers, you don't

57
00:02:22,979 --> 00:02:25,199
share your note modules folder This is a

58
00:02:25,199 --> 00:02:28,159
big folder with code written by others. It

59
00:02:28,159 --> 00:02:30,159
does not belong to your teams. Get Repo,

60
00:02:30,159 --> 00:02:33,180
for example. So what your team will get

61
00:02:33,180 --> 00:02:35,000
when you share this project is just the

62
00:02:35,000 --> 00:02:37,580
Jason file. So let me remove this note

63
00:02:37,580 --> 00:02:41,310
modules folder to simulate that. So a team

64
00:02:41,310 --> 00:02:43,590
member just pulled this code. They now

65
00:02:43,590 --> 00:02:45,889
have the package that Jason file and to

66
00:02:45,889 --> 00:02:48,659
build their version of note modules. All

67
00:02:48,659 --> 00:02:50,710
they have to do is run the npm install

68
00:02:50,710 --> 00:02:53,129
command without any arguments. Just like

69
00:02:53,129 --> 00:02:55,520
this, this command will install all the

70
00:02:55,520 --> 00:02:57,759
dependencies listed in package that Jason

71
00:02:57,759 --> 00:03:01,139
along with their sub dependencies. In

72
00:03:01,139 --> 00:03:03,610
fact, thanks to the package lock Jason

73
00:03:03,610 --> 00:03:06,129
file, they will get the exact same

74
00:03:06,129 --> 00:03:08,090
versions. Even for the sub dependence

75
00:03:08,090 --> 00:03:11,530
History, for example, expressed depends on

76
00:03:11,530 --> 00:03:13,889
this bites package here that was installed

77
00:03:13,889 --> 00:03:16,580
when we ran the npm install command. Let's

78
00:03:16,580 --> 00:03:18,539
assume between the time that you added the

79
00:03:18,539 --> 00:03:20,870
express dependency and the time a team

80
00:03:20,870 --> 00:03:23,129
member pulled your code to use it, a new

81
00:03:23,129 --> 00:03:25,449
version of this bites and PM package was

82
00:03:25,449 --> 00:03:27,960
released. Your team member will not get

83
00:03:27,960 --> 00:03:29,620
that new version. When they run npm

84
00:03:29,620 --> 00:03:31,969
install, they are going to get the exact

85
00:03:31,969 --> 00:03:34,139
same version that you used because of

86
00:03:34,139 --> 00:03:36,610
package locked Jason. So the version of

87
00:03:36,610 --> 00:03:41,129
bites that was used here is 300 If you

88
00:03:41,129 --> 00:03:42,969
look at the content of this package, lock

89
00:03:42,969 --> 00:03:45,110
that Jason file. You'll see information

90
00:03:45,110 --> 00:03:47,090
not only about this project's direct

91
00:03:47,090 --> 00:03:48,750
dependencies, but rather the whole

92
00:03:48,750 --> 00:03:50,889
dependency. Three. For the project search

93
00:03:50,889 --> 00:03:54,060
for Bites, for example, you'll see how the

94
00:03:54,060 --> 00:03:56,460
exact version off the bites package is

95
00:03:56,460 --> 00:03:58,490
included here, and you'll also understand

96
00:03:58,490 --> 00:04:00,909
how bites was added to the project because

97
00:04:00,909 --> 00:04:03,439
it's a dependency of body parts. Er, which

98
00:04:03,439 --> 00:04:05,389
is a dependency of one of your top level

99
00:04:05,389 --> 00:04:08,990
dependencies expressed in this case while

100
00:04:08,990 --> 00:04:11,139
adding dependencies to package that Jason

101
00:04:11,139 --> 00:04:13,560
when you install them, you can also tell

102
00:04:13,560 --> 00:04:15,780
npm that a dependency is on lee a

103
00:04:15,780 --> 00:04:18,370
development dependency, which means it is

104
00:04:18,370 --> 00:04:20,920
not needed in a production environment. To

105
00:04:20,920 --> 00:04:23,509
do that, you're in the same npm install

106
00:04:23,509 --> 00:04:26,610
command, but with the Dash D argument D

107
00:04:26,610 --> 00:04:28,589
for development. For example, let me

108
00:04:28,589 --> 00:04:31,079
install the node mon package with the

109
00:04:31,079 --> 00:04:34,560
Dashti argument Here. You'll notice how

110
00:04:34,560 --> 00:04:37,540
npm added this node mont package under a

111
00:04:37,540 --> 00:04:40,199
new section in package that Jason, this

112
00:04:40,199 --> 00:04:43,009
time it's Dev dependencies. This is where

113
00:04:43,009 --> 00:04:44,339
you should place things like you're

114
00:04:44,339 --> 00:04:46,949
testing framework, your formatting tools

115
00:04:46,949 --> 00:04:49,310
or anything else that you use on Lee while

116
00:04:49,310 --> 00:04:52,110
developing your project. Now let's quickly

117
00:04:52,110 --> 00:04:55,160
take a look at the help page for the npm

118
00:04:55,160 --> 00:04:57,069
Install command, and you do that using

119
00:04:57,069 --> 00:05:00,439
npm. Help install. In here, you'll see all

120
00:05:00,439 --> 00:05:02,209
the usage patterns and the options that

121
00:05:02,209 --> 00:05:04,790
you can use with the npm installment and

122
00:05:04,790 --> 00:05:06,170
one of these options that you can see

123
00:05:06,170 --> 00:05:08,259
right here is the dash dash production

124
00:05:08,259 --> 00:05:10,519
flag. Or you can use the note environment

125
00:05:10,519 --> 00:05:12,769
variable and said that to production on

126
00:05:12,769 --> 00:05:15,100
what that will do is it will completely

127
00:05:15,100 --> 00:05:17,300
ignore your death dependencies, because

128
00:05:17,300 --> 00:05:19,100
these are development dependencies, so you

129
00:05:19,100 --> 00:05:21,470
don't need them in production. This is

130
00:05:21,470 --> 00:05:23,480
handy because this note Mont package is

131
00:05:23,480 --> 00:05:25,360
not something that you need in production.

132
00:05:25,360 --> 00:05:27,899
It's on Lee Use is in development. Do

133
00:05:27,899 --> 00:05:30,629
automatically restart node whenever a file

134
00:05:30,629 --> 00:05:32,939
is saved in the project. Notman is one

135
00:05:32,939 --> 00:05:34,529
solution to the problem that you need to

136
00:05:34,529 --> 00:05:36,589
manually restart node when you make

137
00:05:36,589 --> 00:05:38,300
changes to a file and it's a good

138
00:05:38,300 --> 00:05:40,449
compromise in development environment. But

139
00:05:40,449 --> 00:05:42,319
it's totally not needed in a production

140
00:05:42,319 --> 00:05:45,600
environment before we move on to the next

141
00:05:45,600 --> 00:05:47,959
topic, which is this semantic versioning

142
00:05:47,959 --> 00:05:50,050
string that we've been seeing in package

143
00:05:50,050 --> 00:05:52,100
that. Jason, let me show you a command you

144
00:05:52,100 --> 00:05:54,189
can use to automatically create a package

145
00:05:54,189 --> 00:05:57,439
that Jason file for a brand new project.

146
00:05:57,439 --> 00:05:59,420
So let me create another test folder here.

147
00:05:59,420 --> 00:06:01,870
I can use the make Directory command here

148
00:06:01,870 --> 00:06:04,170
on this machine on. I'm gonna call this my

149
00:06:04,170 --> 00:06:08,029
project and C D into IT. So this is a

150
00:06:08,029 --> 00:06:10,850
completely empty directory. Now, instead

151
00:06:10,850 --> 00:06:12,790
of manually creating a package that Jason

152
00:06:12,790 --> 00:06:17,040
file, you can run the npm in IT. Command.

153
00:06:17,040 --> 00:06:19,139
This command will ask you a few questions

154
00:06:19,139 --> 00:06:21,980
about your project and use your answers to

155
00:06:21,980 --> 00:06:24,389
create an initial package that Jason file

156
00:06:24,389 --> 00:06:26,670
for you. It tries to use defaults from

157
00:06:26,670 --> 00:06:28,829
your folder. For example, if your project

158
00:06:28,829 --> 00:06:31,459
is already a get rebo, we'll figure that

159
00:06:31,459 --> 00:06:33,899
out and include the repo. You URL You can

160
00:06:33,899 --> 00:06:37,939
also run this command with Dash dash. Yes,

161
00:06:37,939 --> 00:06:39,740
to just use the defaults instead of

162
00:06:39,740 --> 00:06:41,899
interactive lee answering questions. I'll

163
00:06:41,899 --> 00:06:44,540
do that for this example. Check it out. It

164
00:06:44,540 --> 00:06:46,879
created a package that Jason file with the

165
00:06:46,879 --> 00:06:49,189
name of this directory and initial version

166
00:06:49,189 --> 00:06:51,769
and this scripts section, which is an

167
00:06:51,769 --> 00:06:53,029
important, one that we're going to talk

168
00:06:53,029 --> 00:06:54,750
about in a few videos, and it's a very

169
00:06:54,750 --> 00:06:56,939
good one. But first, let's talk about

170
00:06:56,939 --> 00:07:01,000
these little version strings and understand the meanings of these elements.

