0
00:00:01,439 --> 00:00:02,819
[Autogenerated] I need to emphasize the

1
00:00:02,819 --> 00:00:05,360
importance of the tab key. If you're not

2
00:00:05,360 --> 00:00:07,500
familiar with this powerful key, you're in

3
00:00:07,500 --> 00:00:10,189
for a treat. The tap character itself is

4
00:00:10,189 --> 00:00:12,580
not a very useful one, but the tap key is

5
00:00:12,580 --> 00:00:14,589
the driver off a very powerful feature

6
00:00:14,589 --> 00:00:16,750
called TAP Completion. You might be

7
00:00:16,750 --> 00:00:18,329
familiar with that feature in your code

8
00:00:18,329 --> 00:00:21,390
editor, but I'd like you to also be aware

9
00:00:21,390 --> 00:00:24,940
that it works inside note rubble as well.

10
00:00:24,940 --> 00:00:27,250
A single tap in the notes. Trouble can be

11
00:00:27,250 --> 00:00:29,600
used for auto complete and a double tab,

12
00:00:29,600 --> 00:00:31,690
which is pressing the tab key twice can be

13
00:00:31,690 --> 00:00:33,869
used to see a list of possible things you

14
00:00:33,869 --> 00:00:36,229
can type from whatever partially typed

15
00:00:36,229 --> 00:00:38,880
string you have. For example, if you type

16
00:00:38,880 --> 00:00:41,619
the characters see and then double tap on

17
00:00:41,619 --> 00:00:44,009
that, you'll see all the possible keywords

18
00:00:44,009 --> 00:00:46,969
and functions that start with C. You could

19
00:00:46,969 --> 00:00:49,640
be defining constant or clearing a timer.

20
00:00:49,640 --> 00:00:51,590
And if you single tap on something that

21
00:00:51,590 --> 00:00:53,500
matches on Lee, a single option will be

22
00:00:53,500 --> 00:00:56,009
out of completed. For example, crypto here

23
00:00:56,009 --> 00:00:58,750
is the Onley cured that begins with C. R.

24
00:00:58,750 --> 00:01:02,880
So if you single tap on cr crypto will be

25
00:01:02,880 --> 00:01:05,489
auto completed, this is by the way, is not

26
00:01:05,489 --> 00:01:07,469
about being lazy about typing the whole

27
00:01:07,469 --> 00:01:09,530
thing. The usefulness of this tap

28
00:01:09,530 --> 00:01:11,650
completion is about avoiding typing

29
00:01:11,650 --> 00:01:13,709
mistakes and discovering what is

30
00:01:13,709 --> 00:01:16,280
available. This latter point is important.

31
00:01:16,280 --> 00:01:19,269
For example, say I want to know what a P I

32
00:01:19,269 --> 00:01:21,760
functions and properties I can use on the

33
00:01:21,760 --> 00:01:25,280
array class. I can type Ray. Note how I

34
00:01:25,280 --> 00:01:28,319
used single tap for that. But then I can

35
00:01:28,319 --> 00:01:30,989
type the dot character and double tap

36
00:01:30,989 --> 00:01:32,849
after that. And there you go. These are

37
00:01:32,849 --> 00:01:34,769
all the functions on properties that can

38
00:01:34,769 --> 00:01:37,790
be used from the array class. This also

39
00:01:37,790 --> 00:01:40,980
works on objects. If I have an array

40
00:01:40,980 --> 00:01:44,189
object inside this rebel session, I can

41
00:01:44,189 --> 00:01:47,439
use the same dot and then double tap trick

42
00:01:47,439 --> 00:01:49,530
to get a list of all the methods available

43
00:01:49,530 --> 00:01:51,230
on this object. If you can't remember the

44
00:01:51,230 --> 00:01:53,340
name of the method you need, this list is

45
00:01:53,340 --> 00:01:55,989
helpful. The tap completion discover

46
00:01:55,989 --> 00:01:58,730
ability works anywhere. Do you remember

47
00:01:58,730 --> 00:02:01,359
the special document? While you can see

48
00:02:01,359 --> 00:02:04,140
them by double tapping on a single dot,

49
00:02:04,140 --> 00:02:06,829
This discover ability also works on a

50
00:02:06,829 --> 00:02:09,039
global level. If you double tap on an

51
00:02:09,039 --> 00:02:11,699
empty line, everything that is globally

52
00:02:11,699 --> 00:02:14,479
available appears This is a big list, but

53
00:02:14,479 --> 00:02:17,490
it's a useful one. It has all the common

54
00:02:17,490 --> 00:02:19,240
global's in the JavaScript language

55
00:02:19,240 --> 00:02:21,060
itself, which you're probably familiar

56
00:02:21,060 --> 00:02:24,219
with, like Ray number string and object

57
00:02:24,219 --> 00:02:26,990
classes and built in libraries like math

58
00:02:26,990 --> 00:02:30,840
and Jason on some top level functions. The

59
00:02:30,840 --> 00:02:33,020
other Global's you'll see in this list are

60
00:02:33,020 --> 00:02:35,090
the ones that are available in the know

61
00:02:35,090 --> 00:02:37,509
Dreamtime itself. A few of these are truly

62
00:02:37,509 --> 00:02:39,879
global in note, like the buffer class, the

63
00:02:39,879 --> 00:02:42,669
process object and the various functions

64
00:02:42,669 --> 00:02:46,080
to set and clear timers. The lower case

65
00:02:46,080 --> 00:02:48,860
variables here, for example, DNA's Net

66
00:02:48,860 --> 00:02:52,110
cluster and Ashley to-be. Those represent

67
00:02:52,110 --> 00:02:55,030
the built in modules and note these our

68
00:02:55,030 --> 00:02:57,550
notes powerful libraries that you get out

69
00:02:57,550 --> 00:03:00,460
of the box, not how these are available

70
00:03:00,460 --> 00:03:02,789
directly here in the ripple. But when

71
00:03:02,789 --> 00:03:04,849
working with a regular note script, which

72
00:03:04,849 --> 00:03:07,139
will do next, you'll need to require these

73
00:03:07,139 --> 00:03:10,479
modules to be able to use them. One of the

74
00:03:10,479 --> 00:03:12,770
useful rebels features that you can use

75
00:03:12,770 --> 00:03:15,539
here is the underscore variable. This is

76
00:03:15,539 --> 00:03:17,789
similar to the dollar sign question mark

77
00:03:17,789 --> 00:03:20,750
feature In bash, IT stores the value of

78
00:03:20,750 --> 00:03:23,270
the last evaluated expression. For

79
00:03:23,270 --> 00:03:25,699
example, say that you executed a math,

80
00:03:25,699 --> 00:03:28,349
random call. And after you did, you wanted

81
00:03:28,349 --> 00:03:30,360
to put that same random value in a

82
00:03:30,360 --> 00:03:32,879
constant. You can do that with the

83
00:03:32,879 --> 00:03:34,789
underscore because it automatically stores

84
00:03:34,789 --> 00:03:37,259
the last value you can use the underscore

85
00:03:37,259 --> 00:03:39,669
variable in any place where you use a job

86
00:03:39,669 --> 00:03:41,889
script expression. I could do something

87
00:03:41,889 --> 00:03:45,120
like const random equal underscore to

88
00:03:45,120 --> 00:03:49,000
place that same last random value in a constant

