0
00:00:00,740 --> 00:00:01,840
[Autogenerated] the request Listener

1
00:00:01,840 --> 00:00:03,990
function receives these two arguments.

2
00:00:03,990 --> 00:00:05,500
Let's talk about them a bit more how to

3
00:00:05,500 --> 00:00:07,339
use them. What information and

4
00:00:07,339 --> 00:00:10,019
capabilities do they provide, how to know

5
00:00:10,019 --> 00:00:12,740
what to do with them. The easiest way to

6
00:00:12,740 --> 00:00:16,030
explore them is to log them. For example,

7
00:00:16,030 --> 00:00:20,440
let's console log the request object here.

8
00:00:20,440 --> 00:00:22,579
Now to get this line to execute. We don't

9
00:00:22,579 --> 00:00:24,690
need to restart Note, thanks to no _____.

10
00:00:24,690 --> 00:00:26,550
But we need to go make and actually to-be

11
00:00:26,550 --> 00:00:28,339
request because this is the function that

12
00:00:28,339 --> 00:00:31,539
gets executed. Perez de to-be request.

13
00:00:31,539 --> 00:00:34,789
When we do a request, you'll see this big

14
00:00:34,789 --> 00:00:37,170
object here in the logs. This is the

15
00:00:37,170 --> 00:00:39,570
request object, and this is everything you

16
00:00:39,570 --> 00:00:41,670
can do on it. It has a lot of properties,

17
00:00:41,670 --> 00:00:43,600
and the printing here is also printing

18
00:00:43,600 --> 00:00:45,630
everything nested under the main

19
00:00:45,630 --> 00:00:47,890
properties of the request object, which is

20
00:00:47,890 --> 00:00:50,280
a bit hard to read. To get a smaller

21
00:00:50,280 --> 00:00:52,770
output about this request object, use dir

22
00:00:52,770 --> 00:00:55,869
instead of log and pass in as the second

23
00:00:55,869 --> 00:00:59,079
argument to it. The object with a property

24
00:00:59,079 --> 00:01:02,630
depth equal to zero. This means do not

25
00:01:02,630 --> 00:01:04,980
print any nested object on Leigh. Print

26
00:01:04,980 --> 00:01:06,989
the first level of properties for this

27
00:01:06,989 --> 00:01:09,670
request object? No, it has restarted

28
00:01:09,670 --> 00:01:12,609
refreshed to see the new output. And now

29
00:01:12,609 --> 00:01:15,340
we see on Lee the first level of

30
00:01:15,340 --> 00:01:18,079
properties and any nested objects will not

31
00:01:18,079 --> 00:01:21,170
be printed here. Not a couple of things

32
00:01:21,170 --> 00:01:23,890
about this output here. The request object

33
00:01:23,890 --> 00:01:26,700
is of type incoming message. It's the

34
00:01:26,700 --> 00:01:28,870
class that was used to internally

35
00:01:28,870 --> 00:01:31,700
instantiate a request object. This is good

36
00:01:31,700 --> 00:01:33,290
to know, because if you want to find the

37
00:01:33,290 --> 00:01:35,109
documentation about what you can do with

38
00:01:35,109 --> 00:01:38,040
the request object, you need to go to the

39
00:01:38,040 --> 00:01:40,170
incoming message class under the SD to-be

40
00:01:40,170 --> 00:01:42,790
documentation. So this little request

41
00:01:42,790 --> 00:01:44,969
object here belongs to the incoming

42
00:01:44,969 --> 00:01:46,879
message class. All the properties and

43
00:01:46,879 --> 00:01:48,969
events you find in this documentation

44
00:01:48,969 --> 00:01:51,739
section applies to the request object.

45
00:01:51,739 --> 00:01:53,799
Because the popular name of this incoming

46
00:01:53,799 --> 00:01:56,569
message object is request one might

47
00:01:56,569 --> 00:02:00,930
confuse it with this client Request class.

48
00:02:00,930 --> 00:02:03,329
This client request class is used when you

49
00:02:03,329 --> 00:02:05,569
want to use the SD to-be library as an

50
00:02:05,569 --> 00:02:08,710
agent to fetch information from an http

51
00:02:08,710 --> 00:02:11,090
server rather than as a server, which is

52
00:02:11,090 --> 00:02:13,110
what our example is doing. So remember the

53
00:02:13,110 --> 00:02:15,150
request object within an SD to-be server

54
00:02:15,150 --> 00:02:18,849
listener function is of type incoming

55
00:02:18,849 --> 00:02:22,080
message the other important thing to

56
00:02:22,080 --> 00:02:25,250
notice here is that the console Docker

57
00:02:25,250 --> 00:02:30,300
line was executed twice. We have to

58
00:02:30,300 --> 00:02:32,569
request objects here, which means for a

59
00:02:32,569 --> 00:02:35,629
single HDTV request coming from my chrome

60
00:02:35,629 --> 00:02:38,159
browser, the listener function is executed

61
00:02:38,159 --> 00:02:40,800
twice, not once. If you want to

62
00:02:40,800 --> 00:02:42,680
investigate this a little bit further, and

63
00:02:42,680 --> 00:02:45,060
you should drill down form or clues, for

64
00:02:45,060 --> 00:02:47,409
example, look at the request property

65
00:02:47,409 --> 00:02:49,969
values here, in particular the U R L

66
00:02:49,969 --> 00:02:52,099
property. So instead of console Docker

67
00:02:52,099 --> 00:02:55,620
request here, let's just log Request WRL

68
00:02:55,620 --> 00:02:59,000
and see what that will output. So surgery

69
00:02:59,000 --> 00:03:02,560
started. Refresh this guy and take a look

70
00:03:02,560 --> 00:03:04,960
at the two girls were getting here. The

71
00:03:04,960 --> 00:03:07,469
root request and the other is for the five

72
00:03:07,469 --> 00:03:10,419
icon request. Micro is automatically

73
00:03:10,419 --> 00:03:12,729
trying to ask the server if it has a five

74
00:03:12,729 --> 00:03:15,530
icon. This girl is a property on the

75
00:03:15,530 --> 00:03:17,750
request object, and it's actually the

76
00:03:17,750 --> 00:03:20,139
property that web frameworks used to

77
00:03:20,139 --> 00:03:22,340
implement their routing features. We'll

78
00:03:22,340 --> 00:03:23,800
talk about web frameworks in the next

79
00:03:23,800 --> 00:03:26,729
video. Let me now console there the

80
00:03:26,729 --> 00:03:29,740
response object and take a look at that.

81
00:03:29,740 --> 00:03:32,610
Refresh the browser and the response

82
00:03:32,610 --> 00:03:35,360
object is of type server response. If you

83
00:03:35,360 --> 00:03:37,539
need to look it up in the documentation

84
00:03:37,539 --> 00:03:39,949
we-can use this response object to send a

85
00:03:39,949 --> 00:03:42,169
few things over to the requester. IT can

86
00:03:42,169 --> 00:03:44,039
control things like the status code and

87
00:03:44,039 --> 00:03:46,060
the status message, the headers off the

88
00:03:46,060 --> 00:03:48,759
response and any data we'd like to include

89
00:03:48,759 --> 00:03:50,659
in the response body, which is what our

90
00:03:50,659 --> 00:03:53,889
example is doing here. Both the request

91
00:03:53,889 --> 00:03:57,530
and response objects are streams here. The

92
00:03:57,530 --> 00:03:59,409
request object is a readable stream, while

93
00:03:59,409 --> 00:04:01,639
the response object is a rideable one.

94
00:04:01,639 --> 00:04:03,599
Because streams are all event emitters,

95
00:04:03,599 --> 00:04:05,340
we-can subscribe to events emitted by

96
00:04:05,340 --> 00:04:07,680
these objects too. We can also use them

97
00:04:07,680 --> 00:04:09,370
with other streams, which is a really good

98
00:04:09,370 --> 00:04:11,039
thing for you to learn right after this

99
00:04:11,039 --> 00:04:16,000
course I cover in details in the advanced note course that Pluralsight.

