0
00:00:01,439 --> 00:00:02,750
[Autogenerated] There are many ways to

1
00:00:02,750 --> 00:00:04,849
define a function in JavaScript on the

2
00:00:04,849 --> 00:00:06,759
modern specifications introduced a new

3
00:00:06,759 --> 00:00:09,330
way. Arrow functions away to define a

4
00:00:09,330 --> 00:00:11,619
function without typing the keyword

5
00:00:11,619 --> 00:00:13,839
function, but rather by using an arrow

6
00:00:13,839 --> 00:00:17,570
simple like this, this shorter Centex is

7
00:00:17,570 --> 00:00:20,019
preferable not only because it's shorter,

8
00:00:20,019 --> 00:00:22,070
but also because it behaves more

9
00:00:22,070 --> 00:00:24,550
predictably with closures. So let me tell

10
00:00:24,550 --> 00:00:28,370
you about that. An error function does not

11
00:00:28,370 --> 00:00:30,989
care. Who calls IT while a regular

12
00:00:30,989 --> 00:00:33,649
function cares very much about that. A

13
00:00:33,649 --> 00:00:36,960
regular function like X here always bind

14
00:00:36,960 --> 00:00:40,329
the value for its this keyword for its

15
00:00:40,329 --> 00:00:42,460
collar. And if it didn't have an explicit

16
00:00:42,460 --> 00:00:43,880
collar, irregular function will use the

17
00:00:43,880 --> 00:00:47,079
value of undefined for its vis keyword and

18
00:00:47,079 --> 00:00:48,899
error function. On the other hand, like

19
00:00:48,899 --> 00:00:51,929
why here, not caring about who called it

20
00:00:51,929 --> 00:00:55,119
will close over the value for the this

21
00:00:55,119 --> 00:00:58,329
keyword for its scope at the time it was

22
00:00:58,329 --> 00:01:01,079
defined, making it great for delayed

23
00:01:01,079 --> 00:01:03,939
execution cases like events and listeners

24
00:01:03,939 --> 00:01:05,930
because it gives easy access to the

25
00:01:05,930 --> 00:01:08,959
defining environment. This is important,

26
00:01:08,959 --> 00:01:12,420
so let's take a look at an example in any

27
00:01:12,420 --> 00:01:15,359
note module like this one. The top level

28
00:01:15,359 --> 00:01:17,829
this keyword is associate it with the

29
00:01:17,829 --> 00:01:20,230
special exports object which I'm going to

30
00:01:20,230 --> 00:01:22,120
tell you more about soon. But in this

31
00:01:22,120 --> 00:01:24,459
example, I'm just giving this exports

32
00:01:24,459 --> 00:01:27,219
object a label toe. Identify it because

33
00:01:27,219 --> 00:01:29,400
it's empty by default and here I am

34
00:01:29,400 --> 00:01:31,730
printing the value for the exports. Object

35
00:01:31,730 --> 00:01:35,069
for you to see testing this script with

36
00:01:35,069 --> 00:01:37,180
note command. You should see an object

37
00:01:37,180 --> 00:01:41,219
with I'd exports. Now I prepared this

38
00:01:41,219 --> 00:01:44,329
tester object, which defines to similar

39
00:01:44,329 --> 00:01:47,099
functions where in both I am printing the

40
00:01:47,099 --> 00:01:50,810
value for the this keyword function. One

41
00:01:50,810 --> 00:01:52,849
is defined with the regular Centex, while

42
00:01:52,849 --> 00:01:54,950
function to is defined with the arrow

43
00:01:54,950 --> 00:01:58,560
Centex. When function one is called, it's

44
00:01:58,560 --> 00:02:01,079
this keyword will be associated with its

45
00:02:01,079 --> 00:02:03,769
collar, which in this case is the test our

46
00:02:03,769 --> 00:02:05,799
object itself. And this is why you see the

47
00:02:05,799 --> 00:02:07,760
printed value for the this keyword in

48
00:02:07,760 --> 00:02:09,849
function. One representing the tester

49
00:02:09,849 --> 00:02:12,680
object itself. However, when function to

50
00:02:12,680 --> 00:02:15,080
is called, it's This keyword will be

51
00:02:15,080 --> 00:02:17,500
associated with the same this keyword that

52
00:02:17,500 --> 00:02:19,909
was available in the functions scope when

53
00:02:19,909 --> 00:02:22,289
it was defined, which was the modules,

54
00:02:22,289 --> 00:02:24,840
exports object, the one I gave a label. As

55
00:02:24,840 --> 00:02:28,469
you can see here, this is a big benefit

56
00:02:28,469 --> 00:02:30,530
when working with listeners in no jazz,

57
00:02:30,530 --> 00:02:32,229
and it's why you'll see me using error

58
00:02:32,229 --> 00:02:35,389
functions all over the place. One other

59
00:02:35,389 --> 00:02:37,419
cool thing about error functions is that

60
00:02:37,419 --> 00:02:39,889
if the function on Lee has a single line

61
00:02:39,889 --> 00:02:42,169
that returns something, you could make it

62
00:02:42,169 --> 00:02:45,610
even more concise by removing the curly

63
00:02:45,610 --> 00:02:49,639
braces and the return cured altogether.

64
00:02:49,639 --> 00:02:52,360
You can also remove the parentheses around

65
00:02:52,360 --> 00:02:54,370
the argument if the function receives a

66
00:02:54,370 --> 00:02:57,539
single argument, making it really short.

67
00:02:57,539 --> 00:02:59,960
This syntax is usually popular for

68
00:02:59,960 --> 00:03:02,639
functions that get passed to array methods

69
00:03:02,639 --> 00:03:07,000
like map reduce and filter and functional programming in general.

