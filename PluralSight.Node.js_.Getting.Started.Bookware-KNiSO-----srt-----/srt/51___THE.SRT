0
00:00:01,040 --> 00:00:02,790
[Autogenerated] the FS module provides a

1
00:00:02,790 --> 00:00:04,910
big AP for interacting with the file

2
00:00:04,910 --> 00:00:07,089
system. We've seen a few of its methods

3
00:00:07,089 --> 00:00:08,960
already. You've seen the basic read file

4
00:00:08,960 --> 00:00:10,470
and write falling methods, but there are

5
00:00:10,470 --> 00:00:13,039
so many other methods under this module.

6
00:00:13,039 --> 00:00:15,859
This is probably the biggest AP I among

7
00:00:15,859 --> 00:00:18,960
all the built in no jazz modules using

8
00:00:18,960 --> 00:00:20,870
this FS module, not only you can read and

9
00:00:20,870 --> 00:00:23,500
write files as buffers. You can also work

10
00:00:23,500 --> 00:00:25,449
files as streams, which is a lot more

11
00:00:25,449 --> 00:00:27,839
efficient when working with big files. You

12
00:00:27,839 --> 00:00:29,829
can also work with directories and do many

13
00:00:29,829 --> 00:00:32,320
operations on both directories and files.

14
00:00:32,320 --> 00:00:33,810
Let me show you a few examples of things

15
00:00:33,810 --> 00:00:37,020
you can do. Using the FS module. I'm using

16
00:00:37,020 --> 00:00:38,729
the Promise based AP ICE. For these

17
00:00:38,729 --> 00:00:40,640
examples, you can also use the original

18
00:00:40,640 --> 00:00:42,920
call back a P I. For them and most of the

19
00:00:42,920 --> 00:00:45,079
A. P I methods here have synchronous

20
00:00:45,079 --> 00:00:47,899
versions that you can use as well. To use

21
00:00:47,899 --> 00:00:50,170
all of these promise based methods, you

22
00:00:50,170 --> 00:00:51,950
just a weight on them within a function

23
00:00:51,950 --> 00:00:54,820
labeled a sync. Most of these methods are

24
00:00:54,820 --> 00:00:56,969
based on a file path, and some of them

25
00:00:56,969 --> 00:00:59,200
take an optional configuration object.

26
00:00:59,200 --> 00:01:01,789
These square brackets here indicate that

27
00:01:01,789 --> 00:01:05,359
this options object is optional. If you do

28
00:01:05,359 --> 00:01:07,670
want to read and write files, I recommend

29
00:01:07,670 --> 00:01:09,769
looking into the create read stream and

30
00:01:09,769 --> 00:01:12,569
create right stream methods. These are so

31
00:01:12,569 --> 00:01:14,030
much better than read, file and write

32
00:01:14,030 --> 00:01:15,780
filed because the regular read file on

33
00:01:15,780 --> 00:01:18,150
right file use buffers to work, and we'll

34
00:01:18,150 --> 00:01:20,500
use a lot more memory than the streaming

35
00:01:20,500 --> 00:01:23,670
based one. Using the F S module, you can

36
00:01:23,670 --> 00:01:25,719
append data to a file. This will also

37
00:01:25,719 --> 00:01:28,150
create the file. If it does not exist, you

38
00:01:28,150 --> 00:01:30,510
can copy files, and if you attempt to copy

39
00:01:30,510 --> 00:01:32,200
a file to a destination that already

40
00:01:32,200 --> 00:01:34,939
exists, it'll be overridden. You can read

41
00:01:34,939 --> 00:01:37,170
information about files using the stat

42
00:01:37,170 --> 00:01:39,510
method. Using this method, you can get

43
00:01:39,510 --> 00:01:41,700
data about the file like its size, for

44
00:01:41,700 --> 00:01:43,819
example, without needing to read the whole

45
00:01:43,819 --> 00:01:46,219
contents off the file, which is nice. This

46
00:01:46,219 --> 00:01:48,819
method will also include time related data

47
00:01:48,819 --> 00:01:51,370
about the file like, When was it created

48
00:01:51,370 --> 00:01:54,200
and when was it last modified? You can

49
00:01:54,200 --> 00:01:56,209
read users permissions for files and

50
00:01:56,209 --> 00:01:58,450
directories using the access method, and

51
00:01:58,450 --> 00:02:00,420
you can change the permissions and even

52
00:02:00,420 --> 00:02:02,920
the owner of a file with the change mod

53
00:02:02,920 --> 00:02:06,049
and change own methods. You can link and

54
00:02:06,049 --> 00:02:08,340
unlinked files, and you can even truncate

55
00:02:08,340 --> 00:02:11,650
a file's content if you need to. You can

56
00:02:11,650 --> 00:02:13,990
make new directories, read the directories

57
00:02:13,990 --> 00:02:16,629
list of files, remove the directory and

58
00:02:16,629 --> 00:02:19,310
rename directories and files as well. This

59
00:02:19,310 --> 00:02:21,639
is a very powerful module, even if you do

60
00:02:21,639 --> 00:02:23,729
not use note as the host of your back and

61
00:02:23,729 --> 00:02:26,460
servers. For example, I recently used the

62
00:02:26,460 --> 00:02:29,039
F S module to generate test files for a

63
00:02:29,039 --> 00:02:30,960
project that had hundreds of you I

64
00:02:30,960 --> 00:02:33,479
components. It took me about 10 minutes to

65
00:02:33,479 --> 00:02:38,000
do that, using the powerful methods you can see here for the FS module.

