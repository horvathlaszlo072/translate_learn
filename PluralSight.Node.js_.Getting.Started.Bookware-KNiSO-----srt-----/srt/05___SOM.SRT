0
00:00:00,440 --> 00:00:01,840
[Autogenerated] I love thinking about real

1
00:00:01,840 --> 00:00:03,799
life analogies that compare with the

2
00:00:03,799 --> 00:00:06,610
coding world. One of my favorite analogies

3
00:00:06,610 --> 00:00:08,869
about coding in general is how it can be

4
00:00:08,869 --> 00:00:11,820
compared to writing cooking recipes. The

5
00:00:11,820 --> 00:00:14,210
recipe in this analogy is the program, and

6
00:00:14,210 --> 00:00:18,059
the cook is the computer. In some recipes,

7
00:00:18,059 --> 00:00:20,960
you can use ready items and tools like the

8
00:00:20,960 --> 00:00:22,620
cake mix that you can use to make

9
00:00:22,620 --> 00:00:24,949
cupcakes, and that's specially shaped pan

10
00:00:24,949 --> 00:00:27,739
that makes it easier to create cupcakes

11
00:00:27,739 --> 00:00:30,039
when compared to coding. You can think of

12
00:00:30,039 --> 00:00:32,600
these ready items and tools for recipes to

13
00:00:32,600 --> 00:00:35,280
including and using a package of code

14
00:00:35,280 --> 00:00:39,340
written by others in your own code note.

15
00:00:39,340 --> 00:00:42,640
And it's powerful. Npm package manager has

16
00:00:42,640 --> 00:00:45,200
their place In this analogy, npm is a

17
00:00:45,200 --> 00:00:46,859
place where you can download code written

18
00:00:46,859 --> 00:00:49,369
by others. Within this analogy, you can

19
00:00:49,369 --> 00:00:51,969
think of npm as the store where you

20
00:00:51,969 --> 00:00:54,509
purchase the ready items and tools. You

21
00:00:54,509 --> 00:00:56,219
just bring them to your project with a

22
00:00:56,219 --> 00:00:58,939
simple command, and you can think of no

23
00:00:58,939 --> 00:01:01,670
jazz itself as your kitchen as it allows

24
00:01:01,670 --> 00:01:03,780
you to execute lines in your coding

25
00:01:03,780 --> 00:01:07,019
recipes by using built in modules like the

26
00:01:07,019 --> 00:01:09,859
Oven and the sync. Imagine trying to cook.

27
00:01:09,859 --> 00:01:11,510
Without these built in modules in your

28
00:01:11,510 --> 00:01:14,379
kitchen, that would be a lot harder. And

29
00:01:14,379 --> 00:01:16,260
just because you have these built in

30
00:01:16,260 --> 00:01:18,629
modules in your kitchen, that doesn't mean

31
00:01:18,629 --> 00:01:21,480
you have food ready to consume. Note is

32
00:01:21,480 --> 00:01:24,159
your kitchen by itself. It's not enough,

33
00:01:24,159 --> 00:01:26,840
but it does make your task to write useful

34
00:01:26,840 --> 00:01:30,400
code much more easier throughout this

35
00:01:30,400 --> 00:01:33,209
course. You'll hear me use the term call

36
00:01:33,209 --> 00:01:35,629
back all the time, so let me quickly tell

37
00:01:35,629 --> 00:01:38,260
you about it. Call Back is just a fancy

38
00:01:38,260 --> 00:01:41,219
term for a function. In note. We call the

39
00:01:41,219 --> 00:01:44,180
function a callback function if Node will

40
00:01:44,180 --> 00:01:47,280
call it back for us at a later point in

41
00:01:47,280 --> 00:01:50,480
the time of the program. This is done

42
00:01:50,480 --> 00:01:52,859
through an asynchronous method. Here's the

43
00:01:52,859 --> 00:01:54,969
simple callback function, which usually

44
00:01:54,969 --> 00:01:57,620
received data as its argument, and we just

45
00:01:57,620 --> 00:02:00,310
pass its reference here to some

46
00:02:00,310 --> 00:02:02,739
asynchronous method, and that asynchronous

47
00:02:02,739 --> 00:02:05,150
method will get the callback invoked when

48
00:02:05,150 --> 00:02:08,020
the data is ready. I have another analogy

49
00:02:08,020 --> 00:02:10,370
for you about call backs when you order a

50
00:02:10,370 --> 00:02:12,909
drink from Starbucks in the store, not in

51
00:02:12,909 --> 00:02:15,270
the drive thru. They'll take your order

52
00:02:15,270 --> 00:02:17,729
and your name and tell you to wait to be

53
00:02:17,729 --> 00:02:20,349
called when your order is ready. After a

54
00:02:20,349 --> 00:02:22,719
while, they call your name and give you

55
00:02:22,719 --> 00:02:25,729
what you asked for. That name you gave

56
00:02:25,729 --> 00:02:28,509
them is the callback function here. They

57
00:02:28,509 --> 00:02:30,139
called it with the object that you

58
00:02:30,139 --> 00:02:33,689
requested the drink. So let me modify this

59
00:02:33,689 --> 00:02:35,689
generic example of a callback to

60
00:02:35,689 --> 00:02:38,449
demonstrate the Starbucks example. The

61
00:02:38,449 --> 00:02:40,590
callback function is the name you give

62
00:02:40,590 --> 00:02:42,729
during your Starbucks order. It's a

63
00:02:42,729 --> 00:02:45,240
function that be called with some data,

64
00:02:45,240 --> 00:02:47,610
which is you already drink when you place

65
00:02:47,610 --> 00:02:50,210
your order. That's an asynchronous method,

66
00:02:50,210 --> 00:02:52,650
because your order will take some time and

67
00:02:52,650 --> 00:02:54,650
they don't want to block the order. And Q.

68
00:02:54,650 --> 00:02:57,039
While your order is getting prepared,

69
00:02:57,039 --> 00:02:59,990
that's why they'll call you back. And

70
00:02:59,990 --> 00:03:01,979
that's the pattern of callback functions

71
00:03:01,979 --> 00:03:05,199
in note. Now, modern JavaScript in Modern

72
00:03:05,199 --> 00:03:08,340
Note started adopting another pattern for

73
00:03:08,340 --> 00:03:10,400
asynchronous programming, which we call

74
00:03:10,400 --> 00:03:13,259
promises, and the promise is a little bit

75
00:03:13,259 --> 00:03:15,669
different than a callback To understand

76
00:03:15,669 --> 00:03:18,189
promises. Imagine that you ask someone to

77
00:03:18,189 --> 00:03:20,259
give you something, but they give you

78
00:03:20,259 --> 00:03:23,270
something else. Call it a mystery object.

79
00:03:23,270 --> 00:03:26,360
They promise you that this mystery object

80
00:03:26,360 --> 00:03:29,310
might eventually turn into the thing that

81
00:03:29,310 --> 00:03:32,509
you originally asked for this promise.

82
00:03:32,509 --> 00:03:34,810
Mystery object can always turn into one of

83
00:03:34,810 --> 00:03:37,729
two possible forms. One form is associated

84
00:03:37,729 --> 00:03:41,039
with success and the other with failure.

85
00:03:41,039 --> 00:03:43,030
This is like if we ask a chicken for a

86
00:03:43,030 --> 00:03:45,169
chick and the chicken gives us an egg

87
00:03:45,169 --> 00:03:48,490
instead, that egg might successfully

88
00:03:48,490 --> 00:03:51,159
turned into a check or it might die and be

89
00:03:51,159 --> 00:03:54,219
useless if you like analogies like these,

90
00:03:54,219 --> 00:03:56,469
I have a lot more of them, and most of

91
00:03:56,469 --> 00:03:58,229
these technologies are really related to

92
00:03:58,229 --> 00:04:00,669
note. For example, see the reactive

93
00:04:00,669 --> 00:04:06,000
programming one and the errors versus Exceptions one.

