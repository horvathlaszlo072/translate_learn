0
00:00:01,240 --> 00:00:02,350
[Autogenerated] in this getting started

1
00:00:02,350 --> 00:00:04,759
module will explore the node command and a

2
00:00:04,759 --> 00:00:06,960
few global features like timers, and the

3
00:00:06,960 --> 00:00:10,359
process objects. If you type in the note

4
00:00:10,359 --> 00:00:11,890
command without a script for it to

5
00:00:11,890 --> 00:00:15,839
execute. Note will start a rebel session

6
00:00:15,839 --> 00:00:18,699
rappels stands for read evil print loop.

7
00:00:18,699 --> 00:00:20,620
And it's a very convenient way to quickly

8
00:00:20,620 --> 00:00:23,539
test simple JavaScript and no documents.

9
00:00:23,539 --> 00:00:26,039
You can type in any job script here in the

10
00:00:26,039 --> 00:00:29,850
rebel, for example, a math, random call

11
00:00:29,850 --> 00:00:32,710
just like that. And then you press, enter

12
00:00:32,710 --> 00:00:35,490
and note, will read your line evaluated,

13
00:00:35,490 --> 00:00:37,520
print the result and then go back to

14
00:00:37,520 --> 00:00:39,770
waiting for further lines. This is where

15
00:00:39,770 --> 00:00:42,090
the rebel got its name. Read a line

16
00:00:42,090 --> 00:00:45,380
evaluated, print its output and loop until

17
00:00:45,380 --> 00:00:49,030
the user exits the rebel. Note how the

18
00:00:49,030 --> 00:00:51,390
print step happened automatically. We

19
00:00:51,390 --> 00:00:53,240
didn't need to add any instructions to

20
00:00:53,240 --> 00:00:55,729
print the result. Node will just print the

21
00:00:55,729 --> 00:00:58,030
result of each line you type. This is

22
00:00:58,030 --> 00:00:59,979
cool, but keep in mind that some lines

23
00:00:59,979 --> 00:01:02,320
will not have any results at all. The note

24
00:01:02,320 --> 00:01:04,790
rappel will print undefined in this case.

25
00:01:04,790 --> 00:01:07,950
For example, if you define a variable like

26
00:01:07,950 --> 00:01:12,709
this, let answer equal 42 and you enter,

27
00:01:12,709 --> 00:01:15,069
you'll see undefined. This is because this

28
00:01:15,069 --> 00:01:17,290
is a statement in JavaScript. It's not an

29
00:01:17,290 --> 00:01:19,439
expression, it does not have any output.

30
00:01:19,439 --> 00:01:21,219
And this is why the ripple printed

31
00:01:21,219 --> 00:01:23,620
undefined as the output of this statement.

32
00:01:23,620 --> 00:01:26,269
Don't let that confuse you. On the other

33
00:01:26,269 --> 00:01:28,390
hand, let's type out an expression. For

34
00:01:28,390 --> 00:01:31,400
example. Three. The number equal equal

35
00:01:31,400 --> 00:01:34,810
three. The character. This is a bullying

36
00:01:34,810 --> 00:01:36,560
expression, by the way. Quick question. Do

37
00:01:36,560 --> 00:01:38,250
you think this expression evaluates to

38
00:01:38,250 --> 00:01:41,629
true or false? Well, this is one type of

39
00:01:41,629 --> 00:01:43,549
question that can be easily answered

40
00:01:43,549 --> 00:01:45,430
inside a node Rebel. You type it real

41
00:01:45,430 --> 00:01:48,090
quick and enter, and there you go. This is

42
00:01:48,090 --> 00:01:50,780
true. So this line was a JavaScript

43
00:01:50,780 --> 00:01:52,879
expression, and the ripple printed its

44
00:01:52,879 --> 00:01:56,000
result for us. Sometimes the expression

45
00:01:56,000 --> 00:01:58,319
that you need to test might need multiple

46
00:01:58,319 --> 00:02:00,680
lines. Let me clear this rebel session,

47
00:02:00,680 --> 00:02:03,269
and I do that by pressing control and l.

48
00:02:03,269 --> 00:02:06,540
This clears the session, and let's see an

49
00:02:06,540 --> 00:02:09,060
example of multiple lines. Say that you

50
00:02:09,060 --> 00:02:10,969
want to define a function that generates

51
00:02:10,969 --> 00:02:13,710
today's date and test it out. You'll start

52
00:02:13,710 --> 00:02:16,639
with the function name. Name IT today and

53
00:02:16,639 --> 00:02:18,939
then begin with a curly brace, right. You

54
00:02:18,939 --> 00:02:21,870
can hit Enter here. The notes. Rebel is

55
00:02:21,870 --> 00:02:24,009
smart enough to detect that your line is

56
00:02:24,009 --> 00:02:26,629
not done yet and it will go into this

57
00:02:26,629 --> 00:02:29,860
multi line mode for you to type more so we

58
00:02:29,860 --> 00:02:34,250
can type. Return New date Semi Colin hit.

59
00:02:34,250 --> 00:02:38,430
Enter again, then the end Curly brace and

60
00:02:38,430 --> 00:02:41,629
enter. And now note figured out that this

61
00:02:41,629 --> 00:02:44,740
good can be executed and it did. Executed.

62
00:02:44,740 --> 00:02:47,770
We can now use the Today function in the

63
00:02:47,770 --> 00:02:52,050
rebel session. This rappel multi line mode

64
00:02:52,050 --> 00:02:54,840
is limited. For example, if online three

65
00:02:54,840 --> 00:02:56,659
you realize that you made a mistake on

66
00:02:56,659 --> 00:02:59,270
line one, you cannot go back and edit line

67
00:02:59,270 --> 00:03:01,439
one. In addition, you cannot type out

68
00:03:01,439 --> 00:03:03,580
multiple expressions in the same multi

69
00:03:03,580 --> 00:03:06,069
line session. Luckily, note has a more

70
00:03:06,069 --> 00:03:08,379
featured editor right here. Inside

71
00:03:08,379 --> 00:03:11,629
Durable. You type in adopt editor to open

72
00:03:11,629 --> 00:03:14,030
it up, and when you do, you can type as

73
00:03:14,030 --> 00:03:15,840
many lines as you need. For example, you

74
00:03:15,840 --> 00:03:18,080
can define multiple functions or paste

75
00:03:18,080 --> 00:03:20,289
code from the clipboard. When you're done

76
00:03:20,289 --> 00:03:23,030
typing, you hit control D to have the

77
00:03:23,030 --> 00:03:25,569
ripple evaluate your code. All the

78
00:03:25,569 --> 00:03:27,840
functions that you defined in the editor

79
00:03:27,840 --> 00:03:29,500
will now be available in your rebel

80
00:03:29,500 --> 00:03:32,199
session. The dot editor Command is a rebel

81
00:03:32,199 --> 00:03:33,689
command, and there are actually a few

82
00:03:33,689 --> 00:03:36,030
other commands. You can see the list by

83
00:03:36,030 --> 00:03:39,189
typing the dot help command the dot break

84
00:03:39,189 --> 00:03:42,210
command, or it's not clear. Alias lets you

85
00:03:42,210 --> 00:03:44,080
get out of some weird cases in the rebel

86
00:03:44,080 --> 00:03:47,310
session. For example, when you paste some

87
00:03:47,310 --> 00:03:50,199
code in notes, multi line mode and you are

88
00:03:50,199 --> 00:03:52,370
not sure how maney curly braces you need

89
00:03:52,370 --> 00:03:54,900
to get to and executable state, you can

90
00:03:54,900 --> 00:03:57,819
completely discard your pace IT code by

91
00:03:57,819 --> 00:04:01,680
using at dot break command. This saves you

92
00:04:01,680 --> 00:04:03,990
from killing the whole session. To get

93
00:04:03,990 --> 00:04:05,849
yourself out of simple situations like

94
00:04:05,849 --> 00:04:09,719
this, the Docker exit command exits the

95
00:04:09,719 --> 00:04:13,240
rebel, or you can simply press control de

96
00:04:13,240 --> 00:04:15,710
the dot load and dot save commands can be

97
00:04:15,710 --> 00:04:17,819
used to generate and use external note

98
00:04:17,819 --> 00:04:20,350
scripts inside Europe. All this could be a

99
00:04:20,350 --> 00:04:24,730
great time saver. Here is a fresh rebel

100
00:04:24,730 --> 00:04:26,959
session. Let's say I started typing in

101
00:04:26,959 --> 00:04:28,610
this rebel session. I defined one

102
00:04:28,610 --> 00:04:31,100
function, and then I defined another

103
00:04:31,100 --> 00:04:33,610
function, and then I define the third

104
00:04:33,610 --> 00:04:35,769
function, and now I have some history in

105
00:04:35,769 --> 00:04:37,680
this ripple session, and what I want to do

106
00:04:37,680 --> 00:04:40,259
is I'd like to save all these functions to

107
00:04:40,259 --> 00:04:42,879
an external file, to maybe review them

108
00:04:42,879 --> 00:04:45,540
later or maybe commit them to get. All I

109
00:04:45,540 --> 00:04:48,300
need to do is dot save and give it a file

110
00:04:48,300 --> 00:04:52,139
name. I'm gonna call IT M seven Duchess.

111
00:04:52,139 --> 00:04:54,589
And now, if I inspect the content of M

112
00:04:54,589 --> 00:04:57,550
seven Dutch us, this file will have all

113
00:04:57,550 --> 00:04:59,519
the lines that we previously typed in the

114
00:04:59,519 --> 00:05:02,500
rebel session, which is really cool mawr.

115
00:05:02,500 --> 00:05:05,170
Importantly, if later on we started a

116
00:05:05,170 --> 00:05:07,180
brand new proposition and we wanted to

117
00:05:07,180 --> 00:05:08,879
redefine the functions UI previously

118
00:05:08,879 --> 00:05:12,629
defined in M seven judges, all we need to

119
00:05:12,629 --> 00:05:16,149
do is use the dot load command with M

120
00:05:16,149 --> 00:05:19,629
seven Digest as the argument. A node will

121
00:05:19,629 --> 00:05:22,199
load all the lines in the file and

122
00:05:22,199 --> 00:05:25,230
evaluate them. And now we have access to

123
00:05:25,230 --> 00:05:49,000
the functions and variables defined in that file.

