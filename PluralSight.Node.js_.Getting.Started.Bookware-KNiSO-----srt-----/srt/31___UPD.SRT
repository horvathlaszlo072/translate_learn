0
00:00:00,240 --> 00:00:02,100
[Autogenerated] in any note project. It's

1
00:00:02,100 --> 00:00:04,370
usually a good idea to update your npm

2
00:00:04,370 --> 00:00:06,929
dependencies before testing each release

3
00:00:06,929 --> 00:00:08,830
to get the updates that have been made to

4
00:00:08,830 --> 00:00:11,189
your dependencies. You want to at least

5
00:00:11,189 --> 00:00:13,550
get any bug and security fixes in the

6
00:00:13,550 --> 00:00:16,160
patch number of these dependencies. It's

7
00:00:16,160 --> 00:00:18,010
also much easier to deal with these

8
00:00:18,010 --> 00:00:21,789
updates if you do them frequently. The npm

9
00:00:21,789 --> 00:00:23,809
update is the command you can use to do

10
00:00:23,809 --> 00:00:26,100
that. It respects all the semantic

11
00:00:26,100 --> 00:00:27,960
versioning strings that are in packaged

12
00:00:27,960 --> 00:00:31,649
adjacent for this exercise. I have this

13
00:00:31,649 --> 00:00:34,759
five update directory here under npm and

14
00:00:34,759 --> 00:00:37,560
it has a package that Jason file with to

15
00:00:37,560 --> 00:00:40,920
exact dependencies, load ash and request.

16
00:00:40,920 --> 00:00:43,189
If you notice these version strings for

17
00:00:43,189 --> 00:00:45,659
load ash and request do not have any

18
00:00:45,659 --> 00:00:49,710
caret-symbol the prefixes. This makes them

19
00:00:49,710 --> 00:00:52,530
exact their equivalent to doing equal sign

20
00:00:52,530 --> 00:00:54,759
here. Which means I am interested in

21
00:00:54,759 --> 00:00:58,210
exactly this version. So the first step is

22
00:00:58,210 --> 00:00:59,929
to install these dependencies. So we do

23
00:00:59,929 --> 00:01:01,969
that with npm install. This will download

24
00:01:01,969 --> 00:01:03,689
the exact versions that we're interested

25
00:01:03,689 --> 00:01:06,239
in and place them under the node Modules

26
00:01:06,239 --> 00:01:09,609
directory. You can verify what versions

27
00:01:09,609 --> 00:01:12,450
were installed using the npm ls command

28
00:01:12,450 --> 00:01:15,609
now the npm ls command is going to l s the

29
00:01:15,609 --> 00:01:18,170
whole dependency three. So basically all

30
00:01:18,170 --> 00:01:20,170
your top level dependencies and all of

31
00:01:20,170 --> 00:01:22,819
their dependencies on this request package

32
00:01:22,819 --> 00:01:25,180
has some sub dependencies. But if you

33
00:01:25,180 --> 00:01:26,849
scroll up a little bit here, you should

34
00:01:26,849 --> 00:01:29,030
see the top level dependencies right here

35
00:01:29,030 --> 00:01:31,219
at the beginning of the tree. And npm

36
00:01:31,219 --> 00:01:33,739
installed the exact versions specified in

37
00:01:33,739 --> 00:01:36,329
the package that Jason which means if I

38
00:01:36,329 --> 00:01:38,760
issue the npm Update Command, nothing is

39
00:01:38,760 --> 00:01:40,810
going to be updated because package that

40
00:01:40,810 --> 00:01:44,450
Jason asks for exactly these versions now,

41
00:01:44,450 --> 00:01:47,129
by default when you install any npm

42
00:01:47,129 --> 00:01:49,000
package, let's, for example, installed the

43
00:01:49,000 --> 00:01:52,040
express package. When npm installs that IT

44
00:01:52,040 --> 00:01:55,409
rights IT with the carrot IT ation. So

45
00:01:55,409 --> 00:01:57,209
this was added to package that Jason. But

46
00:01:57,209 --> 00:01:58,829
it was added with the current notation,

47
00:01:58,829 --> 00:02:01,379
which means that any update in the minor

48
00:02:01,379 --> 00:02:04,939
section off the version is okay, We just

49
00:02:04,939 --> 00:02:07,730
got the latest version off express. So npm

50
00:02:07,730 --> 00:02:10,150
update will also not do anything. We don't

51
00:02:10,150 --> 00:02:11,919
have anything that can be updated. We have

52
00:02:11,919 --> 00:02:13,560
the exact versions that we're interested

53
00:02:13,560 --> 00:02:15,979
in before playing with the version of

54
00:02:15,979 --> 00:02:18,060
strings. Let me remove this express

55
00:02:18,060 --> 00:02:20,080
dependency that I just installed you do

56
00:02:20,080 --> 00:02:25,199
that with npm Uninstall Express and this

57
00:02:25,199 --> 00:02:27,009
will remove it from under the note modules

58
00:02:27,009 --> 00:02:29,240
directory. And it will also remove it from

59
00:02:29,240 --> 00:02:32,039
package that Jason so we no longer depend

60
00:02:32,039 --> 00:02:36,210
on this express package to explore the

61
00:02:36,210 --> 00:02:39,449
update process. Let's add a prefix here to

62
00:02:39,449 --> 00:02:41,259
the request package. I'm gonna add a

63
00:02:41,259 --> 00:02:43,189
carrot to the request package. So this is

64
00:02:43,189 --> 00:02:45,020
the default behavior. When you install

65
00:02:45,020 --> 00:02:47,469
request on for load ash, I'm gonna add a

66
00:02:47,469 --> 00:02:51,150
tilde. So the carrot in request means that

67
00:02:51,150 --> 00:02:53,400
any minor update is okay So anything in

68
00:02:53,400 --> 00:02:55,939
this section will be updated while the

69
00:02:55,939 --> 00:02:58,879
tilde in load ash means Onley patch

70
00:02:58,879 --> 00:03:02,490
updates are okay. You can see all the

71
00:03:02,490 --> 00:03:04,699
versions that are available in an npm

72
00:03:04,699 --> 00:03:07,620
package using the command npm show the

73
00:03:07,620 --> 00:03:10,740
name of the package, for example request

74
00:03:10,740 --> 00:03:12,240
and this will show everything about

75
00:03:12,240 --> 00:03:14,009
request. If you're interested in just the

76
00:03:14,009 --> 00:03:16,319
versions, you add the word versions, so

77
00:03:16,319 --> 00:03:19,090
npm show request versions, and this will

78
00:03:19,090 --> 00:03:20,849
give us an array of all the versions

79
00:03:20,849 --> 00:03:22,939
available in request. Now they can't

80
00:03:22,939 --> 00:03:25,610
version that we have is here, and the

81
00:03:25,610 --> 00:03:29,439
latest version right now is to 87 0

82
00:03:29,439 --> 00:03:32,770
because we've used the carrot in request.

83
00:03:32,770 --> 00:03:35,370
The next update process is going to take

84
00:03:35,370 --> 00:03:39,750
us from 2852287 Because this is a minor

85
00:03:39,750 --> 00:03:41,879
update. And that's okay with the carrot

86
00:03:41,879 --> 00:03:45,080
Asian. What about load Ash? Let's check

87
00:03:45,080 --> 00:03:49,939
that out. So npm show load ash versions

88
00:03:49,939 --> 00:03:51,900
and the latest version for load ash right

89
00:03:51,900 --> 00:03:55,229
now is 4 17 10. And what I have here is

90
00:03:55,229 --> 00:03:57,870
for 16 to with tell the annotation, which

91
00:03:57,870 --> 00:04:00,340
means Onley patch updates are going to be

92
00:04:00,340 --> 00:04:02,580
applied. So we're not going to go all the

93
00:04:02,580 --> 00:04:08,219
way to 4 17. But we can get 4 16 6 because

94
00:04:08,219 --> 00:04:11,150
that's a security and bug level fix. So

95
00:04:11,150 --> 00:04:14,719
we'll go from 4 16 2 to 4 16 6 before

96
00:04:14,719 --> 00:04:16,959
running the npm Update Command. Anyway, I

97
00:04:16,959 --> 00:04:19,189
like to verify what packages are going to

98
00:04:19,189 --> 00:04:21,949
be updated and to what exact versions are

99
00:04:21,949 --> 00:04:24,019
they going to be updated? And instead of

100
00:04:24,019 --> 00:04:25,970
doing this manual ing in your head and

101
00:04:25,970 --> 00:04:27,970
checking the versions, there is an npm

102
00:04:27,970 --> 00:04:31,430
command called npm outdated. This will

103
00:04:31,430 --> 00:04:34,220
tell you what packages will be updated. It

104
00:04:34,220 --> 00:04:36,529
will not update the packages, but it will

105
00:04:36,529 --> 00:04:38,759
tell you that if you run the npm update

106
00:04:38,759 --> 00:04:40,889
these wanted packages are where you're

107
00:04:40,889 --> 00:04:42,930
going to get. So the current packages are

108
00:04:42,930 --> 00:04:45,850
what you have. The wanted packages are

109
00:04:45,850 --> 00:04:47,129
what you're going to get if you run the

110
00:04:47,129 --> 00:04:49,269
npm update command and in here, it will

111
00:04:49,269 --> 00:04:51,300
also show you the absolute latest

112
00:04:51,300 --> 00:04:53,639
packages. If you're interested in those

113
00:04:53,639 --> 00:04:55,899
because of semantic versioning in here,

114
00:04:55,899 --> 00:04:57,430
we're not really getting the latest

115
00:04:57,430 --> 00:05:00,279
package, but rather the latest bug fix

116
00:05:00,279 --> 00:05:03,089
that we can have. And again, this is the

117
00:05:03,089 --> 00:05:05,449
absolute minimum thing you should do when

118
00:05:05,449 --> 00:05:07,319
you're planning to update your packages.

119
00:05:07,319 --> 00:05:09,730
However, just be careful and test because

120
00:05:09,730 --> 00:05:12,350
sometimes even patch level updates might

121
00:05:12,350 --> 00:05:14,439
introduce new bugs in your system.

122
00:05:14,439 --> 00:05:17,470
Alright. So to update UI, just run npm

123
00:05:17,470 --> 00:05:20,120
update and this will update the packages

124
00:05:20,120 --> 00:05:23,189
according to semantic versioning. And once

125
00:05:23,189 --> 00:05:25,459
it's done, you can run npm ls I'm gonna

126
00:05:25,459 --> 00:05:27,589
pipe that unless and this will give you

127
00:05:27,589 --> 00:05:29,680
the latest dependency tree starting from

128
00:05:29,680 --> 00:05:31,790
your top level dependencies here that were

129
00:05:31,790 --> 00:05:33,740
updated to the latest. According to

130
00:05:33,740 --> 00:05:36,240
semantic versioning, the package that

131
00:05:36,240 --> 00:05:39,310
Jason file was also updated to reflect the

132
00:05:39,310 --> 00:05:40,939
new versions that we're starting with

133
00:05:40,939 --> 00:05:43,730
right now. And note how the npm Update

134
00:05:43,730 --> 00:05:46,439
command used the carrot notation here.

135
00:05:46,439 --> 00:05:48,120
Although I was using the tell the

136
00:05:48,120 --> 00:05:49,750
invitation before, so be careful about

137
00:05:49,750 --> 00:05:54,129
that. Now, what if I'm interested in a nup

138
00:05:54,129 --> 00:05:58,589
date that is beyond the version string? I

139
00:05:58,589 --> 00:06:01,459
can do that with npm. Install the name off

140
00:06:01,459 --> 00:06:04,209
the package and I can actually place any

141
00:06:04,209 --> 00:06:07,290
version here so I can say 4, 17 or just

142
00:06:07,290 --> 00:06:09,550
four, and that will give me the latest on

143
00:06:09,550 --> 00:06:12,720
the four. Or I could just say latest npm

144
00:06:12,720 --> 00:06:14,910
installed load ash at Latest. And this

145
00:06:14,910 --> 00:06:17,519
will give me the absolute latest load Ash

146
00:06:17,519 --> 00:06:20,310
library, as you can see here for 17. 10.

147
00:06:20,310 --> 00:06:23,639
And this match is the latest version for

148
00:06:23,639 --> 00:06:26,069
load Ash right here with npm Show load ash

149
00:06:26,069 --> 00:06:28,389
version. The singular version here is

150
00:06:28,389 --> 00:06:29,910
going to give me the latest version

151
00:06:29,910 --> 00:06:32,079
available. Load, ash. And it's the current

152
00:06:32,079 --> 00:06:34,160
version that I have in package that Jason.

153
00:06:34,160 --> 00:06:37,000
And this happened because I specified that

154
00:06:37,000 --> 00:06:42,000
I am interested in the latest version of load ash

