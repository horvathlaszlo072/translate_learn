0
00:00:01,139 --> 00:00:02,069
[Autogenerated] I think we're ready to

1
00:00:02,069 --> 00:00:04,280
bring out the big guns. Well, actually,

2
00:00:04,280 --> 00:00:06,299
this is a lot easier than it sounds. Let's

3
00:00:06,299 --> 00:00:10,140
create and then publish an npm package.

4
00:00:10,140 --> 00:00:12,289
Try to do this exercise with me on your

5
00:00:12,289 --> 00:00:14,789
own. Pause the video as needed and matter

6
00:00:14,789 --> 00:00:18,289
what I do. I've included a test file under

7
00:00:18,289 --> 00:00:20,769
the exercise files right here under the

8
00:00:20,769 --> 00:00:23,609
three Create Package directory. The goal

9
00:00:23,609 --> 00:00:25,500
is to make this file work and output

10
00:00:25,500 --> 00:00:27,329
what's expected, As you see here in the

11
00:00:27,329 --> 00:00:31,559
comment. So if we execute this file right

12
00:00:31,559 --> 00:00:33,810
now, it will not work because the frame

13
00:00:33,810 --> 00:00:36,070
print package does not exist. This is the

14
00:00:36,070 --> 00:00:38,899
package that we will be creating in this

15
00:00:38,899 --> 00:00:41,219
line. We're requiring this package and

16
00:00:41,219 --> 00:00:43,570
capturing the top level a p i of this

17
00:00:43,570 --> 00:00:46,619
package as the print variable. And then

18
00:00:46,619 --> 00:00:49,000
we're using the print variable as a

19
00:00:49,000 --> 00:00:52,049
function call. So the top level a p I in

20
00:00:52,049 --> 00:00:54,049
the package that we need to create should

21
00:00:54,049 --> 00:00:56,820
be a function. And here is the expected

22
00:00:56,820 --> 00:00:58,960
output. IT just prints the message in the

23
00:00:58,960 --> 00:01:02,799
argument in a frame of stars. All right,

24
00:01:02,799 --> 00:01:05,640
so let's start from a make direct

25
00:01:05,640 --> 00:01:08,549
recommend now. Usually you need to name

26
00:01:08,549 --> 00:01:11,400
the package as the string that we are

27
00:01:11,400 --> 00:01:14,540
using here to require so make directory

28
00:01:14,540 --> 00:01:19,659
frame print. So under frame print, we need

29
00:01:19,659 --> 00:01:22,459
to create new file. Let's call this file

30
00:01:22,459 --> 00:01:26,420
index Duchess. Now the name index the jazz

31
00:01:26,420 --> 00:01:29,370
is a bit special in note and npm by

32
00:01:29,370 --> 00:01:32,709
default when you require a folder note

33
00:01:32,709 --> 00:01:35,140
will look for an index the Js file under

34
00:01:35,140 --> 00:01:38,239
that folder which will work in our case.

35
00:01:38,239 --> 00:01:41,099
So just to test this index that yes, let's

36
00:01:41,099 --> 00:01:43,079
place a console log statement here and

37
00:01:43,079 --> 00:01:46,459
just say testing. So let me actually split

38
00:01:46,459 --> 00:01:51,159
this file in the editor here. Okay, so

39
00:01:51,159 --> 00:01:53,959
we've got this index suggests file under

40
00:01:53,959 --> 00:01:56,950
the frame print directory on we have the

41
00:01:56,950 --> 00:01:59,379
index dot Js file that is under the test

42
00:01:59,379 --> 00:02:01,469
directory, which we're going to use to

43
00:02:01,469 --> 00:02:05,049
test the frame print directory. Now to get

44
00:02:05,049 --> 00:02:07,719
this line here to work, this frame print

45
00:02:07,719 --> 00:02:09,849
package should exist under the note

46
00:02:09,849 --> 00:02:13,430
modules folder inside the test folder. We

47
00:02:13,430 --> 00:02:15,069
don't have that. We don't have a note

48
00:02:15,069 --> 00:02:17,319
modules folder inside that folder for

49
00:02:17,319 --> 00:02:19,780
testing purposes. Instead of using this

50
00:02:19,780 --> 00:02:22,879
line, we-can require the adjacent frame

51
00:02:22,879 --> 00:02:26,069
print directory using relative paths. So

52
00:02:26,069 --> 00:02:28,310
instead of requiring this directly from

53
00:02:28,310 --> 00:02:30,960
note modules. We-can say Let's go up one

54
00:02:30,960 --> 00:02:34,439
level and then require frame print from

55
00:02:34,439 --> 00:02:37,229
the same level as the parent of this test

56
00:02:37,229 --> 00:02:40,639
folder where we're testing with that, we

57
00:02:40,639 --> 00:02:42,759
can run this index dot Js file under the

58
00:02:42,759 --> 00:02:46,620
test folder, and it will require the frame

59
00:02:46,620 --> 00:02:48,949
print that we are testing right here. All

60
00:02:48,949 --> 00:02:51,919
right, let's test that So node test index

61
00:02:51,919 --> 00:02:54,909
Splunk-ES and you'll notice right away

62
00:02:54,909 --> 00:02:57,729
that we are in business. The console

63
00:02:57,729 --> 00:03:01,240
logline is now showing up in our test.

64
00:03:01,240 --> 00:03:04,069
Very good. We're still seeing a problem

65
00:03:04,069 --> 00:03:06,289
that says print is not a function because

66
00:03:06,289 --> 00:03:08,680
we did not export any A p i yet. So

67
00:03:08,680 --> 00:03:10,500
instead of console lock testing, let's go

68
00:03:10,500 --> 00:03:13,610
ahead and export an A p I. Now in a note

69
00:03:13,610 --> 00:03:16,699
module, you can change the A P I using the

70
00:03:16,699 --> 00:03:18,900
exports special objects so I could do

71
00:03:18,900 --> 00:03:21,939
something like a is 42 in here. However,

72
00:03:21,939 --> 00:03:23,580
if you need to change the top level

73
00:03:23,580 --> 00:03:27,080
export, you need to use the module. The

74
00:03:27,080 --> 00:03:31,639
exports equal notation. So our top level

75
00:03:31,639 --> 00:03:34,060
export here, which were capturing in the

76
00:03:34,060 --> 00:03:36,270
print variable, is a function. So let's go

77
00:03:36,270 --> 00:03:39,430
ahead and do a function here I'll name

78
00:03:39,430 --> 00:03:42,599
dysfunction. Print dysfunction receives a

79
00:03:42,599 --> 00:03:45,689
single argument, so we'll call this

80
00:03:45,689 --> 00:03:49,210
argument message now, inside this

81
00:03:49,210 --> 00:03:53,550
function, let's console log testing from

82
00:03:53,550 --> 00:03:57,199
function and let me go ahead and run the

83
00:03:57,199 --> 00:03:59,479
command again and make sure testing from

84
00:03:59,479 --> 00:04:02,610
function appears and it does. And you'll

85
00:04:02,610 --> 00:04:05,439
notice that the air about print not being

86
00:04:05,439 --> 00:04:07,969
a function is gone now because our top

87
00:04:07,969 --> 00:04:12,319
level A p I is now a function. So now all

88
00:04:12,319 --> 00:04:14,569
we need to do is to make this function

89
00:04:14,569 --> 00:04:17,730
output the message within F Star of

90
00:04:17,730 --> 00:04:20,430
frames. For that, we can use a few console

91
00:04:20,430 --> 00:04:25,350
log statements so we can do stars and

92
00:04:25,350 --> 00:04:28,060
we'll do another one just like that. And

93
00:04:28,060 --> 00:04:31,089
inside the frame, Well, just console log

94
00:04:31,089 --> 00:04:34,180
the message just like that. Let's go ahead

95
00:04:34,180 --> 00:04:39,290
and test no test the up, but now matches

96
00:04:39,290 --> 00:04:42,589
what was expected here. Okay, so this is a

97
00:04:42,589 --> 00:04:44,439
very simple package, and really, the logic

98
00:04:44,439 --> 00:04:47,019
hair doesn't matter. What matters is we

99
00:04:47,019 --> 00:04:49,689
now need to make this package work without

100
00:04:49,689 --> 00:04:51,819
our modification to the test here,

101
00:04:51,819 --> 00:04:54,579
Basically, by doing that and I'm going to

102
00:04:54,579 --> 00:04:56,389
assume that we're done developing this

103
00:04:56,389 --> 00:04:58,399
simple package, we need to publish this

104
00:04:58,399 --> 00:05:03,259
package and use it through npm. So what I

105
00:05:03,259 --> 00:05:05,889
want to do here? I'd like to go inside

106
00:05:05,889 --> 00:05:08,949
test and do something like npm install

107
00:05:08,949 --> 00:05:12,639
frame print. And once this command is

108
00:05:12,639 --> 00:05:15,370
done, I should be able to run my test and

109
00:05:15,370 --> 00:05:18,740
see the exact same output that's expected.

110
00:05:18,740 --> 00:05:21,639
So to get this npm install command to

111
00:05:21,639 --> 00:05:24,269
install our own frame print, we need to

112
00:05:24,269 --> 00:05:26,850
publish that package now. Since the

113
00:05:26,850 --> 00:05:29,899
package name is unique at npm j dot com

114
00:05:29,899 --> 00:05:32,259
tow, avoid conflict as we're all doing

115
00:05:32,259 --> 00:05:34,740
this exercise, I'm gonna add the prefects

116
00:05:34,740 --> 00:05:36,699
to this package here and use my own

117
00:05:36,699 --> 00:05:40,579
username at npm JSON com This way, when UI

118
00:05:40,579 --> 00:05:42,860
npm install the package, you can use your

119
00:05:42,860 --> 00:05:45,649
own username and you can publish your own

120
00:05:45,649 --> 00:05:49,129
package as well. So you actually need to

121
00:05:49,129 --> 00:05:51,910
create an account at npm JSON Com If you

122
00:05:51,910 --> 00:05:54,629
don't have one to publish any package at

123
00:05:54,629 --> 00:05:57,319
npm, you need to have credentials. So go

124
00:05:57,319 --> 00:06:00,160
ahead and do that. So once you have an

125
00:06:00,160 --> 00:06:02,410
account, you can use your user name and

126
00:06:02,410 --> 00:06:05,639
password to publish the packages. So

127
00:06:05,639 --> 00:06:07,620
here's what you need to do in npm. To

128
00:06:07,620 --> 00:06:09,399
accomplish that, I'm going to clear this

129
00:06:09,399 --> 00:06:11,290
command will come back to that in just a

130
00:06:11,290 --> 00:06:13,839
little bit. And now, from anywhere here in

131
00:06:13,839 --> 00:06:16,779
your shell, you need to do npm login. Npm

132
00:06:16,779 --> 00:06:19,569
login is going to connect your npm just-as

133
00:06:19,569 --> 00:06:22,579
com credentials with your local npm tool

134
00:06:22,579 --> 00:06:24,629
here so that you can publish to your

135
00:06:24,629 --> 00:06:27,879
account. So, npm Logan, we'll ask you for

136
00:06:27,879 --> 00:06:30,189
username and password. Go ahead and put

137
00:06:30,189 --> 00:06:34,860
these in and the email as well. This

138
00:06:34,860 --> 00:06:36,579
should match the email that you used when

139
00:06:36,579 --> 00:06:39,040
you created your account. And now I am

140
00:06:39,040 --> 00:06:43,180
logged into npm GS. Very good. Now we can

141
00:06:43,180 --> 00:06:47,069
publish the package. So this frame print

142
00:06:47,069 --> 00:06:49,439
directory here is not yet a package

143
00:06:49,439 --> 00:06:51,160
because it does not have a package that

144
00:06:51,160 --> 00:06:53,069
Jason file. So we need to create a package

145
00:06:53,069 --> 00:06:56,069
that Jason file Let me see d into IT frame

146
00:06:56,069 --> 00:06:58,769
print and to create a package that Jason

147
00:06:58,769 --> 00:07:02,170
we-can simply use npm in IT. The package

148
00:07:02,170 --> 00:07:05,009
name is no longer frame print, so type in

149
00:07:05,009 --> 00:07:09,639
your npm username. Dash frame print. The

150
00:07:09,639 --> 00:07:12,110
version can be 100 This is the first

151
00:07:12,110 --> 00:07:14,699
release you can add descriptions, entry

152
00:07:14,699 --> 00:07:17,129
point, test command, git repository. And

153
00:07:17,129 --> 00:07:20,639
I'm going to keep everything default here.

154
00:07:20,639 --> 00:07:23,740
Okay, we have a package that, Jason. And

155
00:07:23,740 --> 00:07:25,430
guess what? Once you have a package that

156
00:07:25,430 --> 00:07:29,250
Jason, all you have to do is npm publish.

157
00:07:29,250 --> 00:07:32,160
Just like that, This will publish your npm

158
00:07:32,160 --> 00:07:37,490
package to npm j s dot com. So to test

159
00:07:37,490 --> 00:07:39,910
that the published process was successful,

160
00:07:39,910 --> 00:07:41,949
you need to go to this. You URL npm jess

161
00:07:41,949 --> 00:07:44,610
dot com slash package slash the name of

162
00:07:44,610 --> 00:07:46,839
the package that you used and you should

163
00:07:46,839 --> 00:07:49,790
see your package published. This means

164
00:07:49,790 --> 00:07:52,470
that npm can now install this package on

165
00:07:52,470 --> 00:07:55,160
any machine. So if you haven't done the

166
00:07:55,160 --> 00:07:57,569
first half of this exercise, you can just

167
00:07:57,569 --> 00:08:00,199
install this package from npm and just use

168
00:08:00,199 --> 00:08:02,990
IT. Now that we have a package published,

169
00:08:02,990 --> 00:08:07,540
we can go back to the test directory here,

170
00:08:07,540 --> 00:08:10,300
so I no longer need this index suggest

171
00:08:10,300 --> 00:08:13,860
file. So focus on this index that Js file

172
00:08:13,860 --> 00:08:16,329
under the test directory. Here it is using

173
00:08:16,329 --> 00:08:17,850
the name of the package that I just

174
00:08:17,850 --> 00:08:19,670
published. But remember that this package

175
00:08:19,670 --> 00:08:22,180
is still in npm just dot com itself. We

176
00:08:22,180 --> 00:08:24,490
need to bring it here locally, using npm

177
00:08:24,490 --> 00:08:28,069
install for this file to access IT. So the

178
00:08:28,069 --> 00:08:30,000
command that we need in this case is just

179
00:08:30,000 --> 00:08:32,059
npm installed the name of the package and

180
00:08:32,059 --> 00:08:34,509
this will download the package and place

181
00:08:34,509 --> 00:08:37,299
it under the newly created Node Modules

182
00:08:37,299 --> 00:08:39,460
directory right here. As you can see, this

183
00:08:39,460 --> 00:08:42,480
is our package. And it is exactly the code

184
00:08:42,480 --> 00:08:44,539
that we've written. But now this package

185
00:08:44,539 --> 00:08:47,529
was downloaded from npm. And once we have

186
00:08:47,529 --> 00:08:49,769
the package downloaded from npm we-can, go

187
00:08:49,769 --> 00:08:52,740
ahead and test the script as is, and the

188
00:08:52,740 --> 00:08:56,679
script will just work. So this is really

189
00:08:56,679 --> 00:09:01,000
how simple it is to publish and use an npm package.

