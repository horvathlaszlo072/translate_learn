0
00:00:01,240 --> 00:00:02,720
[Autogenerated] you have two options. When

1
00:00:02,720 --> 00:00:05,349
it comes to installing an npm package, you

2
00:00:05,349 --> 00:00:08,740
can install it either locally or globally.

3
00:00:08,740 --> 00:00:11,210
When we worked under this one npm command

4
00:00:11,210 --> 00:00:13,339
directory, all the three packages that we

5
00:00:13,339 --> 00:00:15,630
installed under this folder here were

6
00:00:15,630 --> 00:00:18,250
local. This is the default behavior of the

7
00:00:18,250 --> 00:00:20,940
npm Install Command. It'll just installed

8
00:00:20,940 --> 00:00:23,320
package locally under the project where

9
00:00:23,320 --> 00:00:26,320
you run the command. If the package is to

10
00:00:26,320 --> 00:00:28,879
be used within a node folder, basically,

11
00:00:28,879 --> 00:00:31,010
if you need to use it just for one

12
00:00:31,010 --> 00:00:33,240
project, you should probably install IT

13
00:00:33,240 --> 00:00:36,689
locally. I'd say 99% of the packages that

14
00:00:36,689 --> 00:00:39,409
you use should be installed locally. The

15
00:00:39,409 --> 00:00:41,670
only exception is when you need to install

16
00:00:41,670 --> 00:00:45,329
global tools. For example, create react

17
00:00:45,329 --> 00:00:48,299
app is a package hosting a tool react.

18
00:00:48,299 --> 00:00:51,479
Developers use that tool to well create a

19
00:00:51,479 --> 00:00:53,880
fully configured react application. This

20
00:00:53,880 --> 00:00:56,320
is an example of a package that's usually

21
00:00:56,320 --> 00:00:58,859
installed globally. You don't need to be

22
00:00:58,859 --> 00:01:00,990
in a specific directory to use this tool.

23
00:01:00,990 --> 00:01:03,659
You can use it anywhere. Also, once you're

24
00:01:03,659 --> 00:01:05,810
generated, react application is running.

25
00:01:05,810 --> 00:01:07,750
You are not really depending on the create

26
00:01:07,750 --> 00:01:10,170
react app tool itself anymore. You still

27
00:01:10,170 --> 00:01:13,010
depend on other packages related to create

28
00:01:13,010 --> 00:01:15,709
react app, but not on the package hosting

29
00:01:15,709 --> 00:01:19,280
the command to install and update packages

30
00:01:19,280 --> 00:01:22,730
globally, you add the Dash G flag, which

31
00:01:22,730 --> 00:01:25,599
is short for global. Once a tool packages

32
00:01:25,599 --> 00:01:28,079
installed globally, it's command will be

33
00:01:28,079 --> 00:01:31,159
available for you to run from anywhere, so

34
00:01:31,159 --> 00:01:33,670
for create react app. UI, npm install dash

35
00:01:33,670 --> 00:01:38,590
G, create react app And once a tool

36
00:01:38,590 --> 00:01:41,159
package is installed globally, it's

37
00:01:41,159 --> 00:01:43,540
command will be available for you to run

38
00:01:43,540 --> 00:01:46,069
from anywhere. The commands a package add

39
00:01:46,069 --> 00:01:48,349
to your system are listed right here when

40
00:01:48,349 --> 00:01:51,040
you install that package. So this create

41
00:01:51,040 --> 00:01:53,230
react. App. Command is now a command that

42
00:01:53,230 --> 00:01:57,129
I can run from anywhere, regardless of

43
00:01:57,129 --> 00:01:59,230
whether the package is installed globally

44
00:01:59,230 --> 00:02:02,049
or locally. Once it's installed, you can

45
00:02:02,049 --> 00:02:06,780
require IT from any node script under this

46
00:02:06,780 --> 00:02:09,830
to usage folder. Here we have a simple,

47
00:02:09,830 --> 00:02:12,300
empty package that Jason File. Let's

48
00:02:12,300 --> 00:02:14,740
install the load ash package locally.

49
00:02:14,740 --> 00:02:17,810
Remember how to do that npm install load

50
00:02:17,810 --> 00:02:20,509
ash and that's it that will install load

51
00:02:20,509 --> 00:02:23,259
ash locally under the two Usage folder and

52
00:02:23,259 --> 00:02:25,830
place that package under the Node Modules

53
00:02:25,830 --> 00:02:28,090
folder. Let's take a look under the note

54
00:02:28,090 --> 00:02:31,780
modules folder. Load ashes there and note

55
00:02:31,780 --> 00:02:34,370
how this package has no sub dependencies

56
00:02:34,370 --> 00:02:36,330
at all. The Onley package in our

57
00:02:36,330 --> 00:02:40,180
dependency three right now is load ash now

58
00:02:40,180 --> 00:02:42,479
within the current folder, we-can require

59
00:02:42,479 --> 00:02:46,689
the load ash package from any file. Here's

60
00:02:46,689 --> 00:02:49,490
a test that does exactly that. This test

61
00:02:49,490 --> 00:02:52,780
DGS file requires the load ash library and

62
00:02:52,780 --> 00:02:55,949
then uses its some function to some, the

63
00:02:55,949 --> 00:02:58,250
integers in an array, and I'll app. Put

64
00:02:58,250 --> 00:03:00,780
the result after that. Since load ash is

65
00:03:00,780 --> 00:03:02,889
already installed under the noted Modules

66
00:03:02,889 --> 00:03:06,719
folder, this file will run fine and

67
00:03:06,719 --> 00:03:09,610
output. The result. Now try to run the

68
00:03:09,610 --> 00:03:12,789
same file after deleting the note modules

69
00:03:12,789 --> 00:03:16,060
folder. So RM dash R F note modules, all

70
00:03:16,060 --> 00:03:18,900
of it. And now you'll find out that if you

71
00:03:18,900 --> 00:03:22,310
try to run note test duchess, you'll find

72
00:03:22,310 --> 00:03:25,379
out that you can't run this file load. Ash

73
00:03:25,379 --> 00:03:28,840
is no longer available for node to use.

74
00:03:28,840 --> 00:03:30,750
The Note Modules folder is simply the

75
00:03:30,750 --> 00:03:33,909
connection between npm and ____. You can

76
00:03:33,909 --> 00:03:36,550
actually place the load ash dependency

77
00:03:36,550 --> 00:03:39,419
under the parent folders, Note modules

78
00:03:39,419 --> 00:03:41,259
folders, so the note Modules folder

79
00:03:41,259 --> 00:03:43,250
doesn't have to be in the exactly actually

80
00:03:43,250 --> 00:03:45,509
where you are. Node will check all the

81
00:03:45,509 --> 00:03:48,240
parents for their own Note Modules folder

82
00:03:48,240 --> 00:03:51,000
so you can basically make a directory in

83
00:03:51,000 --> 00:03:52,960
your home directory called note modules

84
00:03:52,960 --> 00:03:54,750
just like that. And that directory would

85
00:03:54,750 --> 00:03:58,449
satisfy all the dependencies for all your

86
00:03:58,449 --> 00:04:00,639
projects. But really, this is not a

87
00:04:00,639 --> 00:04:03,099
recommended approach. If your note script

88
00:04:03,099 --> 00:04:05,879
requires load ash like this load, ash

89
00:04:05,879 --> 00:04:07,800
should be a local dependency under the

90
00:04:07,800 --> 00:04:10,699
project's main Note Modules folder. And

91
00:04:10,699 --> 00:04:12,030
the version you install should be

92
00:04:12,030 --> 00:04:14,539
documented in Package that Jason, so that

93
00:04:14,539 --> 00:04:16,459
all members on the team have a similar

94
00:04:16,459 --> 00:04:19,000
experience working the project dependencies.

