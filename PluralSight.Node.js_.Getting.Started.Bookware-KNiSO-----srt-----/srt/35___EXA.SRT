0
00:00:00,640 --> 00:00:01,919
[Autogenerated] Here are some examples

1
00:00:01,919 --> 00:00:04,849
that define and use multiple types of a P

2
00:00:04,849 --> 00:00:08,099
I objects. I am now under the two examples

3
00:00:08,099 --> 00:00:11,619
folder under the four Modules folder. And

4
00:00:11,619 --> 00:00:14,339
in here we have eight files four different

5
00:00:14,339 --> 00:00:17,679
AP I experts and how to use them. The

6
00:00:17,679 --> 00:00:20,219
first file here is the simple case. When

7
00:00:20,219 --> 00:00:22,530
you want your a p i to be a simple object,

8
00:00:22,530 --> 00:00:24,280
you don't really need to use module the

9
00:00:24,280 --> 00:00:26,559
exports. You could just use exports. So

10
00:00:26,559 --> 00:00:28,059
you put exports and then you put

11
00:00:28,059 --> 00:00:32,380
properties on your A p I. And to use this

12
00:00:32,380 --> 00:00:35,210
module when you call the require function

13
00:00:35,210 --> 00:00:38,500
on this module, you get back a simple AP.

14
00:00:38,500 --> 00:00:41,789
I object so you can read the elements of

15
00:00:41,789 --> 00:00:44,390
the A P i as properties on that object.

16
00:00:44,390 --> 00:00:48,250
Note one use duchess. We are getting the

17
00:00:48,250 --> 00:00:51,210
values that are exported through the AP

18
00:00:51,210 --> 00:00:54,539
here because the FBI is just on object.

19
00:00:54,539 --> 00:00:58,799
The second example here the top level a p

20
00:00:58,799 --> 00:01:01,920
I is an array. So I needed to use module

21
00:01:01,920 --> 00:01:05,120
the experts because I am reassigning the

22
00:01:05,120 --> 00:01:07,420
default expert, which is usually an empty

23
00:01:07,420 --> 00:01:09,719
object. And now I'm saying my top level a

24
00:01:09,719 --> 00:01:12,909
p I is in the rate to use this kind of a p

25
00:01:12,909 --> 00:01:16,769
I under to use here DJ s When you require

26
00:01:16,769 --> 00:01:19,939
the module, you get back the value that

27
00:01:19,939 --> 00:01:23,359
you need that value itself becomes your a

28
00:01:23,359 --> 00:01:26,469
p I. And not how you can just in line the

29
00:01:26,469 --> 00:01:28,609
require call inside some other function

30
00:01:28,609 --> 00:01:30,540
because it's just a function call that

31
00:01:30,540 --> 00:01:33,480
returns a value that value is your a p I.

32
00:01:33,480 --> 00:01:37,109
And in this case, it's Henry. So note to

33
00:01:37,109 --> 00:01:39,629
use the jazz and you get the array

34
00:01:39,629 --> 00:01:43,239
directly here from the console log light

35
00:01:43,239 --> 00:01:46,540
your-app I can also be just-as string.

36
00:01:46,540 --> 00:01:49,659
Look at this file. This a p I is returning

37
00:01:49,659 --> 00:01:52,000
at template String. Note that these

38
00:01:52,000 --> 00:01:53,989
characters are the back deck characters,

39
00:01:53,989 --> 00:01:55,730
not the single code characters because

40
00:01:55,730 --> 00:01:58,829
this is a multi line template string and

41
00:01:58,829 --> 00:02:01,000
the whole a p I is just returning this

42
00:02:01,000 --> 00:02:04,340
string. So if I want to use this a p I

43
00:02:04,340 --> 00:02:07,019
when I require the file, I get back an

44
00:02:07,019 --> 00:02:09,090
object which is a string. So if I console

45
00:02:09,090 --> 00:02:11,349
log this object, it will be a string. So

46
00:02:11,349 --> 00:02:15,599
node three used gs. That is the string

47
00:02:15,599 --> 00:02:18,259
that this a p I is using, but let's say

48
00:02:18,259 --> 00:02:20,770
you do want an HTML template, but you want

49
00:02:20,770 --> 00:02:22,990
it to be dynamic. You want to tell your

50
00:02:22,990 --> 00:02:25,229
module that you'd like it to generate an

51
00:02:25,229 --> 00:02:27,629
HTML template for a certain title. For

52
00:02:27,629 --> 00:02:29,699
example, instead of a generic title, How

53
00:02:29,699 --> 00:02:32,349
do you do that? You do it by exporting a

54
00:02:32,349 --> 00:02:35,280
function. Check this one out. Four.

55
00:02:35,280 --> 00:02:37,500
Function here. It's the exact same

56
00:02:37,500 --> 00:02:39,650
template text, and it's being done through

57
00:02:39,650 --> 00:02:41,280
a template string as well. But the

58
00:02:41,280 --> 00:02:43,909
difference is that the top level a p I

59
00:02:43,909 --> 00:02:47,340
here is now a function on. I used the

60
00:02:47,340 --> 00:02:49,169
shorthand notation for the arrow function

61
00:02:49,169 --> 00:02:52,099
here to have a narrow function that

62
00:02:52,099 --> 00:02:54,020
receives the title as a single argument

63
00:02:54,020 --> 00:02:56,669
and then return a template string that

64
00:02:56,669 --> 00:02:59,240
injects the title value right here inside

65
00:02:59,240 --> 00:03:02,650
the title tech. To use this, a p I. That

66
00:03:02,650 --> 00:03:05,509
is basically a function when you require

67
00:03:05,509 --> 00:03:08,370
this function here in four use, right, you

68
00:03:08,370 --> 00:03:10,990
get back. Ah, function. I called IT your

69
00:03:10,990 --> 00:03:14,439
template generator. It's a function, and

70
00:03:14,439 --> 00:03:17,710
you can invoke this function with any

71
00:03:17,710 --> 00:03:19,830
argument that you want, because the top

72
00:03:19,830 --> 00:03:22,599
level a p I is itself a function. I

73
00:03:22,599 --> 00:03:25,229
captured the result of the require call

74
00:03:25,229 --> 00:03:28,030
into a variable. And I am now executing

75
00:03:28,030 --> 00:03:29,800
that variable because it's just a

76
00:03:29,800 --> 00:03:33,129
function. And the result of executing this

77
00:03:33,129 --> 00:03:35,340
function is what the function returned

78
00:03:35,340 --> 00:03:37,219
here, which is the template. So this

79
00:03:37,219 --> 00:03:39,620
becomes my template and I can console log

80
00:03:39,620 --> 00:03:43,879
that so note for you. Study s and you get

81
00:03:43,879 --> 00:03:46,259
the exact same template. But now it is

82
00:03:46,259 --> 00:03:49,469
being customized with a custom title that

83
00:03:49,469 --> 00:03:51,870
I get to pass to the function that this a

84
00:03:51,870 --> 00:03:54,370
p a is exploring. So this a p I is now a

85
00:03:54,370 --> 00:03:56,330
lot more flexible than the previous one,

86
00:03:56,330 --> 00:03:59,689
which just hard coded a value for me. So

87
00:03:59,689 --> 00:04:01,509
these are just a few examples of how

88
00:04:01,509 --> 00:04:04,840
flexible this module the exports object is

89
00:04:04,840 --> 00:04:09,000
and how you can use it to return any kind of a p I in a node module.

