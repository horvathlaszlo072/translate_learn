0
00:00:01,540 --> 00:00:03,580
[Autogenerated] note is event driven. Most

1
00:00:03,580 --> 00:00:05,299
of the functions that you will be working

2
00:00:05,299 --> 00:00:07,480
with in note return promises, and you'll

3
00:00:07,480 --> 00:00:09,330
have to consume them using the promise

4
00:00:09,330 --> 00:00:12,380
syntax. With that, then and catch, However

5
00:00:12,380 --> 00:00:14,960
ah more preferable way to consume promises

6
00:00:14,960 --> 00:00:17,800
is using the new A sync await Centex,

7
00:00:17,800 --> 00:00:20,019
which makes your promise consuming code a

8
00:00:20,019 --> 00:00:22,059
bit more readable and easier, especially

9
00:00:22,059 --> 00:00:23,480
when you start dealing with loops and

10
00:00:23,480 --> 00:00:26,519
other complexities. Here's an example code

11
00:00:26,519 --> 00:00:28,640
that is consuming a promise object using

12
00:00:28,640 --> 00:00:31,019
the regular promise. Centex. Here we have

13
00:00:31,019 --> 00:00:33,130
a simple fetch function that reads and

14
00:00:33,130 --> 00:00:36,170
https response for a URL. Don't worry

15
00:00:36,170 --> 00:00:37,929
about the implementation of this function.

16
00:00:37,929 --> 00:00:40,289
Just notice how IT returns a promise

17
00:00:40,289 --> 00:00:42,899
object. This is the modern alternative to

18
00:00:42,899 --> 00:00:45,250
using callbacks for the A sync nature of

19
00:00:45,250 --> 00:00:47,570
dysfunction. To consume the fetch

20
00:00:47,570 --> 00:00:50,070
function, we use the dot then Centex,

21
00:00:50,070 --> 00:00:52,200
which will expose the data available after

22
00:00:52,200 --> 00:00:55,460
the A sync action. Alternatively, we can

23
00:00:55,460 --> 00:00:58,560
also consume any promise using the A sync

24
00:00:58,560 --> 00:01:01,149
await feature as seen here. We use the

25
00:01:01,149 --> 00:01:03,820
keyword await before the promise and that

26
00:01:03,820 --> 00:01:05,909
will give us access to the data available

27
00:01:05,909 --> 00:01:08,819
after the A sync action. We can use this

28
00:01:08,819 --> 00:01:11,390
data directly after that wait line just

29
00:01:11,390 --> 00:01:13,189
like this, which is a lot simpler than

30
00:01:13,189 --> 00:01:15,939
callbacks and using dot then as well.

31
00:01:15,939 --> 00:01:18,090
However, to make this away feature work,

32
00:01:18,090 --> 00:01:20,409
you have to wrap your code with a function

33
00:01:20,409 --> 00:01:23,230
labeled with the A sync keyword, and then

34
00:01:23,230 --> 00:01:25,760
call the function to execute the A sync

35
00:01:25,760 --> 00:01:29,640
action. Testing this good Now the same

36
00:01:29,640 --> 00:01:32,400
fetch promise will be consumed twice, once

37
00:01:32,400 --> 00:01:34,590
with the regular dot then Centex and

38
00:01:34,590 --> 00:01:36,879
another time with the new A sync await

39
00:01:36,879 --> 00:01:39,799
Centex the A sync awaits and taxes

40
00:01:39,799 --> 00:01:42,079
definitely easier to read, and it will

41
00:01:42,079 --> 00:01:44,159
make your life especially easier if you

42
00:01:44,159 --> 00:01:46,109
need to work with promises that depend on

43
00:01:46,109 --> 00:01:49,000
each other or promises that need to be within the loop.

