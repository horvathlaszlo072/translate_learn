0
00:00:00,540 --> 00:00:01,919
[Autogenerated] while. No, it comes with

1
00:00:01,919 --> 00:00:04,290
built in modules to work with S T to-be

2
00:00:04,290 --> 00:00:07,349
SDK Bs and even actually to-be to these

3
00:00:07,349 --> 00:00:09,630
modules or low level. And they offer

4
00:00:09,630 --> 00:00:12,109
limited capabilities. For example, there

5
00:00:12,109 --> 00:00:14,919
is no A P I to read body parameters from a

6
00:00:14,919 --> 00:00:17,160
post request. You have to manually parse

7
00:00:17,160 --> 00:00:19,170
the text, which you can do using other

8
00:00:19,170 --> 00:00:21,160
note built in modules. But because of this

9
00:00:21,160 --> 00:00:23,300
fact, a number of web frameworks have

10
00:00:23,300 --> 00:00:25,829
surfaced in the note ecosystem to provide

11
00:00:25,829 --> 00:00:27,989
a richer interface to create and work with

12
00:00:27,989 --> 00:00:30,850
web servers. These frameworks usually rab

13
00:00:30,850 --> 00:00:33,259
the underlying built in power in note and

14
00:00:33,259 --> 00:00:35,479
give you a simpler AP to create more

15
00:00:35,479 --> 00:00:38,740
complicated features in your Web servers.

16
00:00:38,740 --> 00:00:41,070
The most popular of these options is the

17
00:00:41,070 --> 00:00:44,020
Express GS framework. So let's create an

18
00:00:44,020 --> 00:00:47,210
express based Web server example. Let's do

19
00:00:47,210 --> 00:00:50,429
it here under the to express folder inside

20
00:00:50,429 --> 00:00:52,590
the five web directory. I have an index

21
00:00:52,590 --> 00:00:54,130
that he has already there, which is the

22
00:00:54,130 --> 00:00:57,140
starting template often express server.

23
00:00:57,140 --> 00:00:58,560
But the first thing that you need to do

24
00:00:58,560 --> 00:01:00,740
really is to bring express here as a

25
00:01:00,740 --> 00:01:03,049
dependency, and for that we need to use

26
00:01:03,049 --> 00:01:05,280
npm installed and to use npm installed,

27
00:01:05,280 --> 00:01:07,569
you should have packaged adjacent. So the

28
00:01:07,569 --> 00:01:09,319
first step is to create a package that

29
00:01:09,319 --> 00:01:11,760
Jason we can use the npm in IT command

30
00:01:11,760 --> 00:01:13,599
here. And I'm just going to do Dash Dash.

31
00:01:13,599 --> 00:01:15,730
She has to get the default of the npm unit

32
00:01:15,730 --> 00:01:17,790
and this command will create a package

33
00:01:17,790 --> 00:01:20,810
that Jason file for us. Here is package

34
00:01:20,810 --> 00:01:23,069
that Jason here, Once we have packaged

35
00:01:23,069 --> 00:01:24,920
adjacent like that, we bring in the

36
00:01:24,920 --> 00:01:27,640
express dependency using npm Install

37
00:01:27,640 --> 00:01:30,650
Express. This will download express, place

38
00:01:30,650 --> 00:01:32,599
it under the note modules folder. And as

39
00:01:32,599 --> 00:01:34,859
you can see, it documented that we started

40
00:01:34,859 --> 00:01:38,170
depending on express for this project. If

41
00:01:38,170 --> 00:01:40,140
you look under the note modules folder

42
00:01:40,140 --> 00:01:42,109
now, you'll see a lot more dependencies

43
00:01:42,109 --> 00:01:44,260
than Express Express is one of these guys.

44
00:01:44,260 --> 00:01:45,790
But just keep in mind that all of these

45
00:01:45,790 --> 00:01:47,829
packages are now part of your project.

46
00:01:47,829 --> 00:01:51,670
Dependencies to use express UI require

47
00:01:51,670 --> 00:01:54,230
express using the require function. The

48
00:01:54,230 --> 00:01:57,620
express package exports its top level a p

49
00:01:57,620 --> 00:02:00,640
i as a function. So when we captured the

50
00:02:00,640 --> 00:02:03,150
returned AP, I into a local variable here

51
00:02:03,150 --> 00:02:05,640
which is usually named expressed as well,

52
00:02:05,640 --> 00:02:08,500
that express variable in our script is now

53
00:02:08,500 --> 00:02:11,110
a function and This is why, to create an

54
00:02:11,110 --> 00:02:13,069
express server, we just call this

55
00:02:13,069 --> 00:02:16,169
function. The result of calling this

56
00:02:16,169 --> 00:02:18,550
express function is an object that's

57
00:02:18,550 --> 00:02:20,520
usually named server, or you'll see IT

58
00:02:20,520 --> 00:02:23,159
named as app in some examples. Now, to

59
00:02:23,159 --> 00:02:24,729
make the server object, listen to income

60
00:02:24,729 --> 00:02:26,509
and requests from users off this web

61
00:02:26,509 --> 00:02:29,009
server. We call the dot listened method on

62
00:02:29,009 --> 00:02:31,030
it, which is very similar to the method we

63
00:02:31,030 --> 00:02:33,189
use to create a Web server using the built

64
00:02:33,189 --> 00:02:35,310
in HD to-be module. In note, it takes a

65
00:02:35,310 --> 00:02:37,080
callback that gets invoked when the listen

66
00:02:37,080 --> 00:02:39,900
operation is done. Now here's where

67
00:02:39,900 --> 00:02:41,990
express is a bit different than the built

68
00:02:41,990 --> 00:02:44,569
in module. We don't define a single

69
00:02:44,569 --> 00:02:47,219
request. Listener UI define many

70
00:02:47,219 --> 00:02:49,759
listeners. UI actually define a listener.

71
00:02:49,759 --> 00:02:53,120
Per you are URL for every URL and actually

72
00:02:53,120 --> 00:02:55,270
to-be operation that we want our server to

73
00:02:55,270 --> 00:02:57,409
support UI. Define a listener, for

74
00:02:57,409 --> 00:02:59,819
example. Usually the first URL that you

75
00:02:59,819 --> 00:03:02,360
want to support is the route you URL UI is

76
00:03:02,360 --> 00:03:04,340
the following sentence. To do that, we do

77
00:03:04,340 --> 00:03:07,789
server dot get, specify the URL in the

78
00:03:07,789 --> 00:03:09,960
first argument for this get function, so

79
00:03:09,960 --> 00:03:13,060
slash here as a string, and the second

80
00:03:13,060 --> 00:03:15,120
argument is the listener function that

81
00:03:15,120 --> 00:03:17,259
receives both the request and response

82
00:03:17,259 --> 00:03:19,949
object. So I just in lined IT here and

83
00:03:19,949 --> 00:03:22,840
this guy receives request and response

84
00:03:22,840 --> 00:03:25,009
inside the listener function. These

85
00:03:25,009 --> 00:03:27,060
requesting response objects are also a bit

86
00:03:27,060 --> 00:03:29,469
different. For example, instead of using

87
00:03:29,469 --> 00:03:31,780
the dot right method on the response

88
00:03:31,780 --> 00:03:35,439
object, we can use the dot send method.

89
00:03:35,439 --> 00:03:37,669
You can use the dot send method to send

90
00:03:37,669 --> 00:03:39,550
anything to the requester, not just a

91
00:03:39,550 --> 00:03:41,590
string. You confer examples and then

92
00:03:41,590 --> 00:03:43,889
object if you need to. And with that send,

93
00:03:43,889 --> 00:03:46,169
you don't need to invoke the end method

94
00:03:46,169 --> 00:03:48,490
Express will do that automatically. Let me

95
00:03:48,490 --> 00:03:52,039
just send a string here. Hello, Express.

96
00:03:52,039 --> 00:03:54,080
And let's run this code with no _____.

97
00:03:54,080 --> 00:03:56,500
Remember, no _____ index suggests here

98
00:03:56,500 --> 00:03:59,639
should run our express server. So with

99
00:03:59,639 --> 00:04:02,099
this simple code, the server will start

100
00:04:02,099 --> 00:04:04,250
accepting connections and requests. And if

101
00:04:04,250 --> 00:04:06,520
the request matches one of the defined

102
00:04:06,520 --> 00:04:08,699
Urals the listener for that, your URL will

103
00:04:08,699 --> 00:04:11,199
be invoked. So when we go to the root in

104
00:04:11,199 --> 00:04:12,919
point in the browser using the port UI

105
00:04:12,919 --> 00:04:15,189
passed in the listen function, you'll get

106
00:04:15,189 --> 00:04:17,040
the string UI defined in the dots and

107
00:04:17,040 --> 00:04:19,819
method. However, if we go to a different

108
00:04:19,819 --> 00:04:23,290
in point se slash about. For example,

109
00:04:23,290 --> 00:04:26,939
Instead of slash, the server will not have

110
00:04:26,939 --> 00:04:28,939
a listener. For that, you're just getting

111
00:04:28,939 --> 00:04:31,339
a four or four here to define a listener.

112
00:04:31,339 --> 00:04:34,370
For the slash about UI, just add one more

113
00:04:34,370 --> 00:04:37,310
get method here and define it for slash

114
00:04:37,310 --> 00:04:39,680
about instead of slash and let's respond

115
00:04:39,680 --> 00:04:42,509
with a different message here. No _____

116
00:04:42,509 --> 00:04:44,709
automatically restarted. Note. So let's

117
00:04:44,709 --> 00:04:47,589
test both endpoint. This slash about is

118
00:04:47,589 --> 00:04:49,779
going to respond with its message, and

119
00:04:49,779 --> 00:04:52,019
this lash is going to continue to respond

120
00:04:52,019 --> 00:04:54,610
with the original message. So, as you can

121
00:04:54,610 --> 00:04:56,810
see, Express provides a more pleasant

122
00:04:56,810 --> 00:04:59,170
Centex to implement more advanced features

123
00:04:59,170 --> 00:05:01,540
in our Web servers. Without express, we

124
00:05:01,540 --> 00:05:03,819
would have to do custom logic to implement

125
00:05:03,819 --> 00:05:05,810
the same capabilities using just the

126
00:05:05,810 --> 00:05:08,259
native SDK to-be module. And of course,

127
00:05:08,259 --> 00:05:09,990
there are other frameworks that you can

128
00:05:09,990 --> 00:05:12,269
use beside express. I'll mention three of

129
00:05:12,269 --> 00:05:14,709
them. Here There is code Digest, which

130
00:05:14,709 --> 00:05:17,100
focuses on more modern features of the

131
00:05:17,100 --> 00:05:18,620
JavaScript language and the Neutering

132
00:05:18,620 --> 00:05:21,100
time. There is sales judges, which is

133
00:05:21,100 --> 00:05:24,370
inspired by rails, Really So, um or

134
00:05:24,370 --> 00:05:26,310
featured web framework that provide

135
00:05:26,310 --> 00:05:29,550
working with modules and auto generate AP

136
00:05:29,550 --> 00:05:32,639
ice and many other cool features. And then

137
00:05:32,639 --> 00:05:35,310
there is meteor, which offers UM, or

138
00:05:35,310 --> 00:05:37,949
integrated way to build web applications

139
00:05:37,949 --> 00:05:40,589
in general. And these are just some of the

140
00:05:40,589 --> 00:05:42,829
popular options. There are actually

141
00:05:42,829 --> 00:05:45,089
hundreds of other options that you can use

142
00:05:45,089 --> 00:05:48,529
to build web servers with node Js, and you

143
00:05:48,529 --> 00:05:53,000
get to pick the best one based on what you need.

