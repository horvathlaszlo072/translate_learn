0
00:00:01,040 --> 00:00:02,810
[Autogenerated] npm uses semantic

1
00:00:02,810 --> 00:00:05,589
versioning or some ver for short when it's

2
00:00:05,589 --> 00:00:08,789
time to update packages. Every package has

3
00:00:08,789 --> 00:00:10,769
a version. This is one of the required

4
00:00:10,769 --> 00:00:13,339
information about a package. That version

5
00:00:13,339 --> 00:00:15,589
in npm is written with the same ver

6
00:00:15,589 --> 00:00:19,089
format. The somber string is basically a

7
00:00:19,089 --> 00:00:21,670
simple contract between a package author

8
00:00:21,670 --> 00:00:24,550
and the users of that package. When that

9
00:00:24,550 --> 00:00:26,230
number gets pumped up to release a new

10
00:00:26,230 --> 00:00:28,500
version of the package, December

11
00:00:28,500 --> 00:00:30,800
communicates how big of a change to the

12
00:00:30,800 --> 00:00:34,140
package itself. Will this new release be

13
00:00:34,140 --> 00:00:36,020
The first number, which is called the

14
00:00:36,020 --> 00:00:38,530
major number, is used to communicate that

15
00:00:38,530 --> 00:00:41,439
breaking changes happened in the release.

16
00:00:41,439 --> 00:00:43,560
Those are changes that will require users

17
00:00:43,560 --> 00:00:46,060
to change their own code to make it work

18
00:00:46,060 --> 00:00:49,170
with the new release. The second number,

19
00:00:49,170 --> 00:00:51,549
which is called the Miner number, is used

20
00:00:51,549 --> 00:00:53,640
to communicate that new features were

21
00:00:53,640 --> 00:00:56,420
added to this release, but nothing major.

22
00:00:56,420 --> 00:00:58,359
All the changes are still backward

23
00:00:58,359 --> 00:01:01,159
compatible, and it's safe for users to

24
00:01:01,159 --> 00:01:03,340
install these minor releases, and they

25
00:01:03,340 --> 00:01:05,719
will not require the users to change their

26
00:01:05,719 --> 00:01:08,739
code to make it work with these releases.

27
00:01:08,739 --> 00:01:11,060
The last number, which is called the Patch

28
00:01:11,060 --> 00:01:14,189
number, is used to communicate that the

29
00:01:14,189 --> 00:01:16,480
release on Lee contained bug fixes and

30
00:01:16,480 --> 00:01:19,510
security fixes, no new features and no

31
00:01:19,510 --> 00:01:22,640
breaking changes. You often see a few

32
00:01:22,640 --> 00:01:24,760
different special characters before the

33
00:01:24,760 --> 00:01:26,239
versions. Strings in the package that

34
00:01:26,239 --> 00:01:28,659
Jason file these special characters

35
00:01:28,659 --> 00:01:31,609
represent a range of acceptable versions

36
00:01:31,609 --> 00:01:34,269
on are put to use when you instruct npm to

37
00:01:34,269 --> 00:01:37,359
update your dependency tree. For example,

38
00:01:37,359 --> 00:01:40,069
the told a character means that an update

39
00:01:40,069 --> 00:01:43,859
can install the most recent patch version.

40
00:01:43,859 --> 00:01:47,140
Remember Patches, the third number for the

41
00:01:47,140 --> 00:01:48,930
version of string on the screen here. It

42
00:01:48,930 --> 00:01:51,590
means npm can install any version that

43
00:01:51,590 --> 00:01:55,519
starts with 1.2 and is greater or equal to

44
00:01:55,519 --> 00:01:59,390
1.2 point three. So a 1.2 point four

45
00:01:59,390 --> 00:02:02,079
version would be okay, and so would 1.2

46
00:02:02,079 --> 00:02:04,310
point five or anything in that class.

47
00:02:04,310 --> 00:02:07,890
However, at 1.3 point zero version will

48
00:02:07,890 --> 00:02:10,919
not be used. So basically, this version

49
00:02:10,919 --> 00:02:13,509
range string is equivalent to one point to

50
00:02:13,509 --> 00:02:16,400
point X, where X is greater or equal to

51
00:02:16,400 --> 00:02:20,259
three. On the other hand, a caret-symbol

52
00:02:20,259 --> 00:02:22,659
in front of the somber string is a more

53
00:02:22,659 --> 00:02:25,240
relaxed constraint. It will get the

54
00:02:25,240 --> 00:02:27,449
package updated to the most recent minor

55
00:02:27,449 --> 00:02:29,479
version. Remember, Minor is the middle

56
00:02:29,479 --> 00:02:32,400
number. For example, carry IT. 1.2 point

57
00:02:32,400 --> 00:02:35,240
three here will match any one point x

58
00:02:35,240 --> 00:02:38,199
point. Why, where X is greater than or

59
00:02:38,199 --> 00:02:41,520
equal to two and why can be anything so

60
00:02:41,520 --> 00:02:45,610
you might get a 1.30 or 1.4 point five,

61
00:02:45,610 --> 00:02:48,969
for example. But npm will not update all

62
00:02:48,969 --> 00:02:52,490
the way to 2.0. I'll admit this might be

63
00:02:52,490 --> 00:02:54,770
confusing at first. Just remember that

64
00:02:54,770 --> 00:02:58,240
Kelda is for safe patch level updates,

65
00:02:58,240 --> 00:03:01,430
whereas caret-symbol more relaxed minor

66
00:03:01,430 --> 00:03:05,319
level update. Npm has a site that may make

67
00:03:05,319 --> 00:03:07,099
understanding this a bit easier. It's

68
00:03:07,099 --> 00:03:09,740
hosted here at some vered npm jess dot

69
00:03:09,740 --> 00:03:12,150
com. You can pick a package to see all of

70
00:03:12,150 --> 00:03:14,750
its available versions, then enter Arrange

71
00:03:14,750 --> 00:03:17,740
string to test for load ash, for example.

72
00:03:17,740 --> 00:03:21,479
IT alga 4 16 3 matches all patch level

73
00:03:21,479 --> 00:03:24,569
updates that start with 4 16 and has the

74
00:03:24,569 --> 00:03:26,469
patch number greater than or equal to

75
00:03:26,469 --> 00:03:30,539
three, while caret-symbol three will match

76
00:03:30,539 --> 00:03:32,449
what the tell diversion matched. But it

77
00:03:32,449 --> 00:03:36,740
will also include all the 4 17 versions.

78
00:03:36,740 --> 00:03:39,379
You might find it easier to use the X

79
00:03:39,379 --> 00:03:41,810
notation, for example, your version range

80
00:03:41,810 --> 00:03:46,389
string can simply be 4 16 x or even for

81
00:03:46,389 --> 00:03:50,229
the X, the tilde and carrot or helpful in

82
00:03:50,229 --> 00:03:52,819
communicating the exact version arranged

83
00:03:52,819 --> 00:03:56,300
started with I think some ver is great and

84
00:03:56,300 --> 00:03:58,460
responsible. Npm developers should respect

85
00:03:58,460 --> 00:04:00,460
IT when they release new versions of their

86
00:04:00,460 --> 00:04:02,729
code. But it's good to treat what it

87
00:04:02,729 --> 00:04:05,030
communicates as a promise rather than a

88
00:04:05,030 --> 00:04:07,810
guarantee, because even a patch release

89
00:04:07,810 --> 00:04:10,199
might leak breaking changes through its

90
00:04:10,199 --> 00:04:12,620
own dependencies. A minor version, for

91
00:04:12,620 --> 00:04:15,340
example, might introduce new elements that

92
00:04:15,340 --> 00:04:17,990
conflicts with elements you previously

93
00:04:17,990 --> 00:04:21,019
thought are okay to use testing. Your code

94
00:04:21,019 --> 00:04:27,000
is the only way to provide some form of guarantee that it's not broken.

