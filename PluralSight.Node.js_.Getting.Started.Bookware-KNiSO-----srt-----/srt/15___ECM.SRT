0
00:00:01,340 --> 00:00:02,859
[Autogenerated] JavaScript is a very

1
00:00:02,859 --> 00:00:05,400
different language than it used to be just

2
00:00:05,400 --> 00:00:08,660
a few years ago. IT JavaScript, which is

3
00:00:08,660 --> 00:00:11,279
the official specification that JavaScript

4
00:00:11,279 --> 00:00:14,679
confirms to has improved a lot in the past

5
00:00:14,679 --> 00:00:17,690
few years after a rather long period of no

6
00:00:17,690 --> 00:00:21,000
updates to the language at all. Today, the

7
00:00:21,000 --> 00:00:23,079
JavaScript Technical Committee, which is

8
00:00:23,079 --> 00:00:27,030
known as T C 39 makes yearly releases of

9
00:00:27,030 --> 00:00:29,899
JavaScript and JavaScript engines like V

10
00:00:29,899 --> 00:00:32,479
eight, shortly followed by implementing

11
00:00:32,479 --> 00:00:34,770
the new features introduced in the EC

12
00:00:34,770 --> 00:00:37,929
JavaScript releases. This has started with

13
00:00:37,929 --> 00:00:40,909
JavaScript 2015 or its other commonly

14
00:00:40,909 --> 00:00:44,530
known name s six. Since then, we've had

15
00:00:44,530 --> 00:00:47,619
yearly releases named ES plus the current

16
00:00:47,619 --> 00:00:50,299
year. Some of these releases were big and

17
00:00:50,299 --> 00:00:52,240
others were very small. But the language

18
00:00:52,240 --> 00:00:54,939
now has a continuous updates cycle that

19
00:00:54,939 --> 00:00:57,740
drives mawr innovative features and phase

20
00:00:57,740 --> 00:01:00,039
out the famous problems JavaScript had

21
00:01:00,039 --> 00:01:02,460
over the years. Anybody can propose

22
00:01:02,460 --> 00:01:04,230
features that they think should belong to

23
00:01:04,230 --> 00:01:07,340
the jobs of language. The T C 39 committee

24
00:01:07,340 --> 00:01:10,010
has a five stage process to filter and

25
00:01:10,010 --> 00:01:12,349
finalize the features that are considered

26
00:01:12,349 --> 00:01:15,640
for the language. A feature starts at

27
00:01:15,640 --> 00:01:18,219
stage zero, which is when anyone proposes

28
00:01:18,219 --> 00:01:19,959
anything to the committee. And if the

29
00:01:19,959 --> 00:01:22,109
proposed feature has a clear problem and a

30
00:01:22,109 --> 00:01:25,109
clear case for its need and someone is

31
00:01:25,109 --> 00:01:27,120
willing to back it up through the process,

32
00:01:27,120 --> 00:01:31,030
it gets labeled as Stage one. Once the

33
00:01:31,030 --> 00:01:32,900
proposed feature has an initial spec

34
00:01:32,900 --> 00:01:35,920
document, it gets labeled as Stage two

35
00:01:35,920 --> 00:01:38,069
draft. At this point, there is a strong

36
00:01:38,069 --> 00:01:40,010
chance the feature will be part of the

37
00:01:40,010 --> 00:01:42,849
language when the spec of the feature is

38
00:01:42,849 --> 00:01:45,879
finalized and the designated reviewers of

39
00:01:45,879 --> 00:01:48,760
the future signed off on it. The proposal

40
00:01:48,760 --> 00:01:52,060
is labeled Stage three candidate. At this

41
00:01:52,060 --> 00:01:54,239
stage, the feature is queued for more

42
00:01:54,239 --> 00:01:56,409
tests, and the committee will accept this

43
00:01:56,409 --> 00:01:58,730
back text into its main specifications.

44
00:01:58,730 --> 00:02:00,829
Repository, which gets the feature to

45
00:02:00,829 --> 00:02:03,340
Stage four Finished and that feature will

46
00:02:03,340 --> 00:02:05,730
be included in the next year. Lee Release

47
00:02:05,730 --> 00:02:09,310
of Atma Script In No, Jess, you only have

48
00:02:09,310 --> 00:02:11,439
access to features that are finished and

49
00:02:11,439 --> 00:02:14,120
are already part of the language. However,

50
00:02:14,120 --> 00:02:16,870
V eight often has harmony flags for you to

51
00:02:16,870 --> 00:02:19,240
experiment with candidate and even draft

52
00:02:19,240 --> 00:02:22,009
features. Sometimes you can also use the

53
00:02:22,009 --> 00:02:24,629
babble compiler to write many of the in

54
00:02:24,629 --> 00:02:26,889
progress features in JavaScript and have

55
00:02:26,889 --> 00:02:29,060
babble compile it to the good old

56
00:02:29,060 --> 00:02:31,270
supported JavaScript before you take your

57
00:02:31,270 --> 00:02:34,289
code to production. Babel is popular on

58
00:02:34,289 --> 00:02:36,099
the front end because many browsers air

59
00:02:36,099 --> 00:02:38,710
usually slow to add support for all the

60
00:02:38,710 --> 00:02:40,719
new features in the language, including

61
00:02:40,719 --> 00:02:43,370
the finalized ones. And Babble offers an

62
00:02:43,370 --> 00:02:45,750
escape hatch for developers to use the

63
00:02:45,750 --> 00:02:47,979
latest and greatest without risking their

64
00:02:47,979 --> 00:02:50,050
code not being compatible with older

65
00:02:50,050 --> 00:02:52,979
browsers. In this course, I'll only use

66
00:02:52,979 --> 00:02:55,020
features that are natively available in

67
00:02:55,020 --> 00:02:57,150
Nadia's, including many of the modern

68
00:02:57,150 --> 00:02:59,099
features that started becoming available

69
00:02:59,099 --> 00:03:02,590
since 2015. In the next, few videos will

70
00:03:02,590 --> 00:03:07,000
go over some of these features and learn the value they bring to the language.

