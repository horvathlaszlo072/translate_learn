1
00:00:00.06 --> 00:00:02.01
- [Instructor] Okay now let's finish up

2
00:00:02.01 --> 00:00:04.03
coding the back end rest API

3
00:00:04.03 --> 00:00:06.05
by implementing a persistence layer

4
00:00:06.05 --> 00:00:11.01
to interact with our
in memory, H2 database.

5
00:00:11.01 --> 00:00:17.04
We added the runtime
dependency, com.h2database:h2

6
00:00:17.04 --> 00:00:20.02
during booth trapping our project.

7
00:00:20.02 --> 00:00:22.02
This dependency which you could find

8
00:00:22.02 --> 00:00:24.00
in the build.gradle file

9
00:00:24.00 --> 00:00:27.00
will spin up an in memory H2 database

10
00:00:27.00 --> 00:00:31.01
when we start up our Spring
Boot app using the gradle task

11
00:00:31.01 --> 00:00:32.09
boot run.

12
00:00:32.09 --> 00:00:35.07
Let's create a new class
in our config package

13
00:00:35.07 --> 00:00:37.07
called database config.

14
00:00:37.07 --> 00:00:40.00
Let's add two annotations

15
00:00:40.00 --> 00:00:44.00
the first being enable JPA repositories.

16
00:00:44.00 --> 00:00:48.05
The enable JPA repositories
annotation enables scanning

17
00:00:48.05 --> 00:00:51.03
for spring data repositories.

18
00:00:51.03 --> 00:00:55.00
A JPA repository is an interface uni find

19
00:00:55.00 --> 00:00:58.00
that extends CRUD repository.

20
00:00:58.00 --> 00:01:02.06
A CRUD repository provides
create, read, update,

21
00:01:02.06 --> 00:01:06.01
and delete functions for a defined entity.

22
00:01:06.01 --> 00:01:08.07
An entity is an annotated Java class

23
00:01:08.07 --> 00:01:13.01
which has an object relational
mapping to a database table.

24
00:01:13.01 --> 00:01:15.06
The enable transaction
management annotation

25
00:01:15.06 --> 00:01:19.04
sets up annotation driven
transaction management

26
00:01:19.04 --> 00:01:21.08
such as the transaction interceptor

27
00:01:21.08 --> 00:01:25.06
or aspect J based advice.

28
00:01:25.06 --> 00:01:29.00
Now, let's create the
database config class.

29
00:01:29.00 --> 00:01:33.02
Right click on config, new, class.

30
00:01:33.02 --> 00:01:36.01
Let's name it database config.

31
00:01:36.01 --> 00:01:41.04
Let's add the enable JPA
repository's annotation

32
00:01:41.04 --> 00:01:44.05
then let's import that annotation.

33
00:01:44.05 --> 00:01:49.07
Let's pass in the location
of our repository.

34
00:01:49.07 --> 00:01:54.02
Next let's add the enable
transaction management annotation.

35
00:01:54.02 --> 00:01:56.09
Then let's import that annotation.

36
00:01:56.09 --> 00:01:59.01
Okay then let's save.

37
00:01:59.01 --> 00:02:02.04
Next let's create a new
class, conversion config,

38
00:02:02.04 --> 00:02:04.03
in our config package.

39
00:02:04.03 --> 00:02:07.05
Conversion config will register converters

40
00:02:07.05 --> 00:02:11.03
that will allow us to convert
request or response objects

41
00:02:11.03 --> 00:02:14.04
into entities and vice versa.

42
00:02:14.04 --> 00:02:18.07
Okay now let's create the
conversion config class.

43
00:02:18.07 --> 00:02:23.09
Let's right click on config,
new, and then new class.

44
00:02:23.09 --> 00:02:25.06
And create.

45
00:02:25.06 --> 00:02:31.00
Let's go to API config, copy
the configuration annotation,

46
00:02:31.00 --> 00:02:34.08
and then add it to
conversion config, then save.

47
00:02:34.08 --> 00:02:37.08
Let's create a method, get converters,

48
00:02:37.08 --> 00:02:41.07
that will return a set
of converter objects.

49
00:02:41.07 --> 00:02:50.03
Let's create a new hash set of converters.

50
00:02:50.03 --> 00:02:53.03
Okay let's import set.

51
00:02:53.03 --> 00:02:56.07
Next, let's import hash set.

52
00:02:56.07 --> 00:03:02.09
Next, let's import
org.springframework.core.converter.

53
00:03:02.09 --> 00:03:05.09
Next, let's return that set.

54
00:03:05.09 --> 00:03:13.00
Next, let's add a public method
called conversion service.

55
00:03:13.00 --> 00:03:22.09
Let's create a new conversion
service factory bean.

56
00:03:22.09 --> 00:03:27.07
Then let's import conversion
service factory bean.

57
00:03:27.07 --> 00:03:33.01
Next, let's set the convertors
by calling get converters.

58
00:03:33.01 --> 00:03:36.08
Next, let's call after
property set on that bean.

59
00:03:36.08 --> 00:03:41.04
Finally, let's return bean.get object.

60
00:03:41.04 --> 00:03:45.09
Finally, let's import the
spring conversion service

61
00:03:45.09 --> 00:03:46.08
and save.

62
00:03:46.08 --> 00:03:52.02
Let's open up our application
properties in resources.

63
00:03:52.02 --> 00:03:57.08
Let's add the property
spring.h2.console.enabled

64
00:03:57.08 --> 00:03:59.01
equals true.

65
00:03:59.01 --> 00:04:04.02
Next let's set the
console path to /console.

66
00:04:04.02 --> 00:04:09.08
Let's set the platform to h2,
our in memory h2 database.

67
00:04:09.08 --> 00:04:13.06
Finally, let's set our JDBC URL

68
00:04:13.06 --> 00:04:16.09
to our h2 in memory database.

69
00:04:16.09 --> 00:04:18.02
Then let's save.

70
00:04:18.02 --> 00:04:20.03
Next, let's click on the root package

71
00:04:20.03 --> 00:04:27.06
and create a new package
called repository.

72
00:04:27.06 --> 00:04:29.03
Within repository, let's create

73
00:04:29.03 --> 00:04:34.03
a new interface room repository.

74
00:04:34.03 --> 00:04:38.07
Room repository will
extend a CRUD repository.

75
00:04:38.07 --> 00:04:42.00
This CRUD repository will
take in a room entity

76
00:04:42.00 --> 00:04:44.08
and a long variable.

77
00:04:44.08 --> 00:04:47.07
Room entity is an entity we will create

78
00:04:47.07 --> 00:04:52.04
to define a room object in our table.

79
00:04:52.04 --> 00:04:55.04
Next let's crate a method find by ID.

80
00:04:55.04 --> 00:04:59.07
This will return a list of
rooms from our database.

81
00:04:59.07 --> 00:05:03.06
Then let's pass in a
long ID as a parameter.

82
00:05:03.06 --> 00:05:07.01
Next up let's define that room entity.

83
00:05:07.01 --> 00:05:11.07
First, let's create a new
package called entity.

84
00:05:11.07 --> 00:05:15.08
Entity will be a new
package in the base package.

85
00:05:15.08 --> 00:05:18.04
Within entity, let's right
click on that package

86
00:05:18.04 --> 00:05:20.06
and create a new class.

87
00:05:20.06 --> 00:05:24.02
Let's name it room entity.

88
00:05:24.02 --> 00:05:27.01
Let's add the annotation entity.

89
00:05:27.01 --> 00:05:33.03
We want to import the
Javax.persistence annotation.

90
00:05:33.03 --> 00:05:35.09
Next let's add a table annotation,

91
00:05:35.09 --> 00:05:40.02
passing in the name of
our table which is room.

92
00:05:40.02 --> 00:05:43.09
Then let's import that table annotation

93
00:05:43.09 --> 00:05:47.01
from Java X persistence.

94
00:05:47.01 --> 00:05:49.00
Now let's add some fields.

95
00:05:49.00 --> 00:05:52.07
First let's create an auto generated ID.

96
00:05:52.07 --> 00:05:55.00
This ID will be auto generated

97
00:05:55.00 --> 00:05:57.02
anytime you insert a new record.

98
00:05:57.02 --> 00:06:01.04
Let's add an ID annotation.

99
00:06:01.04 --> 00:06:03.00
Let's import it.

100
00:06:03.00 --> 00:06:06.05
Then let's add a
generated value annotation

101
00:06:06.05 --> 00:06:10.01
where the strategy is auto.

102
00:06:10.01 --> 00:06:14.08
Let's import the Java X
generated value annotation.

103
00:06:14.08 --> 00:06:19.02
Then let's also import that
generated type annotation.

104
00:06:19.02 --> 00:06:22.06
Okay we've set the
generation type to auto.

105
00:06:22.06 --> 00:06:25.09
Next let's add a field called room number

106
00:06:25.09 --> 00:06:27.08
of the type integer.

107
00:06:27.08 --> 00:06:31.05
Let's add a not null
annotation to room number.

108
00:06:31.05 --> 00:06:34.08
This will ensure that
room number is populated

109
00:06:34.08 --> 00:06:40.03
anytime you add a new
room record to this table.

110
00:06:40.03 --> 00:06:43.00
Okay let's import not null.

111
00:06:43.00 --> 00:06:45.09
Then let's add another field called price

112
00:06:45.09 --> 00:06:48.01
of the type string.

113
00:06:48.01 --> 00:06:51.02
Let's also add that not
null annotation here.

114
00:06:51.02 --> 00:06:54.05
Let's use the keyboard
shortcut command alt s

115
00:06:54.05 --> 00:06:56.03
to bring up the source menu

116
00:06:56.03 --> 00:06:59.03
and let's generate some
getters and setters.

117
00:06:59.03 --> 00:07:04.03
Select price and room number then okay.

118
00:07:04.03 --> 00:07:07.00
Now let's add a constructor.

119
00:07:07.00 --> 00:07:12.07
Open up that source menu and
click on generate constructor.

120
00:07:12.07 --> 00:07:15.03
Let's pass in room number and price.

121
00:07:15.03 --> 00:07:17.09
Okay and then one more thing.

122
00:07:17.09 --> 00:07:21.02
Let's add a parameter list constructor.

123
00:07:21.02 --> 00:07:24.07
Click on deselect all, and okay.

124
00:07:24.07 --> 00:07:27.04
Now let's go back to room repository

125
00:07:27.04 --> 00:07:31.02
and import that room
entity we just created.

126
00:07:31.02 --> 00:07:32.06
Looks like we have a typo.

127
00:07:32.06 --> 00:07:36.03
We left off an s on extends.

128
00:07:36.03 --> 00:07:42.04
Lets import that CRUD
repository from spring.

129
00:07:42.04 --> 00:07:50.06
Let's ensure we don't have a typo here.

130
00:07:50.06 --> 00:07:54.00
Okay let's import that room
entity that we just created

131
00:07:54.00 --> 00:07:58.05
and finally let's import java.util.list.

132
00:07:58.05 --> 00:08:00.08
Okay let's save all those changes.

133
00:08:00.08 --> 00:08:05.02
Next we're going to create a
class called h2 boot strap.

134
00:08:05.02 --> 00:08:09.04
This class will pre-populate
some data in the room table

135
00:08:09.04 --> 00:08:11.09
so that we have data to work with.

136
00:08:11.09 --> 00:08:16.04
Let's right click on the base
package, go to new, new class.

137
00:08:16.04 --> 00:08:23.03
For the name enter in h2 boot strap.

138
00:08:23.03 --> 00:08:25.09
Let's implement command line runner.

139
00:08:25.09 --> 00:08:28.09
Let's go ahead and import
command line runner.

140
00:08:28.09 --> 00:08:31.05
Now since we implemented that interface

141
00:08:31.05 --> 00:08:35.04
we need to implement
the method run though.

142
00:08:35.04 --> 00:08:36.09
Let's click on that error

143
00:08:36.09 --> 00:08:40.06
and select add unimplemented method.

144
00:08:40.06 --> 00:08:44.01
Okay Eclipse generated the stub for us.

145
00:08:44.01 --> 00:08:46.06
Now let's add in some code.

146
00:08:46.06 --> 00:08:51.08
First let's auto wire
a room repository bean.

147
00:08:51.08 --> 00:08:54.08
Let's go ahead and import
that room repository

148
00:08:54.08 --> 00:08:58.00
and then add an auto
wired annotation to it.

149
00:08:58.00 --> 00:09:02.07
Then let's import that
auto wired annotation.

150
00:09:02.07 --> 00:09:04.06
Now let's create some data.

151
00:09:04.06 --> 00:09:07.07
Using that auto wired room repository,

152
00:09:07.07 --> 00:09:10.04
let's call the save method.

153
00:09:10.04 --> 00:09:12.09
Let's create a room entity

154
00:09:12.09 --> 00:09:16.06
and pass in a room number and a price.

155
00:09:16.06 --> 00:09:20.00
Then let's import that room entity.

156
00:09:20.00 --> 00:09:23.06
Okay let's add a couple more rows of data.

157
00:09:23.06 --> 00:09:26.01
I'm going to copy that save statement

158
00:09:26.01 --> 00:09:28.09
and paste it two more times.

159
00:09:28.09 --> 00:09:32.06
Then I'm going to update that room number

160
00:09:32.06 --> 00:09:35.00
and update the price.

161
00:09:35.00 --> 00:09:39.03
Now we want to verify all
that data got saved correctly.

162
00:09:39.03 --> 00:09:41.03
Let's use that room repository

163
00:09:41.03 --> 00:09:45.03
to select all the data
currently in that table.

164
00:09:45.03 --> 00:09:49.01
Let's use auto complete
to select room repository.

165
00:09:49.01 --> 00:09:53.07
Then let's use the find all method.

166
00:09:53.07 --> 00:09:57.00
If you hold down command
and click on find all

167
00:09:57.00 --> 00:10:02.01
you could find out that it
returns an iterable object.

168
00:10:02.01 --> 00:10:05.04
So let's right click and
copy on that iterable object,

169
00:10:05.04 --> 00:10:08.06
head back to h2 boot strap,

170
00:10:08.06 --> 00:10:12.08
pass in the generic room entity

171
00:10:12.08 --> 00:10:15.02
and then let's name it ITR.

172
00:10:15.02 --> 00:10:18.02
next let's loop through
that interval object

173
00:10:18.02 --> 00:10:20.07
and print out all the rooms.

174
00:10:20.07 --> 00:10:27.07
Let's create a for loop
of room entities from ITR.

175
00:10:27.07 --> 00:10:30.01
For each iteration, let's call

176
00:10:30.01 --> 00:10:33.06
a system.out.printline statement

177
00:10:33.06 --> 00:10:37.09
and then let's call the
get room number method.

178
00:10:37.09 --> 00:10:41.00
So we should print out the
room number for each entry

179
00:10:41.00 --> 00:10:42.06
in the table.

180
00:10:42.06 --> 00:10:45.02
Let's save all our changes.

181
00:10:45.02 --> 00:10:50.02
Let's head to a terminal and
run the gradle task boot run

182
00:10:50.02 --> 00:10:54.08
using the gradle wrapper.

183
00:10:54.08 --> 00:10:58.03
Let's head back to h2 boot strap.

184
00:10:58.03 --> 00:11:00.07
Let's add a diagnostic print

185
00:11:00.07 --> 00:11:05.06
so that we know when these
items are being saved.

186
00:11:05.06 --> 00:11:07.05
Okay we're going to print out

187
00:11:07.05 --> 00:11:09.06
the message boot strapping data

188
00:11:09.06 --> 00:11:12.02
when we begin saving data.

189
00:11:12.02 --> 00:11:13.08
Let's go ahead and save

190
00:11:13.08 --> 00:11:19.00
then let's copy that printline statement

191
00:11:19.00 --> 00:11:21.08
and paste it right above our for loop

192
00:11:21.08 --> 00:11:27.01
and then update the message
to printing out data.

193
00:11:27.01 --> 00:11:28.07
Then let's save.

194
00:11:28.07 --> 00:11:32.04
This time let's do a clean and build

195
00:11:32.04 --> 00:11:36.07
to clean out our cache
using the gradle wrapper.

196
00:11:36.07 --> 00:11:43.00
Okay now let's run a boot run gradle task.

197
00:11:43.00 --> 00:11:47.00
Let's search for this diagnostic
message that we print out.

198
00:11:47.00 --> 00:11:49.04
Using the keyboard shortcut control F

199
00:11:49.04 --> 00:11:55.00
let's paste in that
message and search for it.

200
00:11:55.00 --> 00:11:58.05
It looks like our command line
runner is not being executed

201
00:11:58.05 --> 00:12:00.03
on start up.

202
00:12:00.03 --> 00:12:03.00
Let's make sure all our changes are saved.

203
00:12:03.00 --> 00:12:07.03
Let's try running our application
within Eclipse itself.

204
00:12:07.03 --> 00:12:15.00
Right click on the project
route, run as spring boot app.

205
00:12:15.00 --> 00:12:17.08
It looks like we left off
a component annotation

206
00:12:17.08 --> 00:12:19.09
on our h2 boot strap.

207
00:12:19.09 --> 00:12:23.06
A component annotation
makes a class a candidate

208
00:12:23.06 --> 00:12:27.02
to be added to the spring
application context.

209
00:12:27.02 --> 00:12:29.09
The component scan annotation will search

210
00:12:29.09 --> 00:12:34.03
for classes that have
that component annotation.

211
00:12:34.03 --> 00:12:38.01
Let's go ahead and add
a component annotation

212
00:12:38.01 --> 00:12:45.01
and then import it, save, and
then let's try running again.

213
00:12:45.01 --> 00:12:49.01
Okay if we scroll up in the console

214
00:12:49.01 --> 00:12:53.05
we can see our diagnostic
print boot strapping data

215
00:12:53.05 --> 00:12:56.09
and then printing out data here.

216
00:12:56.09 --> 00:13:00.03
You could see the for loop
looped through each entry,

217
00:13:00.03 --> 00:13:04.05
saved in the database, and
printed out the room number.

218
00:13:04.05 --> 00:13:06.02
It looks like we're saving data

219
00:13:06.02 --> 00:13:08.06
and retrieving data correctly now.

