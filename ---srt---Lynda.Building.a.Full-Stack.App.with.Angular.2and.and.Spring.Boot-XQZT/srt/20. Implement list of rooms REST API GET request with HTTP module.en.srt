1
00:00:00.07 --> 00:00:02.02
- [Narrator] Now that
we have our end points

2
00:00:02.02 --> 00:00:03.09
hooked into our data layer, let's get our

3
00:00:03.09 --> 00:00:07.06
Angular JS2 hooked up into our API.

4
00:00:07.06 --> 00:00:10.08
We will be using HTTP module to execute

5
00:00:10.08 --> 00:00:14.00
our rest API calls.

6
00:00:14.00 --> 00:00:18.03
We will receive what is called
a observable in response.

7
00:00:18.03 --> 00:00:22.06
An observable is a new type
of asynchronous data stream

8
00:00:22.06 --> 00:00:24.08
in Angular JS2.

9
00:00:24.08 --> 00:00:31.00
We will be using RxJS, a
reactive library for JavaScript.

10
00:00:31.00 --> 00:00:34.00
It is a third party
library that is endorsed

11
00:00:34.00 --> 00:00:37.03
by Angular JS2 as a framework.

12
00:00:37.03 --> 00:00:40.05
An observable is a
asynchronous stream of data

13
00:00:40.05 --> 00:00:43.03
that is emitted over time.

14
00:00:43.03 --> 00:00:46.00
This leads to a better user experience

15
00:00:46.00 --> 00:00:50.01
since you can process
data as it streams in.

16
00:00:50.01 --> 00:00:53.05
First, let's add a cross origin annotation

17
00:00:53.05 --> 00:00:55.09
to our reservation resource.

18
00:00:55.09 --> 00:01:00.04
Since our Angular app is
running on local host 4200

19
00:01:00.04 --> 00:01:04.06
and our API is running on local host 8080,

20
00:01:04.06 --> 00:01:07.04
they are considered different origins.

21
00:01:07.04 --> 00:01:09.08
Normally, for security
reasons, you would want

22
00:01:09.08 --> 00:01:13.02
to maintain a same origin policy,

23
00:01:13.02 --> 00:01:15.07
however during local
development we will want

24
00:01:15.07 --> 00:01:18.05
to open up this restriction so that our

25
00:01:18.05 --> 00:01:23.09
Angular JS2 app can
communicate with our API.

26
00:01:23.09 --> 00:01:28.09
So, let's add a cross origin annotation

27
00:01:28.09 --> 00:01:31.08
which is imported from spring.

28
00:01:31.08 --> 00:01:36.04
Let's save and restart our API.

29
00:01:36.04 --> 00:01:39.00
Okay, we're restarted.

30
00:01:39.00 --> 00:01:43.00
Let's open up app.component.ts.

31
00:01:43.00 --> 00:01:45.05
Let's import the dependencies we need

32
00:01:45.05 --> 00:01:49.04
from the HTTP module and also

33
00:01:49.04 --> 00:01:52.02
from the reactive JS module.

34
00:01:52.02 --> 00:02:00.09
Let's import HTTP and response.

35
00:02:00.09 --> 00:02:04.01
If you look in app.module.ts you can see

36
00:02:04.01 --> 00:02:08.09
that we already have that import in place.

37
00:02:08.09 --> 00:02:13.09
Next, let's import observable.

38
00:02:13.09 --> 00:02:18.09
Let's also import the
operators map and catch.

39
00:02:18.09 --> 00:02:23.06
Map will help us process the
results from a HTTP call.

40
00:02:23.06 --> 00:02:28.03
Catch will help us handle
any exceptions we encounter.

41
00:02:28.03 --> 00:02:32.05
In our app component let's pass in HTTP

42
00:02:32.05 --> 00:02:34.04
to our constructor.

43
00:02:34.04 --> 00:02:38.08
Next, let's create a
function called get all.

44
00:02:38.08 --> 00:02:41.06
Make sure this function
is within the scope

45
00:02:41.06 --> 00:02:43.01
of your app component.

46
00:02:43.01 --> 00:02:47.03
Let's add in a HTTP get call.

47
00:02:47.03 --> 00:02:53.07
Let's define our base URL
at the top of app component.

48
00:02:53.07 --> 00:02:58.07
This base URL will be
how we access our API.

49
00:02:58.07 --> 00:03:02.05
Let's pass in that base
URL to our get call

50
00:03:02.05 --> 00:03:08.07
and add in the rest of our URL.

51
00:03:08.07 --> 00:03:14.02
Passing in our check in
and check out parameters.

52
00:03:14.02 --> 00:03:16.01
Next, let's define a mapping function

53
00:03:16.01 --> 00:03:18.09
to help process the result.

54
00:03:18.09 --> 00:03:21.01
The function will be named map room

55
00:03:21.01 --> 00:03:24.09
and will take in one parameter response

56
00:03:24.09 --> 00:03:26.06
of the type response.

57
00:03:26.06 --> 00:03:29.08
It will return a array of rooms.

58
00:03:29.08 --> 00:03:33.05
Room is a object we defined earlier here.

59
00:03:33.05 --> 00:03:38.08
Let's take that response,
extract the json,

60
00:03:38.08 --> 00:03:42.04
and then grab the element
content from that json.

61
00:03:42.04 --> 00:03:46.06
Looking at the raw json
string you can see here

62
00:03:46.06 --> 00:03:50.01
content will return the
actual data which was

63
00:03:50.01 --> 00:03:53.06
returned from your API call minus

64
00:03:53.06 --> 00:03:58.00
all the information used for paging.

65
00:03:58.00 --> 00:04:01.07
Let's map the response
using that mapping function

66
00:04:01.07 --> 00:04:03.08
we just created.

67
00:04:03.08 --> 00:04:06.09
Let's have our get all function return

68
00:04:06.09 --> 00:04:12.04
a observable containing a room array.

69
00:04:12.04 --> 00:04:14.02
Let's make sure we have a colon

70
00:04:14.02 --> 00:04:18.00
between the function
name and the return type.

71
00:04:18.00 --> 00:04:21.03
Now, in the on submit
function which is triggered

72
00:04:21.03 --> 00:04:26.02
when we click search on our page.

73
00:04:26.02 --> 00:04:29.04
Let's call the get all function.

74
00:04:29.04 --> 00:04:34.01
Get all returns a observable
that we can subscribe to.

75
00:04:34.01 --> 00:04:36.05
When you subscribe to an observable

76
00:04:36.05 --> 00:04:40.07
you are subscribing to the
asynchronous data string.

77
00:04:40.07 --> 00:04:44.05
We will pass in a lamda
which will take the

78
00:04:44.05 --> 00:04:49.03
streaming data and put it
into an array called rooms.

79
00:04:49.03 --> 00:04:54.03
We will also pass in a second
lamda to handle errors.

80
00:04:54.03 --> 00:04:57.08
In this case, we will just log each error.

81
00:04:57.08 --> 00:04:59.06
Okay, let's save.

82
00:04:59.06 --> 00:05:02.07
Next, let's delete the hard coded data

83
00:05:02.07 --> 00:05:09.02
we had previously and
remove this initialization.

84
00:05:09.02 --> 00:05:13.01
Now, rooms will be empty until we submit

85
00:05:13.01 --> 00:05:17.01
our get all rest API call.

86
00:05:17.01 --> 00:05:20.09
Let's head to app.component.html.

87
00:05:20.09 --> 00:05:22.07
Let's navigate to the table

88
00:05:22.07 --> 00:05:25.01
which contains our room data,

89
00:05:25.01 --> 00:05:29.02
then let's add a ng if directive.

90
00:05:29.02 --> 00:05:32.09
This directive will
only display the section

91
00:05:32.09 --> 00:05:36.02
if rooms is populated.

92
00:05:36.02 --> 00:05:38.03
Okay, let's save.

93
00:05:38.03 --> 00:05:40.02
We could see webpack has compiled

94
00:05:40.02 --> 00:05:42.03
our changes successfully.

95
00:05:42.03 --> 00:05:45.02
So, let's go take a look at our site.

96
00:05:45.02 --> 00:05:47.04
If you right click on
the page, go to inspect,

97
00:05:47.04 --> 00:05:52.02
right click on refresh
and click on empty cache

98
00:05:52.02 --> 00:05:55.03
and hard reload that will clear your cache

99
00:05:55.03 --> 00:06:00.00
and give you a fresh
update of your website.

100
00:06:00.00 --> 00:06:04.02
Type in a date, then click submit.

101
00:06:04.02 --> 00:06:07.03
Clicking submit will trigger this method

102
00:06:07.03 --> 00:06:14.08
on submit passing in your
form group, room search.

103
00:06:14.08 --> 00:06:18.04
That method will execute the get all

104
00:06:18.04 --> 00:06:21.08
rest API call and then we will subscribe

105
00:06:21.08 --> 00:06:25.01
to the return observable which will

106
00:06:25.01 --> 00:06:29.08
populate data into the array rooms.

107
00:06:29.08 --> 00:06:33.06
Then, we use a ng 4 directive to iterate

108
00:06:33.06 --> 00:06:38.00
through that data and
display it in the table.

109
00:06:38.00 --> 00:06:40.07
We can see the data displayed here.

110
00:06:40.07 --> 00:06:42.09
We have added formatting to make the price

111
00:06:42.09 --> 00:06:46.04
look more like an actual price.

112
00:06:46.04 --> 00:06:49.02
You can see the three elements displayed

113
00:06:49.02 --> 00:06:52.07
in our table now match up
with the three elements

114
00:06:52.07 --> 00:06:55.06
which we pulled from our data base.

115
00:06:55.06 --> 00:06:58.00
We have prices being
two hundred, two fifteen

116
00:06:58.00 --> 00:06:59.08
and two eighteen.

117
00:06:59.08 --> 00:07:01.07
Also, let's take a look at some of the

118
00:07:01.07 --> 00:07:03.05
client side validation.

119
00:07:03.05 --> 00:07:08.04
If you try to add a invalid
date, such as March 32nd,

120
00:07:08.04 --> 00:07:13.00
it will automatically change
it to the last valid date.

121
00:07:13.00 --> 00:07:16.01
If you leave a field empty
and try to click submit

122
00:07:16.01 --> 00:07:18.06
you'll get a validation error.

